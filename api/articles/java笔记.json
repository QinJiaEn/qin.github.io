{"title":"面试题记录","slug":"java笔记","date":"2023-05-11T14:33:16.000Z","updated":"2023-05-11T16:15:41.942Z","comments":true,"path":"api/articles/java笔记.json","excerpt":null,"covers":["/posts/737a1d74/Snipaste_2023-02-19_15-50-31.png","/posts/737a1d74/Users\\Mr.Q\\Pictures\\java\\Snipaste_2023-02-28_20-54-06.png","/posts/737a1d74/Users\\Mr.Q\\Pictures\\java\\Snipaste_2023-02-28_20-43-55.png","/posts/737a1d74/Users\\Mr.Q\\Pictures\\java\\Snipaste_2023-03-01_21-59-54.png","/posts/737a1d74/Users\\Mr.Q\\Pictures\\java\\Snipaste_2023-03-16_14-59-52.png","/posts/737a1d74/Users\\Mr.Q\\Pictures\\java\\Snipaste_2023-03-18_15-02-50.png","/posts/737a1d74/Users\\Mr.Q\\Pictures\\java\\Snipaste_2023-03-20_15-15-33.png","/posts/737a1d74/Users\\Mr.Q\\Pictures\\java\\Snipaste_2023-03-02_21-18-07.png","/posts/737a1d74/Users\\Mr.Q\\Pictures\\java\\Snipaste_2023-03-29_11-50-03.png","/posts/737a1d74/Users\\Mr.Q\\Pictures\\java\\Snipaste_2023-03-30_09-20-17.png","/posts/737a1d74/Users\\Mr.Q\\Pictures\\java\\Snipaste_2023-03-30_09-23-49.png","/posts/737a1d74/Users\\Mr.Q\\Pictures\\java\\Snipaste_2023-03-22_17-41-33.png","/posts/737a1d74/Users\\Mr.Q\\Pictures\\java\\Snipaste_2023-03-22_18-23-55.png","/posts/737a1d74/Users\\Mr.Q\\Pictures\\java\\Snipaste_2023-03-04_14-40-29.png","/posts/737a1d74/Users\\Mr.Q\\Pictures\\java\\Snipaste_2023-03-20_08-42-16.png"],"content":"<h1 id=\"面向对象编程\"><a href=\"#面向对象编程\" class=\"headerlink\" title=\"面向对象编程\"></a>面向对象编程</h1><h2 id=\"定义类的补充注意事项\"><a href=\"#定义类的补充注意事项\" class=\"headerlink\" title=\"定义类的补充注意事项\"></a>定义类的补充注意事项</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javabean类：</span><br><span class=\"line\">\t用来描述一类事物的类，在javabean类中，是不写main方法的</span><br><span class=\"line\">标准的javabean类：</span><br><span class=\"line\">\t类名需要见名知意</span><br><span class=\"line\">\t成员变量需要用<span class=\"keyword\">private</span>修饰</span><br><span class=\"line\">\t提供至少两个构造方法</span><br><span class=\"line\">\t\t无参构造</span><br><span class=\"line\">\t\t带全部参数的构造方法</span><br><span class=\"line\">\t成员方法</span><br><span class=\"line\">\t\t提供每一个成员变量对应的setXxx()和getXxx()</span><br><span class=\"line\">\t\t如果还有其他行为，也需要写上</span><br><span class=\"line\"></span><br><span class=\"line\">测试类：</span><br><span class=\"line\">\t在以前编写main方法的类，我们可以在测试类中创建javabean类的对象进行赋值调用</span><br><span class=\"line\"></span><br><span class=\"line\">\t成员变量的完整定义格式：修饰符 数据类型 变量名称 = 初始化值，一般无需定义初始化值，存在默认值</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"面向对象三大特征（封装-继承-多态）\"><a href=\"#面向对象三大特征（封装-继承-多态）\" class=\"headerlink\" title=\"面向对象三大特征（封装   继承    多态）\"></a>面向对象三大特征（封装   继承    多态）</h2><h3 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">告诉我们如何正确的设计对象的属性和方法</span><br><span class=\"line\">对象代表什么，就得封装对应的数据，并提供数据对应的行为</span><br><span class=\"line\">\t例如：</span><br><span class=\"line\">\t\t需求：人画圆，请针对这个需求进行面向对象的设计</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java中提供一个关键字extends，用这个关键字，我们可以让一个类和另一个类建立起继承关系。（java只支持单继承，不支持多继承，但是支持多层继承）</span><br><span class=\"line\">    每一个类都直接或间接的继承<span class=\"function\">Object</span></span><br><span class=\"line\"><span class=\"function\">   </span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"keyword\">public</span> class Student extends <span class=\"title\">Person</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">Student称为子类，Person称为父类</span><br><span class=\"line\">    </span><br><span class=\"line\">使用继承的好处</span><br><span class=\"line\">    可以把多个子类重复的代码抽取到父类中，提高了代码的复用性</span><br><span class=\"line\">    子类可以在父类的基础上，增加其他的共能，是子类更强大。</span><br><span class=\"line\">    </span><br><span class=\"line\">什么时候用继承</span><br><span class=\"line\">    当类与类之间，存在相同（共性）的内容，并满足子类是父类中的一种，就可以考虑使用继承，来优化代码。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">什么是多态？</span><br><span class=\"line\">\t同类型的对象，表现出的不同的形态。</span><br><span class=\"line\"></span><br><span class=\"line\">多态的表现形式</span><br><span class=\"line\">\t父类类型 对象名称 = 子类对象;</span><br><span class=\"line\"></span><br><span class=\"line\">多态的前提</span><br><span class=\"line\">\t有继承/实现（接口）关系</span><br><span class=\"line\">\t有父类引用指向子类对象</span><br><span class=\"line\">\t有方法重写</span><br><span class=\"line\">\t</span><br><span class=\"line\">多态的好处</span><br><span class=\"line\">\t使用父类型作为参数，可以接收所有的子类对象，体现多态的扩展与便利 </span><br><span class=\"line\">\t在多态形式下，右边对象可以实现解耦合，便于扩展和维护</span><br><span class=\"line\">\t</span><br><span class=\"line\">多态的弊端</span><br><span class=\"line\">\t不能使用子类独有的方法</span><br><span class=\"line\">解决方法</span><br><span class=\"line\">\t转换成真正的子类类型，从而调用子类独有的功能</span><br><span class=\"line\">\t转换类型与真实对象类型不一致会报错</span><br><span class=\"line\">\t转换时用instanceof关键字进行判断</span><br><span class=\"line\">\t</span><br><span class=\"line\">调用成员变量的特点：</span><br><span class=\"line\">\t编译看左边，运行也看左边</span><br><span class=\"line\">调用成员方法的特点：</span><br><span class=\"line\">\t编译看左边，运行看右边</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"关键字还有修饰符\"><a href=\"#关键字还有修饰符\" class=\"headerlink\" title=\"关键字还有修饰符\"></a>关键字还有修饰符</h2><h3 id=\"private-lt-空着不写-lt-protected-lt-public\"><a href=\"#private-lt-空着不写-lt-protected-lt-public\" class=\"headerlink\" title=\"private &lt; 空着不写 &lt; protected &lt; public\"></a>private &lt; 空着不写 &lt; protected &lt; public</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span>关键字：</span><br><span class=\"line\">\t是一个权限修饰符</span><br><span class=\"line\">\t可以修饰成员（成员变量和成员方法）</span><br><span class=\"line\">\t被  <span class=\"keyword\">private</span>  修饰的成员只能在本类中才能访问</span><br><span class=\"line\">\t针对<span class=\"keyword\">private</span>   修饰的成员变量，如果要被其他类使用，应该提供相应的操作</span><br><span class=\"line\">\t\t提供“setXxx(参数)”方法，用于给成员变量赋值，方法用<span class=\"keyword\">public</span>修饰</span><br><span class=\"line\">\t\t提供<span class=\"string\">&quot;getXxx()&quot;</span>方法，用于获取成员变量的值，方法用<span class=\"keyword\">public</span>修饰</span><br><span class=\"line\"></span><br><span class=\"line\">实际开发中，一般只用<span class=\"keyword\">private</span>和<span class=\"keyword\">public</span></span><br><span class=\"line\">    成员变量私有</span><br><span class=\"line\">    方法公开</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>关键字   （表示当前方法调用者的地址值）</span><br><span class=\"line\">\t可以区分成员变量(在类中不在方法中的变量)和局部变量(方法中的变量就叫局部变量)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"this和super使用总结\"><a href=\"#this和super使用总结\" class=\"headerlink\" title=\"this和super使用总结\"></a>this和super使用总结</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">表示当前方法调用者的地址值</span><br><span class=\"line\">这个this是由虚拟机赋值的 </span><br><span class=\"line\"></span><br><span class=\"line\">this</span><br><span class=\"line\">\t理解为一个变量，表示当前方法调用者的地址</span><br><span class=\"line\">super</span><br><span class=\"line\">\t代表父类存储空间</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static表示静态，是java中的一个修饰符，可以修饰成员方法和成员变量</span><br><span class=\"line\"></span><br><span class=\"line\">被static修饰的成员变量  静态变量</span><br><span class=\"line\">\t特点：</span><br><span class=\"line\">\t\t被该类所有的对象共享</span><br><span class=\"line\">\t\t不属于对象，属于类</span><br><span class=\"line\">\t\t随着类的加载而加载，优先于对象存在</span><br><span class=\"line\">\t调用方式：</span><br><span class=\"line\">\t\t类名调用和对象名调用</span><br><span class=\"line\"></span><br><span class=\"line\">被static修饰的成员方法  静态方法</span><br><span class=\"line\">\t特点：</span><br><span class=\"line\">\t\t多用在测试类和工具类中</span><br><span class=\"line\">\t\tjavabean类中很少会用</span><br><span class=\"line\">\t调用方式：a</span><br><span class=\"line\">\t\t类名调用和对象名调用</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"static注意事项\"><a href=\"#static注意事项\" class=\"headerlink\" title=\"static注意事项\"></a>static注意事项</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">静态方法中，只能访问静态</span><br><span class=\"line\">非静态方法可以访问所有</span><br><span class=\"line\">静态方法中没有this关键字</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"final\"><a href=\"#final\" class=\"headerlink\" title=\"final\"></a>final</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可修饰  方法  类   变量</span><br><span class=\"line\">一旦用final修饰</span><br><span class=\"line\">\t方法</span><br><span class=\"line\">\t\t该方法是最终方法，不能被重写</span><br><span class=\"line\">\t类</span><br><span class=\"line\">\t\t该类值最终类，不能被继承</span><br><span class=\"line\">\t变量</span><br><span class=\"line\">\t\t叫做常量，只能被赋值一次</span><br><span class=\"line\">\t\tfinal修改基本数据类型，记录的值不能发生改变</span><br><span class=\"line\">\t\tfinal修改引用数据类型，记录的地址值不能发生改变，内部的属性值还是可以改变的</span><br><span class=\"line\">\t\t</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">instanceof   </span><br><span class=\"line\">\t用来判断对象和类型是否一致     对象   instanceof   类型</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"构造方法（构造器，构造函数）\"><a href=\"#构造方法（构造器，构造函数）\" class=\"headerlink\" title=\"构造方法（构造器，构造函数）\"></a>构造方法（构造器，构造函数）</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">作用：</span><br><span class=\"line\">\t在创建对象时，虚拟机（jvm）会自动调用构造方法，作用是给成员变量进行赋值的</span><br><span class=\"line\">\t\t例如：</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span>&#123;</span><br><span class=\"line\">\t\t\t\t修饰符     方法名与类名相同  (参数)&#123;</span><br><span class=\"line\">\t\t\t\t\t方法体;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">特点：</span><br><span class=\"line\">\t方法名与类名相同大小写也要一致</span><br><span class=\"line\">\t没有返回值类型，没有<span class=\"keyword\">void</span></span><br><span class=\"line\">\t没有具体的返回值(不能由<span class=\"keyword\">return</span>返回具体的数据)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">注意事项：</span><br><span class=\"line\">\t构造方法的定义：</span><br><span class=\"line\">\t\t如果没有定义构造方法，系统将会给出一个默认的无参构造</span><br><span class=\"line\">\t\t\t无参构造：</span><br><span class=\"line\">\t\t\t\t在初始化对象的时候，成员变量的数据均采用默认值</span><br><span class=\"line\">\t\t如果自己给出了构造方法，系统将不会提供默认的构造方法</span><br><span class=\"line\">\t\t\t有参构造：</span><br><span class=\"line\">\t\t\t\t在初始化对象的时候，同时可以给成员变量进行赋值</span><br><span class=\"line\">\t构造方法的重载：</span><br><span class=\"line\">\t\t带参构造方法，和无参构造方法，两者方法名相同，但是参数不同，这就叫做构造方法的重载</span><br><span class=\"line\">\t推荐使用方式：</span><br><span class=\"line\">\t\t无论是否使用，都手动书写无参构造方法，和带全部参数的构造方法</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"一个对象的内存图\"><a href=\"#一个对象的内存图\" class=\"headerlink\" title=\"一个对象的内存图\"></a>一个对象的内存图</h2><p><img src=\"/posts/737a1d74/Snipaste_2023-02-19_15-50-31.png\"></p>\n<h2 id=\"x3D-x3D-号到底比的是什么？\"><a href=\"#x3D-x3D-号到底比的是什么？\" class=\"headerlink\" title=\"&#x3D;&#x3D;号到底比的是什么？\"></a>&#x3D;&#x3D;号到底比的是什么？</h2><p><img src=\"/posts/737a1d74/Users\\Mr.Q\\Pictures\\java\\Snipaste_2023-02-28_20-54-06.png\"></p>\n<h1 id=\"String概述\"><a href=\"#String概述\" class=\"headerlink\" title=\"String概述\"></a>String概述</h1><h2 id=\"创建String对象的两种方式\"><a href=\"#创建String对象的两种方式\" class=\"headerlink\" title=\"创建String对象的两种方式\"></a>创建String对象的两种方式</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>。直接赋值</span><br><span class=\"line\">\tString name = <span class=\"string\">&quot;Mq&quot;</span>;</span><br><span class=\"line\"><span class=\"number\">2.</span><span class=\"function\">new</span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">()</span>  <span class=\"comment\">//空参构造</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">(<span class=\"keyword\">char</span>[] chs)</span>  <span class=\"comment\">//根据字符数组，创建字符串对象</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] chs)</span>  <span class=\"comment\">//根据字节数字，创建字符串对象</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第二种创建方式\"><a href=\"#第二种创建方式\" class=\"headerlink\" title=\"第二种创建方式\"></a>第二种创建方式</h3><p><img src=\"/posts/737a1d74/Users\\Mr.Q\\Pictures\\java\\Snipaste_2023-02-28_20-43-55.png\"></p>\n<h2 id=\"String的一些方法\"><a href=\"#String的一些方法\" class=\"headerlink\" title=\"String的一些方法\"></a>String的一些方法</h2><h3 id=\"字符串比较\"><a href=\"#字符串比较\" class=\"headerlink\" title=\"字符串比较\"></a>字符串比较</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">boolean</span> equals方法(要比较的字符串)   完全一样结果才是<span class=\"keyword\">true</span>，否则就是<span class=\"function\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">equalslgnoreCase</span><span class=\"params\">(要比较的字符串)</span>  忽略大小写比较   <span class=\"comment\">//一般都是字符串</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">//比较两个字符串字母的大小</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">compareTo</span><span class=\"params\">(String str)</span></span></span><br><span class=\"line\"><span class=\"function\">    String s1 </span>= <span class=\"string\">&quot;a&quot;</span>;</span><br><span class=\"line\">\tString s2 = <span class=\"string\">&quot;b&quot;</span>;</span><br><span class=\"line\">\ts1.compareTo(s2);\t<span class=\"comment\">//会返回-1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"遍历字符串\"><a href=\"#遍历字符串\" class=\"headerlink\" title=\"遍历字符串\"></a>遍历字符串</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">char</span> <span class=\"title\">charAt</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span>: 根据索引返回字符</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">length</span><span class=\"params\">()</span>: 返回此字符串的长度</span></span><br><span class=\"line\"><span class=\"function\">数组的长度： 数组名.length</span></span><br><span class=\"line\"><span class=\"function\">字符串的长度： 字符串对象.<span class=\"title\">length</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">字符串的长度是方法    数组的长度是属性</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"截取字符串\"><a href=\"#截取字符串\" class=\"headerlink\" title=\"截取字符串\"></a>截取字符串</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">String <span class=\"title\">substring</span><span class=\"params\">(<span class=\"keyword\">int</span> beginIndex,<span class=\"keyword\">int</span> endIndex)</span>  注意：包头不包尾，包左不包右</span></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">substring</span><span class=\"params\">(<span class=\"keyword\">int</span> beginIndex)</span>  截取到末尾 </span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"替换字符串\"><a href=\"#替换字符串\" class=\"headerlink\" title=\"替换字符串\"></a>替换字符串</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">String <span class=\"title\">replace</span><span class=\"params\">(旧值,新值)</span>  <span class=\"comment\">//注意：只有返回值才是替换之后的结果</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串原理\"><a href=\"#字符串原理\" class=\"headerlink\" title=\"字符串原理\"></a>字符串原理</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字符串存储的内存原理</span><br><span class=\"line\">\t直接赋值会复用字符常量池中的</span><br><span class=\"line\">\t<span class=\"keyword\">new</span>出来的不会复用，而是开辟一个新的空间</span><br><span class=\"line\">==号比较的到底是什么？</span><br><span class=\"line\">\t基本数据类型比较数据值</span><br><span class=\"line\">\t引用数据类型比较地址值   .equals()方法</span><br><span class=\"line\">字符串拼接的底层原理</span><br><span class=\"line\">\t如果没有变量参与，都是字符串直接相加，编译之后就是拼接之后的结果，会复用串池中的字符串。</span><br><span class=\"line\">\t如果有变量参与，每一行拼接的代码，都会在内存中创建新的字符串，浪费内存。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串拼接的底层原理\"><a href=\"#字符串拼接的底层原理\" class=\"headerlink\" title=\"字符串拼接的底层原理\"></a>字符串拼接的底层原理</h3><p><img src=\"/posts/737a1d74/Users\\Mr.Q\\Pictures\\java\\Snipaste_2023-03-01_21-59-54.png\"></p>\n<h2 id=\"StringBuilder概述\"><a href=\"#StringBuilder概述\" class=\"headerlink\" title=\"StringBuilder概述\"></a>StringBuilder概述</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringBuilder可以看成一个容器，创建之后里边的内容是可变的！！！</span><br><span class=\"line\">\t作用：提高字符串的操作效率</span><br><span class=\"line\">\t比如单纯的字符串拼接操作会产生新的字符串造成空间的浪费</span><br><span class=\"line\">\t提高效率的底层原理</span><br><span class=\"line\">\t\t所有要拼接的内容都会往StringBuilder中放，不会创建很多无用的空间，节约内存</span><br><span class=\"line\">构造方法</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StringBuilder</span><span class=\"params\">()</span>    创建一个空白可变字符串对象，不含有任何内容</span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"keyword\">public</span> <span class=\"title\">StringBuilder</span><span class=\"params\">(String str)</span> 根据字符串的内容，来创建可变字符串对象</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"StringBuilder常用方法\"><a href=\"#StringBuilder常用方法\" class=\"headerlink\" title=\"StringBuilder常用方法\"></a>StringBuilder常用方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> StringBuilder <span class=\"title\">append</span><span class=\"params\">(任意类型)</span> 添加数据，并返回对象本身</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> StringBuilder <span class=\"title\">reverse</span><span class=\"params\">()</span> 反转容器中的内容</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lengh</span><span class=\"params\">()</span> 返回长度（字符出现的个数）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> 通过<span class=\"title\">toString</span><span class=\"params\">()</span>就可以实现把StringBuilder转换为String</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"StringBuilder源码分析\"><a href=\"#StringBuilder源码分析\" class=\"headerlink\" title=\"StringBuilder源码分析\"></a>StringBuilder源码分析</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">默认创建一个长度为<span class=\"number\">16</span>的字节数组</span><br><span class=\"line\">添加的内容长度小于<span class=\"number\">16</span>，直接存</span><br><span class=\"line\">添加的内容大于<span class=\"number\">16</span>会扩容（原来的容量*<span class=\"number\">2</span>+<span class=\"number\">2</span>）</span><br><span class=\"line\">如果扩容之后还不够，以实际长度为准</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"StringJoiner概述\"><a href=\"#StringJoiner概述\" class=\"headerlink\" title=\"StringJoiner概述\"></a><strong>StringJoiner概述</strong></h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringJoiner和StringBuilder一样，也可以看成一个容器，创建之后里边的内容是可变的</span><br><span class=\"line\">\t作用：</span><br><span class=\"line\">\t\t提高字符串的操作效率，而且代码编写特别简介，但是目前市场上很少有人用。</span><br><span class=\"line\">\t构造方法</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StringJoiner</span><span class=\"params\">(间隔符号)</span>  创建一个StringJoiner对象，指定拼接时的间隔符号</span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"keyword\">public</span> <span class=\"title\">StringJoiner</span><span class=\"params\">(间隔符号,开始符号,结束符号)</span> 创建一个StringJoiner对象，指定拼接时的间隔符号开始符号和结束符号</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"StringJoiner常用方法\"><a href=\"#StringJoiner常用方法\" class=\"headerlink\" title=\"StringJoiner常用方法\"></a><strong>StringJoiner常用方法</strong></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> StringJoiner <span class=\"title\">add</span><span class=\"params\">(添加的内容)</span>  添加数据，并返回对象本身</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">length</span><span class=\"params\">()</span>  返回长度</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span>  返回一个字符串该字符串就是拼接后的结果 </span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h2><h3 id=\"Collection单列集合（接口，需要创建实现类对象）\"><a href=\"#Collection单列集合（接口，需要创建实现类对象）\" class=\"headerlink\" title=\"Collection单列集合（接口，需要创建实现类对象）\"></a>Collection单列集合（接口，需要创建实现类对象）</h3><p><img src=\"/posts/737a1d74/Users\\Mr.Q\\Pictures\\java\\Snipaste_2023-03-16_14-59-52.png\" alt=\"Snipaste_2023-03-16_14-59-52\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Collection</span><br><span class=\"line\">\tCollection是单列集合的祖宗接口，它的功能是全部单列集合都可以继承使用的。</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span>\t\t把给定的对象添加到当前集合中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span>\t\t清空集合中所有的元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(E e)</span>\t把给定的对象在当前集合删除</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Object obj)</span>\t判断当前集合是否包含给定对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span>\t判断当前集合是否为空</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> \t\t返回集合元素个数</span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\">需要注意：</span></span><br><span class=\"line\"><span class=\"function\">     contains底层是依赖equals方法进行判断是否存在的</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"comment\">// 所以，如果集合中存储的是自定义对象，也想通过contains方法来判断是否包含，那么在javabean类中，一定要重写equals方法</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\">---------------------------------------------------Collection集合获取迭代器</span></span><br><span class=\"line\"><span class=\"function\"> </span></span><br><span class=\"line\"><span class=\"function\">\tIterator&lt;E&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span>\t\t返回迭代器对象，默认指向当前集合的0索引</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p><img src=\"/posts/737a1d74/Users\\Mr.Q\\Pictures\\java\\Snipaste_2023-03-18_15-02-50.png\"></p>\n<h4 id=\"List集合（也是接口，需要创建实现类的对象）\"><a href=\"#List集合（也是接口，需要创建实现类的对象）\" class=\"headerlink\" title=\"List集合（也是接口，需要创建实现类的对象）\"></a>List集合（也是接口，需要创建实现类的对象）</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List集合的特点</span><br><span class=\"line\">\t有序：</span><br><span class=\"line\">\t\t存和取的元素顺序一致</span><br><span class=\"line\">\t有索引：</span><br><span class=\"line\">\t\t可以通过索引操作元素</span><br><span class=\"line\">\t可重复：</span><br><span class=\"line\">\t\t存储的元素可以重复</span><br><span class=\"line\"></span><br><span class=\"line\">List集合的特有方法</span><br><span class=\"line\">\tCollection的方法List都继承了</span><br><span class=\"line\">\tList集合因为有索引，所以多了很多索引操作的方法</span><br><span class=\"line\"></span><br><span class=\"line\">方法名称</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index,E element)</span> <span class=\"comment\">//在集合中按指定位置插入元素</span></span></span><br><span class=\"line\"><span class=\"function\">E <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span>\t<span class=\"comment\">//删除指定索引的元素，返回被删除的元素</span></span></span><br><span class=\"line\"><span class=\"function\">E <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> index,E element)</span>\t<span class=\"comment\">//修改指定索引的元素，返回被修改的元素</span></span></span><br><span class=\"line\"><span class=\"function\">E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span>\t<span class=\"comment\">//返回指定索引处的元素</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"ArrayList集合\"><a href=\"#ArrayList集合\" class=\"headerlink\" title=\"ArrayList集合\"></a>ArrayList集合</h5><h5 id=\"集合和数组的对比\"><a href=\"#集合和数组的对比\" class=\"headerlink\" title=\"集合和数组的对比\"></a>集合和数组的对比</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">集合</span><br><span class=\"line\">\t长度可变</span><br><span class=\"line\">\t可以存引用数据类型（存基本数据类型的话需要包装类）</span><br><span class=\"line\">    E   泛型：限定集合中存储数据的类型\t</span><br><span class=\"line\">数组</span><br><span class=\"line\">\t长度固定</span><br><span class=\"line\">\t可以存基本数据类型和引用数据类型</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"ArrayList成员方法-增删改查\"><a href=\"#ArrayList成员方法-增删改查\" class=\"headerlink\" title=\"ArrayList成员方法(增删改查)\"></a>ArrayList成员方法(增删改查)</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span>  <span class=\"comment\">//添加元素，返回值表示是否添加成功</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(E e)</span><span class=\"comment\">//删除指定元素，返回值表示是否删除成功</span></span></span><br><span class=\"line\"><span class=\"function\">E <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> <span class=\"comment\">//删除指定索引的元素，返回被删除的元素</span></span></span><br><span class=\"line\"><span class=\"function\">E <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> index,E e)</span> <span class=\"comment\">//修改指定索引下的元素，返回原来的元素</span></span></span><br><span class=\"line\"><span class=\"function\">E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> <span class=\"comment\">//获取指定索引的元素</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span>  <span class=\"comment\">//集合的长度，也就是集合中元素的个数</span></span></span><br></pre></td></tr></table></figure>\n\n<h4 id><a href=\"#\" class=\"headerlink\" title></a></h4><h4 id=\"Set系列集合（Set接口中的方法和Collection的Api一致）\"><a href=\"#Set系列集合（Set接口中的方法和Collection的Api一致）\" class=\"headerlink\" title=\"Set系列集合（Set接口中的方法和Collection的Api一致）\"></a>Set系列集合（Set接口中的方法和Collection的Api一致）</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set集合特点：</span><br><span class=\"line\">\t无序：存取顺序不一致</span><br><span class=\"line\">\t不重复：可以去除重复</span><br><span class=\"line\">\t无索引:没有带索引的方法，所以不能使用普通for循环遍历，也不能通过索引来获取元素</span><br><span class=\"line\">\t</span><br><span class=\"line\">Set集合的实现类：</span><br><span class=\"line\">\tHashSet：无序、不重复、无索引</span><br><span class=\"line\">\tLinkedHashSet：有序、不重复、无索引</span><br><span class=\"line\">\tTreeSet：可排序、不重复、无索引</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"HashSet\"><a href=\"#HashSet\" class=\"headerlink\" title=\"HashSet\"></a>HashSet</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HashSet底层原理：</span><br><span class=\"line\">\tHashSet集合底层采取哈希表存储数据</span><br><span class=\"line\">\t哈希表是一种对于增删改查数据性能都较好的结构</span><br><span class=\"line\">\t1.创建一个默认长度16，默认加载因子为0.75的数组，数组名为table</span><br><span class=\"line\">\t2.根据元素的哈希值跟数组的长度计算出应存入的位置</span><br><span class=\"line\">\t3.判断当前位置是否为null，如果是null直接存入</span><br><span class=\"line\">\t4.如果位置不为null，表示有元素，则调用equals方法比较属性值</span><br><span class=\"line\">\t5.一样： 不存\t\t不一样： 存入数组，形成链表</span><br><span class=\"line\">\t\tJDK8以前： 新元素存入数组，老元素挂在新元素下面</span><br><span class=\"line\">\t\tJDK8以后： 新元素直接挂在老元素下面</span><br><span class=\"line\">\tJDK8以后，当链表长度超过8，而且数组长度大于等于64时，自动转换为红黑树</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t如果集合中存储的时自定义对象，必须重写hashCode和equals方法</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">HashSet的三个问题</span><br><span class=\"line\">\tHashSet为什么存和取的顺序不一样？</span><br><span class=\"line\">\t\t遍历时从数组的0索引开始，遇到链表先遍历完再进行数组的遍历</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tHashSet为什么没有索引？</span><br><span class=\"line\">\t\t因为HashSet在底层是，数组链表和红黑树组成的的结构，不知道以谁当索引</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tHashSet是利用什么机制保证数据去重的？</span><br><span class=\"line\">\t\tHashSet方法和equals方法</span><br><span class=\"line\"></span><br><span class=\"line\">哈希表组成：</span><br><span class=\"line\">\tJDK8之前：</span><br><span class=\"line\">\t\t数组+链表</span><br><span class=\"line\">\tJDK8开始：</span><br><span class=\"line\">\t\t数组+链表+红黑树</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">哈希值：</span><br><span class=\"line\">\t对象的整数表现形式</span><br><span class=\"line\">\t根据hashCode方法算出来的int类型的整数</span><br><span class=\"line\">\t该方法定义再Object类中，所有对象都可以调用，默认使用地址值进行计算</span><br><span class=\"line\">\t一般情况下，会重写hashCode方法，利用对象内部的属性值计算哈希值</span><br><span class=\"line\">\t</span><br><span class=\"line\">对象的哈希值特点：</span><br><span class=\"line\">\t如果没有重写hashCode方法，不同对象计算出的哈希值是不同的</span><br><span class=\"line\">\t如果已经重写hashCode方法，不同的对象只要属性值相同，计算出的哈希值就是一样的</span><br><span class=\"line\">\t在小部分情况下，不同的属性值或者不同的地址值计算出来的哈希值也有可能一样（哈希碰撞）</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"LinkedHashSet\"><a href=\"#LinkedHashSet\" class=\"headerlink\" title=\"LinkedHashSet\"></a>LinkedHashSet</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">继承HashSet直接用HashSet的方法即可</span><br><span class=\"line\">底层是使用双向链表保证数据的顺序</span><br><span class=\"line\">特点：</span><br><span class=\"line\">\t有顺序、不重复、无索引</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"TreeSet\"><a href=\"#TreeSet\" class=\"headerlink\" title=\"TreeSet\"></a>TreeSet</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">特点：</span><br><span class=\"line\">\t可排序、不重复、无索引</span><br><span class=\"line\">\t</span><br><span class=\"line\">TreeSet添加的两种规则：</span><br><span class=\"line\">\t方式一：</span><br><span class=\"line\">\t\t默认排序，自然排序：</span><br><span class=\"line\">\t\t\tJavabean类实现Comparable接口指定比较规则</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t<span class=\"comment\">// 返回值：</span></span><br><span class=\"line\">    <span class=\"comment\">//     负数：认为要添加的元素是小的，存在左边</span></span><br><span class=\"line\">    <span class=\"comment\">//     正数：认为要添加的元素是大的，存在右边</span></span><br><span class=\"line\">    <span class=\"comment\">//     0：认为要添加的元素已经存在，舍弃</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Student o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//指定排序的规则</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//按照年龄比较</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getAge()-o.getAge();</span><br><span class=\"line\">        <span class=\"comment\">// return 0;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t方式二：</span><br><span class=\"line\">        比较器排序：创建TreeSet对象的时候，传递比较器Comparator指定规则</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"单列集合总结\"><a href=\"#单列集合总结\" class=\"headerlink\" title=\"单列集合总结\"></a>单列集合总结</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.如果想要集合中的元素可重复</span><br><span class=\"line\">\t用ArrayList集合，基于数组的</span><br><span class=\"line\">2.如果想要集合中元素重复，而且当前的增删操作明显多于查询</span><br><span class=\"line\">\t用LinkedList集合，基于链表的</span><br><span class=\"line\">3.如果想对集合中的元素去重</span><br><span class=\"line\">\t用HashSet集合，基于哈希表的</span><br><span class=\"line\">4.如果想对集合中的元素去重，而且保证存取顺序</span><br><span class=\"line\">\t用LinkedHashSet集合，基于哈希表和双链表，效率低于HashSet</span><br><span class=\"line\">5.如果想对集合中的元素进行排列</span><br><span class=\"line\">\t用TreeSet集合，基于红黑树，后续也可以用List集合实现排序</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Map双列集合（Map是双列集合的顶层接口，它的共功能是全部双列集合都可以继承使用的）\"><a href=\"#Map双列集合（Map是双列集合的顶层接口，它的共功能是全部双列集合都可以继承使用的）\" class=\"headerlink\" title=\"Map双列集合（Map是双列集合的顶层接口，它的共功能是全部双列集合都可以继承使用的）\"></a>Map双列集合（Map是双列集合的顶层接口，它的共功能是全部双列集合都可以继承使用的）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">双列集合的特点</span><br><span class=\"line\">\t双列集合一次需要存一对数据，分别为键和值</span><br><span class=\"line\">\t键不能重复，值可以重复</span><br><span class=\"line\">\t键和值是一一对应的，每一个键只能找到自己对应的值</span><br><span class=\"line\">\t键+值这个整体 我们称之为&quot;键值对&quot; 或者 &quot;键值对对象&quot;，在java中叫做&quot;Entry对象&quot;</span><br><span class=\"line\">\t</span><br><span class=\"line\">TreeMap特点：</span><br><span class=\"line\">\t不重复、无索引、可排序</span><br><span class=\"line\">\t底层基于红黑树实现排序，增删改查性能好</span><br><span class=\"line\">TreeMap集合排序的两种方式：</span><br><span class=\"line\">\t实现Compareble接口，指定比较规则</span><br><span class=\"line\">\t创建集合时传递Com【arator比较器对象，指定比较规则</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/posts/737a1d74/Users\\Mr.Q\\Pictures\\java\\Snipaste_2023-03-20_15-15-33.png\" alt=\"Snipaste_2023-03-20_15-15-33\"></p>\n<h4 id=\"Map常见的API\"><a href=\"#Map常见的API\" class=\"headerlink\" title=\"Map常见的API\"></a>Map常见的API</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">V put (K key,V value)\t\t添加元素</span><br><span class=\"line\">V remove(Object key)\t\t根据键删除键值对元素</span><br><span class=\"line\">void clear()\t\t\t\t移除所有的键值对元素</span><br><span class=\"line\">boolean containsKey(Object key)\t判断集合是否包含指定的键</span><br><span class=\"line\">Boolean containsValue(Object value) 判断集合是否包含指定的值</span><br><span class=\"line\">boolean isEmpty() \t\t\t判断集合是否为空</span><br><span class=\"line\">int size()\t\t\t\t\t集合的长度，也就是集合中键值对的个数</span><br><span class=\"line\">int get(Object key)\t\t\t判断键出现的次数</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Map遍历\"><a href=\"#Map遍历\" class=\"headerlink\" title=\"Map遍历\"></a>Map遍历</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">遍历方式有三种</span><br><span class=\"line\">\t<span class=\"number\">1.</span>键找值</span><br><span class=\"line\">\t<span class=\"comment\">//获取所有的键，把这些键放到一个集合中</span></span><br><span class=\"line\">        Set&lt;String&gt; keySet = m.keySet();</span><br><span class=\"line\">        然后通过Set集合遍历</span><br><span class=\"line\">    <span class=\"comment\">//利用map中对应的key键获取对应的值value</span></span><br><span class=\"line\">        String value = m.get(key);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;key = &quot;</span>+key+<span class=\"string\">&quot;  value = &quot;</span>+value);</span><br><span class=\"line\">\t<span class=\"number\">2.</span>不推荐</span><br><span class=\"line\">    <span class=\"number\">3.</span>利用Lambda改写BiConsumer</span><br><span class=\"line\">        m.forEach((key,value)-&gt; System.out.println(key+<span class=\"string\">&quot;=&quot;</span>+value));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">统计思想，利用map集合进行排序</span><br><span class=\"line\">    如果题目中没有要求对结果进行排序，默认使用HashMap</span><br><span class=\"line\">\t如果题目中要求对结果进行排序，默认使用TreeMap</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"遍历\"><a href=\"#遍历\" class=\"headerlink\" title=\"遍历\"></a>遍历</h2><h3 id=\"Colleation遍历\"><a href=\"#Colleation遍历\" class=\"headerlink\" title=\"Colleation遍历\"></a>Colleation遍历</h3><h4 id=\"迭代器遍历\"><a href=\"#迭代器遍历\" class=\"headerlink\" title=\"迭代器遍历\"></a>迭代器遍历</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">迭代器不依赖索引</span><br><span class=\"line\">Iterator中常用方法</span><br><span class=\"line\"></span><br><span class=\"line\">boolean hasNext() 判断当前位置是否有元素，有元素返回true，没有元素返回false</span><br><span class=\"line\"></span><br><span class=\"line\">E next() \t获取当前位置的元素，并将迭代器对象移向下一个位置</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"增强for\"><a href=\"#增强for\" class=\"headerlink\" title=\"增强for\"></a>增强for</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">增强<span class=\"keyword\">for</span>的底层就是迭代器，为了简化迭代器的代码书写的</span><br><span class=\"line\">他是JDK5以后出现的，其内部原理就是一个Iterator迭代器</span><br><span class=\"line\">所有的单列集合和数组才能用增强<span class=\"keyword\">for</span>进行遍历</span><br><span class=\"line\"></span><br><span class=\"line\">格式：</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(元素的数据类型 变量名:数组或集合)&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">例如：</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(String s : List)&#123;</span><br><span class=\"line\">        System.out.println(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">增强<span class=\"keyword\">for</span>的细节：</span><br><span class=\"line\">    \t修改增强<span class=\"keyword\">for</span>中的变量，不会改变集合中原本的数据</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Lambda表达式遍历\"><a href=\"#Lambda表达式遍历\" class=\"headerlink\" title=\"Lambda表达式遍历\"></a>Lambda表达式遍历</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JDK8开始的新技术Lambda表达式，提供了一种更简单，更直接的遍历集合的方式</span><br><span class=\"line\">() -&gt; </span><br><span class=\"line\">default void forEach(Consumer&lt;? super T&gt; action) :\t\t结合Lambda遍历集合</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"基本数据类型对应包装类\"><a href=\"#基本数据类型对应包装类\" class=\"headerlink\" title=\"基本数据类型对应包装类\"></a>基本数据类型对应包装类</h3><p><img src=\"/posts/737a1d74/Users\\Mr.Q\\Pictures\\java\\Snipaste_2023-03-02_21-18-07.png\" alt=\"Snipaste_2023-03-02_21-18-07\"></p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">什么是反射？</span><br><span class=\"line\">\t反射允许对封装类的字段（成员变量）</span><br><span class=\"line\">\t方法（成员方法）</span><br><span class=\"line\">\t构造函数（构造方法）</span><br><span class=\"line\">\t的信息进行编程访问</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">什么是多线程？</span><br><span class=\"line\">\t有了多线程，我们就可以让程序同时做多件事情</span><br><span class=\"line\">多线程的作用？</span><br><span class=\"line\">\t提高效率</span><br><span class=\"line\">多线程的应用场景？</span><br><span class=\"line\">\t只要你想让多个事情同时运行就需要用到多线程</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"并发与并行\"><a href=\"#并发与并行\" class=\"headerlink\" title=\"并发与并行\"></a>并发与并行</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">并发：</span><br><span class=\"line\">\t在同一时刻，有多个指令在单个CPU上   交替   执行</span><br><span class=\"line\">\t</span><br><span class=\"line\">并行：</span><br><span class=\"line\">\t在同一时刻，有多个指令在多个CPU上   同时   执行</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"多线程三种实现方法对比\"><a href=\"#多线程三种实现方法对比\" class=\"headerlink\" title=\"多线程三种实现方法对比\"></a>多线程三种实现方法对比</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一种：</span><br><span class=\"line\">\t继承Thread类</span><br><span class=\"line\">\t\t优点：</span><br><span class=\"line\">\t\t\t编程比较简单可以直接使用Thread类中的方法</span><br><span class=\"line\">\t\t缺点：</span><br><span class=\"line\">\t\t\t扩展性较差，不能再继承其他类</span><br><span class=\"line\">第二种：</span><br><span class=\"line\">\t实现Runnable接口</span><br><span class=\"line\">\t\t优点：</span><br><span class=\"line\">\t\t\t扩展性强，实现该接口的同时还可以继承其他的类</span><br><span class=\"line\">\t\t缺点：</span><br><span class=\"line\">\t\t\t编程相对复杂，不能直接使用Thread类中的方法</span><br><span class=\"line\">第三种：</span><br><span class=\"line\">\t实现Callable接口    （同第二种）</span><br><span class=\"line\">\t不过可以获取线程运行的结果</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"线程常用的成员方法\"><a href=\"#线程常用的成员方法\" class=\"headerlink\" title=\"线程常用的成员方法\"></a>线程常用的成员方法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回此线程的名称</span></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">getName</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 设置线程的名字（构造方法也可以设置名字）</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 获取当前线程的对象</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> Thread <span class=\"title\">currentThread</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 让线程休眠指定的时间，单位为毫秒</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sleep</span><span class=\"params\">(Long time)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 设置线程的优先级</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">setPriority</span><span class=\"params\">(<span class=\"keyword\">int</span> newPriority)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 获取线程的优先级</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getPriority</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 设置为守护线程</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setDaemon</span><span class=\"params\">(<span class=\"keyword\">boolean</span> on)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 出让线程/礼让线程</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">yield</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 插入线程/插队线程</span></span></span><br><span class=\"line\"><span class=\"function\">publid <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">join</span><span class=\"params\">()</span></span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"线程的生命周期\"><a href=\"#线程的生命周期\" class=\"headerlink\" title=\"线程的生命周期\"></a>线程的生命周期</h4><p><img src=\"/posts/737a1d74/Users\\Mr.Q\\Pictures\\java\\Snipaste_2023-03-29_11-50-03.png\" alt=\"Snipaste_2023-03-29_11-50-03\"></p>\n<h4 id=\"同步代码块\"><a href=\"#同步代码块\" class=\"headerlink\" title=\"同步代码块\"></a>同步代码块</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">把操作共享数据的代码锁起来</span><br><span class=\"line\">格式：</span><br><span class=\"line\">\tsynchronized(锁)&#123;</span><br><span class=\"line\">\t\t操作共享数据的代码</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">特点：</span><br><span class=\"line\">\t锁默认打开，有一个线程进入，锁自动关闭</span><br><span class=\"line\">\t里面所有的代码全部执行完毕，线程出来，锁自动打开</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Lock锁\"><a href=\"#Lock锁\" class=\"headerlink\" title=\"Lock锁\"></a>Lock锁</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Lock实现提供比使用<span class=\"keyword\">synchronized</span>方法和语句可以获得更广泛的锁定操作</span><br><span class=\"line\">Lock中提供了获得锁和释放锁的方法</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">locl</span><span class=\"params\">()</span>:获得锁</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unlock</span><span class=\"params\">()</span>:释放锁</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">Lock是接口不能直接实例化，这里采用它的实现类ReentrantLock来实例化</span></span><br><span class=\"line\"><span class=\"function\">ReentrantLock的构造方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">ReentrantLock</span><span class=\"params\">()</span>:创建一个ReentrantLock的实例化</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Execuors：</span><br><span class=\"line\">\t线程池的工具类通过调用方法返回不同类型的线程池对象</span><br><span class=\"line\"></span><br><span class=\"line\">线程池代码实现：</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建一个没有上线的线程池</span><br><span class=\"line\">public static ExecutorService newCachedThreadPool()</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建有上限的线程池</span><br><span class=\"line\">public static ExecutorService newFixedThreadPool(int nThreads)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">线程池主要核心原理</span><br><span class=\"line\">\t1.创建一个池子，池子中是空的</span><br><span class=\"line\">\t2.提交任务时，池子会创建新的线程对象，任务执行完毕，线程归还给池子，下回再次提交任务时，不需要创建新的线程，直接复用已有的线程即可</span><br><span class=\"line\">\t3.但是如果提交任务时，池子中没有空闲线程，也无法创建新的线程，任务就会排队等待</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">自定义线程池</span><br><span class=\"line\">\t小结：</span><br><span class=\"line\">\t\t1.创建一个空的池子</span><br><span class=\"line\">\t\t2.有任务提交时，线程池会创建线程去执行任务，执行完毕归还线程</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">不断的提交任务，会有三个临界点：</span><br><span class=\"line\">\t1.当核心线程满时，在提交任务就会排队</span><br><span class=\"line\">\t2.当核心线程满，队伍满时，会创建临时线程</span><br><span class=\"line\">\t3.当核心线程满，队伍满，临时线程满时，会触发任务拒绝策略</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"网络编程\"><a href=\"#网络编程\" class=\"headerlink\" title=\"网络编程\"></a>网络编程</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">什么是网络编程？</span><br><span class=\"line\">\t在网络通信协议下，不同计算机上运行的程序，进行的数据传输</span><br><span class=\"line\">\t</span><br><span class=\"line\">表示互联网协议（IP）地址的类</span><br><span class=\"line\">\tInetAddress</span><br><span class=\"line\">\t</span><br><span class=\"line\">端口号：</span><br><span class=\"line\">\t应用程序在设备中的唯一标识</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t端口号：</span><br><span class=\"line\">\t\t由两个字节表示的整数，取值范围：0~65535</span><br><span class=\"line\">\t\t其中0~1023之间的端口号用于一些知名的网络服务或者应用</span><br><span class=\"line\">\t\t我们自己使用1024以上的端口号就可以了</span><br><span class=\"line\">\t注意：</span><br><span class=\"line\">\t\t一个端口号只能被一个应用程序使用</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">协议：</span><br><span class=\"line\">\t计算机网络中，连接和通信的规则被称为网络通信协议</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tUDP协议：</span><br><span class=\"line\">\t\t用户数据报协议</span><br><span class=\"line\">\t\tUDP是  面向无连接  通信协议</span><br><span class=\"line\">\t\t速度快，有大小限制一次最多发送64K，数据不安全，易丢失</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\tUDP的三种通信方式</span><br><span class=\"line\">\t\t1.单播：</span><br><span class=\"line\">\t\t\t以前的代码就是单播</span><br><span class=\"line\">\t\t2.组播：</span><br><span class=\"line\">\t\t\t组播地址：224.0.0.0 ~ 239.255.255.255</span><br><span class=\"line\">\t\t\t\t\t其中224.0.0.0 ~ 224.0.0.255为预留的组播地址</span><br><span class=\"line\">\t\t3.广播：</span><br><span class=\"line\">\t\t\t广播地址：255.255.255.255</span><br><span class=\"line\">\tTCP协议：</span><br><span class=\"line\">\t\t传输控制协议TCP</span><br><span class=\"line\">\t\tTCP协议是  面向连接  的通信协议</span><br><span class=\"line\">\t\t速度慢，没有大小限制，数据安全</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">客户端：</span><br><span class=\"line\">\t1.创建客户端的Socket对象与指定服务端连接</span><br><span class=\"line\">\tSocket(String host,int port)</span><br><span class=\"line\">\t2.获取输出流，写数据</span><br><span class=\"line\">\tOutputStream  getOutputStream()</span><br><span class=\"line\">\t3.释放资源</span><br><span class=\"line\">\tvoid close()</span><br><span class=\"line\">\t</span><br><span class=\"line\">服务器：</span><br><span class=\"line\">\t1.创建服务器端的Socket对象</span><br><span class=\"line\">\tServerSocket(int port)</span><br><span class=\"line\">\t2.监听客户端连接，返回一个Socket对象</span><br><span class=\"line\">\tSocket accept()</span><br><span class=\"line\">\t3.获取输入流，读数据，并把数据显示在控制台</span><br><span class=\"line\">\tInputStream   getInputStream()</span><br><span class=\"line\">\t4.释放资源</span><br><span class=\"line\">\tvoid close()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"TCP通信程序（三次握手）\"><a href=\"#TCP通信程序（三次握手）\" class=\"headerlink\" title=\"TCP通信程序（三次握手）\"></a>TCP通信程序（三次握手）</h4><p><img src=\"/posts/737a1d74/Users\\Mr.Q\\Pictures\\java\\Snipaste_2023-03-30_09-20-17.png\" alt=\"Snipaste_2023-03-30_09-20-17\"></p>\n<h4 id=\"TCP通信程序（四次挥手）\"><a href=\"#TCP通信程序（四次挥手）\" class=\"headerlink\" title=\"TCP通信程序（四次挥手）\"></a>TCP通信程序（四次挥手）</h4><p><img src=\"/posts/737a1d74/Users\\Mr.Q\\Pictures\\java\\Snipaste_2023-03-30_09-23-49.png\" alt=\"Snipaste_2023-03-30_09-23-49\"></p>\n<h3 id=\"IO流\"><a href=\"#IO流\" class=\"headerlink\" title=\"IO流\"></a>IO流</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">什么是IO流</span><br><span class=\"line\">\t存储和读取数据的解决方啊</span><br><span class=\"line\">\tI:intput\tO:output</span><br><span class=\"line\">\t流：像水流一样传输数据</span><br><span class=\"line\"></span><br><span class=\"line\">IO流的作用：</span><br><span class=\"line\">\t用于读写数据（本地文件，网络）</span><br><span class=\"line\">\t</span><br><span class=\"line\">IO流按照流向可以分类哪两种流</span><br><span class=\"line\">\t输出流： 程序  -&gt;  文件</span><br><span class=\"line\">\t输入流： 文件  -&gt;  程序</span><br><span class=\"line\">\t</span><br><span class=\"line\">IO流按照操作文件的类型可以分类哪两种流</span><br><span class=\"line\">\t字节流：可以操作所有类型的文件</span><br><span class=\"line\">\t字符流：只能操作纯文本文件</span><br><span class=\"line\">\t</span><br><span class=\"line\">什么是纯文本文件</span><br><span class=\"line\">\t用Windows系统自带的记事本打开并且能够读懂的文件</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"File\"><a href=\"#File\" class=\"headerlink\" title=\"File\"></a>File</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File表示什么：</span><br><span class=\"line\">    File对象表示路径，可以是文件，也可以是文件夹。</span><br><span class=\"line\">    这个路径可以是存在的，也可以是不存在的</span><br><span class=\"line\">    </span><br><span class=\"line\">绝对路径和相对路径是什么意思：</span><br><span class=\"line\">    绝对路径是带盘符的</span><br><span class=\"line\">    相对路径是不带盘符的，默认到当前项目下去找</span><br><span class=\"line\"></span><br><span class=\"line\">File三种构造方法：    </span><br><span class=\"line\">\t<span class=\"comment\">// 根据文件路径创建文件对象</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">File</span><span class=\"params\">(String pathname)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"comment\">// 根据父路径名字符串和子路径名字符串创建文件对象</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"keyword\">public</span> <span class=\"title\">File</span><span class=\"params\">(String parent, String chile)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"comment\">// 根据父路径对应文件对象和子路径名字符串创建文件对象</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"keyword\">public</span> <span class=\"title\">File</span><span class=\"params\">(File parent,String chile)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"File常见的成员方法\"><a href=\"#File常见的成员方法\" class=\"headerlink\" title=\"File常见的成员方法\"></a>File常见的成员方法</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 判断此路径名表示的File是否为文件夹</span><br><span class=\"line\">boolean isDirectory()</span><br><span class=\"line\"></span><br><span class=\"line\">// 判断此路径名表示的File是否为文件</span><br><span class=\"line\">boolean isFile()</span><br><span class=\"line\"></span><br><span class=\"line\">// 判断此路径名表示的File是否为存在</span><br><span class=\"line\">boolean exists()</span><br><span class=\"line\"></span><br><span class=\"line\">// 返回文件的大小(字节数量)</span><br><span class=\"line\">long length()</span><br><span class=\"line\"></span><br><span class=\"line\">// 返回文件的绝对路径</span><br><span class=\"line\">String getAbsolutePath()</span><br><span class=\"line\"></span><br><span class=\"line\">// 返回定义文件时使用的路径</span><br><span class=\"line\">String getPath()</span><br><span class=\"line\"></span><br><span class=\"line\">// 返回文件的名称，带后缀</span><br><span class=\"line\">String getName()</span><br><span class=\"line\"></span><br><span class=\"line\">// 返回文件的最后修改时间(时间毫秒值)</span><br><span class=\"line\">Long lastModified()</span><br><span class=\"line\"></span><br><span class=\"line\">=================(创建、删除)==============</span><br><span class=\"line\">// 创建一个新的空的文件</span><br><span class=\"line\">boolean createNewFile()</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建单级文件夹</span><br><span class=\"line\">boolean mkdir()</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建多级文件夹</span><br><span class=\"line\">boolean mkdirs()</span><br><span class=\"line\"></span><br><span class=\"line\">// 删除文件、空文件见！！！注意删除的时候不走回收站</span><br><span class=\"line\">boolean delete()</span><br><span class=\"line\"></span><br><span class=\"line\">=================获取并遍历===============</span><br><span class=\"line\">// 获取当前该路径下所有内容</span><br><span class=\"line\">File[] listFiles()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"FileOutPutStream书写细节（字节流）\"><a href=\"#FileOutPutStream书写细节（字节流）\" class=\"headerlink\" title=\"FileOutPutStream书写细节（字节流）\"></a>FileOutPutStream书写细节（字节流）</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字节输出流的细节：</span><br><span class=\"line\">  \t1.创建字节输出流对象</span><br><span class=\"line\">        细节1：参数是字符串表示的路径或者是File对象都是可以的</span><br><span class=\"line\">        细节2：如果文件不存在会创建一个新的文件，但是要保证父级路径是存在的</span><br><span class=\"line\">        细节3: 如果文件中存在数据，则会清空数据</span><br><span class=\"line\">        </span><br><span class=\"line\">     2.写出数据：</span><br><span class=\"line\">        细节1：write输入的是整数，但是保存在本地的是ASCII的对应字符</span><br><span class=\"line\">        </span><br><span class=\"line\">     3.释放资源：</span><br><span class=\"line\">        每次使用完流之后都要释放资源</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">FileOutPutStream写数据的3中方式</span><br><span class=\"line\"></span><br><span class=\"line\">//一次写一个数据</span><br><span class=\"line\">void write(int b)</span><br><span class=\"line\"></span><br><span class=\"line\">//一次写一个字节数组数据</span><br><span class=\"line\">void write(byte[] b)</span><br><span class=\"line\"></span><br><span class=\"line\">//一次写一个字节数组的部分数据</span><br><span class=\"line\">void write(byte[] b,int off,int len)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"FileInPutStream书写细节（字节流）\"><a href=\"#FileInPutStream书写细节（字节流）\" class=\"headerlink\" title=\"FileInPutStream书写细节（字节流）\"></a>FileInPutStream书写细节（字节流）</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.创建字节输入流对象：</span><br><span class=\"line\">\t细节1：如果文件不存在，就直接报错</span><br><span class=\"line\">\t</span><br><span class=\"line\">2.读取数据：</span><br><span class=\"line\">\t细节1：一次读一个字节，读出来的数据是ASCII上对应的数字</span><br><span class=\"line\">\t细节2：读到文件末尾了，read方法返回-1</span><br><span class=\"line\"></span><br><span class=\"line\">3.释放资源：</span><br><span class=\"line\">\t细节：每次使用完流必须要释放资源</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"FileReader（字符流）\"><a href=\"#FileReader（字符流）\" class=\"headerlink\" title=\"FileReader（字符流）\"></a>FileReader（字符流）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第一步：创建对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FileReader</span><span class=\"params\">(File file)</span>        创建字符输入流关联本地文件</span></span><br><span class=\"line\"><span class=\"function\"> <span class=\"keyword\">public</span> <span class=\"title\">FileReader</span><span class=\"params\">(String pathname)</span>  创建字符输入流关联本地文件</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">//第二步：读取数据</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span>                   读取数据，读到末尾返回-1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">char</span>[] buffer)</span>      读取多个数据，读到末尾返回-1</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">//第三步：释放资源</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span>                 释放资源/关流</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"字符流原理解析\"><a href=\"#字符流原理解析\" class=\"headerlink\" title=\"字符流原理解析\"></a>字符流原理解析</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.创建字符输入流对象</span><br><span class=\"line\">\t底层：关联文件，并创建缓冲区（长度为8192的字节数组）</span><br><span class=\"line\"></span><br><span class=\"line\">2.读取数据</span><br><span class=\"line\">\t底层：</span><br><span class=\"line\">\t\t1.判断缓冲区中是否有数据可以读取</span><br><span class=\"line\">\t\t2.缓冲区没有数据：</span><br><span class=\"line\">\t\t\t\t就从文件中获取，撞到缓冲区中，每次尽可能装满缓冲区 如果文件中也没有数据了，返回-1</span><br><span class=\"line\">\t\t3.缓冲区有数据：</span><br><span class=\"line\">\t\t\t\t就从缓冲区读取</span><br><span class=\"line\">\t\t\t空参的read方法：</span><br><span class=\"line\">\t\t\t\t一次读取一个字节，遇到中文一次读多个字节，把字节解码并转换成十进制返回</span><br><span class=\"line\">\t\t\t有参的read方法：</span><br><span class=\"line\">\t\t\t\t把读取字节，解码，强转三步合并了，强转之后的字符放到数组中</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"缓冲流\"><a href=\"#缓冲流\" class=\"headerlink\" title=\"缓冲流\"></a>缓冲流</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.缓冲流有几种</span><br><span class=\"line\">\t字节缓冲输入流：BufferedInputStream()</span><br><span class=\"line\">\t字节缓冲输出流：BufferedOutputStream()</span><br><span class=\"line\">\t字符缓冲输入流：BufferedReader()</span><br><span class=\"line\">\t字节缓冲输出流：BufferedWriter()</span><br><span class=\"line\"></span><br><span class=\"line\">2.缓冲流为什么能提高性能</span><br><span class=\"line\">\t缓冲流自带长度为8192的缓冲区</span><br><span class=\"line\">\t可以显著提高字节流的读写性能</span><br><span class=\"line\">\t对于字符流提升不明显，有两种特有的方法</span><br><span class=\"line\"></span><br><span class=\"line\">3.字符缓冲流有两个特有的方法</span><br><span class=\"line\">\t字符缓冲输入流 BufferedReader: readLine()</span><br><span class=\"line\">\t字符缓冲输出流 BufferedWriter: newLine()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"转换流\"><a href=\"#转换流\" class=\"headerlink\" title=\"转换流\"></a>转换流</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">转换流的名字：</span><br><span class=\"line\">\t字符转换输入流：InputStreamReader</span><br><span class=\"line\">\t字符转换输出流：OutputStreamWriter</span><br><span class=\"line\">转换流的作用是什么：</span><br><span class=\"line\">\t指定字符集读写数据</span><br><span class=\"line\">\t字节流想要使用字符流中的方法</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"序列化流-x2F-对象操作输出流\"><a href=\"#序列化流-x2F-对象操作输出流\" class=\"headerlink\" title=\"序列化流&#x2F;对象操作输出流\"></a>序列化流&#x2F;对象操作输出流</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以把Java中的对象写到本地文件中</span><br><span class=\"line\"></span><br><span class=\"line\">构造方法</span><br><span class=\"line\">// 把基本流包装成高级流</span><br><span class=\"line\">public ObjectOutputStream(OutputStream out)</span><br><span class=\"line\"></span><br><span class=\"line\">成员方法</span><br><span class=\"line\">// 把对象序列化(写出)到文件中去</span><br><span class=\"line\">public final void wtiterObject(Object obj)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">序列化小细节：</span><br><span class=\"line\">\t使用对象输出流将对象保存到文件时会出现问题</span><br><span class=\"line\"></span><br><span class=\"line\">解决方案：</span><br><span class=\"line\">\t需要让JavaBean类实现Serializable接口</span><br><span class=\"line\">\t</span><br><span class=\"line\">如果一个对象的某个成员变量的值不想被序列化</span><br><span class=\"line\">\t给该成员变量加上transient关键字修饰</span><br><span class=\"line\">\t该关键字标记的成员变量不参与序列化过程</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"打印流\"><a href=\"#打印流\" class=\"headerlink\" title=\"打印流\"></a>打印流</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">分类：</span><br><span class=\"line\">\t一般是指PintStream，PrintWrite</span><br><span class=\"line\">特点1：</span><br><span class=\"line\">\t打印流只操作文件目的地，不操作数据源</span><br><span class=\"line\">特点2：</span><br><span class=\"line\">\t特有的写出方法可以实现，数据原样写出</span><br><span class=\"line\">特点3：</span><br><span class=\"line\">\t特有的写出方法，可以实现自动刷新，换行</span><br><span class=\"line\">\t</span><br><span class=\"line\">字节打印流：</span><br><span class=\"line\">\t构造方法</span><br><span class=\"line\">\t//关联字节输出流/文件/文件路径</span><br><span class=\"line\">\tpublic PrintStream(OutStream/File/String)</span><br><span class=\"line\">\t//指定字符编码</span><br><span class=\"line\">\tpublic PrintStream(String fileName, Charset charset)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t成员方法：</span><br><span class=\"line\">\t//规则和之前一样，将指定的字节写出</span><br><span class=\"line\">\tvoid write(int b)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t特有方法：</span><br><span class=\"line\">\t//打印任意数据，自动换行，自动刷新</span><br><span class=\"line\">\tprintln()</span><br><span class=\"line\">\t//打印任意数据，不换行</span><br><span class=\"line\">\tprint()</span><br><span class=\"line\">\t//带有占位符的打印语句，不换行</span><br><span class=\"line\">\tprintf(String format, Object... args)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"字符集\"><a href=\"#字符集\" class=\"headerlink\" title=\"字符集\"></a>字符集</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.在计算机中，任意数据都是以二进制的形式来存储的</span><br><span class=\"line\">2.计算机中最小的存储单元是一个字节</span><br><span class=\"line\">3.ASCII字符集中，一个英文占一个字节</span><br><span class=\"line\">4.简体中文版Windows，默认使用GBK字符集</span><br><span class=\"line\">5.GBK字符集完全兼容ASCII字符集</span><br><span class=\"line\">\t一个英文占一个字节，二进制第一位是0</span><br><span class=\"line\">\t一个中文占两个字节，二进制高位字节的第一位是1</span><br><span class=\"line\">\t</span><br><span class=\"line\">Unicode字符集的UTF-8下</span><br><span class=\"line\">\t一个英文占一个字节，二进制第一位是0</span><br><span class=\"line\">\t一个中文占3个字节，1110XXXX 10XXXXXX 10XXXXXX（首位是1）</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">异常：</span><br><span class=\"line\">\t就是代表程序出的错误</span><br><span class=\"line\"></span><br><span class=\"line\">误区：</span><br><span class=\"line\">\t不是让我们以后不出异常，而是程序出了异常之后，该如何处理</span><br><span class=\"line\">\t</span><br><span class=\"line\">异常体系的最上层父类是谁？异常分为几类？</span><br><span class=\"line\">\t父类：Exception</span><br><span class=\"line\">\t异常分为两类：编译时异常、运行时异常</span><br><span class=\"line\"></span><br><span class=\"line\">编译时异常和运行时异常的区别</span><br><span class=\"line\">\t编译时异常：</span><br><span class=\"line\">\t\t没有继承RuntimeException的异常，直接继承于Exception</span><br><span class=\"line\">\t\t编译阶段就会错误提示</span><br><span class=\"line\">\t运行时异常：</span><br><span class=\"line\">\t\tRuntimeException本身和子类</span><br><span class=\"line\">\t\t编译阶段没有错误提示，运行时出现的</span><br><span class=\"line\">\t</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/posts/737a1d74/Users\\Mr.Q\\Pictures\\java\\Snipaste_2023-03-22_17-41-33.png\" alt=\"Snipaste_2023-03-22_17-41-33\"></p>\n<h4 id=\"捕获异常\"><a href=\"#捕获异常\" class=\"headerlink\" title=\"捕获异常\"></a>捕获异常</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式：</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        可能出现异常的代码;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(异常类名 变量名) &#123;</span><br><span class=\"line\">        异常的处理代码;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">目的：</span><br><span class=\"line\">    当代码出现异常时，可以让程序继续往下执行</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/posts/737a1d74/Users\\Mr.Q\\Pictures\\java\\Snipaste_2023-03-22_18-23-55.png\" alt=\"Snipaste_2023-03-22_18-23-55\"></p>\n<h3 id=\"方法引用\"><a href=\"#方法引用\" class=\"headerlink\" title=\"方法引用\"></a>方法引用</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.什么是方法引用？</span><br><span class=\"line\">\t把已经存在的方法拿过来用，当作函数式接口中抽象方法的方法体</span><br><span class=\"line\">2.::是什么符号？</span><br><span class=\"line\">\t方法引用符</span><br><span class=\"line\">3.方法引用时需要注意什么？</span><br><span class=\"line\">\t需要有函数式接口</span><br><span class=\"line\">\t被引用方法必须已经存在</span><br><span class=\"line\">\t被引用方法的形参和返回值需要跟抽象方法保持一致</span><br><span class=\"line\">\t被引用方法的功能要满足当前的需求</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">=================================================================</span><br><span class=\"line\">1.引用静态方法</span><br><span class=\"line\">\t类名::静态方法</span><br><span class=\"line\">2.引用成员方法</span><br><span class=\"line\">\t对象::成员方法</span><br><span class=\"line\">\tthis::成员方法</span><br><span class=\"line\">\tsuper::成员方法</span><br><span class=\"line\">3.引用构造方法</span><br><span class=\"line\">\t类名::new</span><br><span class=\"line\">4.使用类名引用成员方法</span><br><span class=\"line\">\t类名::成员方法</span><br><span class=\"line\">5.引用数组的构造方法</span><br><span class=\"line\">\t数据类型[]::new</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Stream流\"><a href=\"#Stream流\" class=\"headerlink\" title=\"Stream流\"></a>Stream流</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream流的思想</span><br><span class=\"line\"></span><br><span class=\"line\">Stream流的作用：</span><br><span class=\"line\">\t结合了Lambda表达式，简化集合，数组的操作</span><br><span class=\"line\">\t</span><br><span class=\"line\">Stream流的使用步骤：</span><br><span class=\"line\">\t1.先得到一条Stream流（流水线），并把数据放上去</span><br><span class=\"line\">\t2.利用Stream流中的API进行各种操作</span><br><span class=\"line\">\t过滤\t\t转换\t\t中间方法   方法调用完毕之后，还可以调用其他方法</span><br><span class=\"line\">\t统计\t\t打印\t\t终结方法   最后一步，调用完毕之后，不能调用其他方法</span><br><span class=\"line\">\t</span><br><span class=\"line\">使用流程：</span><br><span class=\"line\">获取方式\t\t方法名\t\t\t  \t\t\t\t\t说明</span><br><span class=\"line\">单列集合\tdefault Stream&lt;E&gt; stream()\t\tCollection中的默认方法</span><br><span class=\"line\">双列集合\t\t无\t\t\t\t\t\t\t无法直接使用Stream流</span><br><span class=\"line\">数组\t\tpublic static&lt;T&gt;Stream&lt;T&gt;stream(T[] Array)\tArray工具类</span><br><span class=\"line\">一堆零散的数据\t\t\tStream&lt;T&gt;of(T...values)\tStream接口的静态方法</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Stream流的中间方法\"><a href=\"#Stream流的中间方法\" class=\"headerlink\" title=\"Stream流的中间方法\"></a>Stream流的中间方法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">过滤</span><br><span class=\"line\">\tStream&lt;T&gt;filter(Predicate&lt;? super T&gt;predicate) </span><br><span class=\"line\">\t</span><br><span class=\"line\">获取前几个元素</span><br><span class=\"line\">\tStream&lt;T&gt;limit(long maxSize)</span><br><span class=\"line\">\t</span><br><span class=\"line\">跳过前几个元素</span><br><span class=\"line\">\tStream&lt;T&gt;skip(long n)</span><br><span class=\"line\">\t</span><br><span class=\"line\">元素去重，依赖（hashCode和equals方法）</span><br><span class=\"line\">\tStream&lt;T&gt;distinct()</span><br><span class=\"line\">\t</span><br><span class=\"line\">合并a和b两个流为一个流</span><br><span class=\"line\">\tstatic&lt;T&gt;Stream&lt;T&gt;concat(Stream a,Stream b)</span><br><span class=\"line\">\t</span><br><span class=\"line\">转换流中的数据类型</span><br><span class=\"line\">\tStream&lt;R&gt;map(Function&lt;T,R&gt; mapper)</span><br><span class=\"line\">\t</span><br><span class=\"line\">注意点：</span><br><span class=\"line\">\t1.中间方法，返回新的Stream流，原来的Stream流只能用一次，建议使用链式编程</span><br><span class=\"line\">\t2.修改Stream流中的数据，不会影响原来集合或者数组中的数据</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Stream流的终结方法\"><a href=\"#Stream流的终结方法\" class=\"headerlink\" title=\"Stream流的终结方法\"></a>Stream流的终结方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">遍历</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">forEach</span><span class=\"params\">(Consumer action)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">统计</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">count</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">收集流中的数据，放到数组中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">toArray</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">收集流中的数据，放到集合中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">collect</span><span class=\"params\">(Collector collector)</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"不可变集合\"><a href=\"#不可变集合\" class=\"headerlink\" title=\"不可变集合\"></a>不可变集合</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在List、Set、Map接口中，都存在静态的of方法，可以获取一个不可变的集合</span><br><span class=\"line\"></span><br><span class=\"line\">方法：</span><br><span class=\"line\">static &lt;E&gt; List&lt;E&gt; of(E...elements) 创建一个具有指定元素的List集合对象</span><br><span class=\"line\">static &lt;E&gt; Set&lt;E&gt; of(E...elements) 创建一个具有指定元素的Set集合对象</span><br><span class=\"line\">static &lt;E,V&gt; Map&lt;K,V&gt; of(E...elements) 创建一个具有指定元素的Map集合对象</span><br><span class=\"line\"></span><br><span class=\"line\">注意：</span><br><span class=\"line\">\t这个集合不能添加，不能删除，不能修改</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">不可变集合的特点：</span><br><span class=\"line\">\t定义完成后不可以修改，或者添加，删除</span><br><span class=\"line\">如何创建不可变集合：</span><br><span class=\"line\">\tList，Set，Map接口中，都存在of方法可以创建不可变集合</span><br><span class=\"line\">三种方式的细节：</span><br><span class=\"line\">\tList：</span><br><span class=\"line\">\t\t直接用</span><br><span class=\"line\">\tSet：</span><br><span class=\"line\">\t\t元素不能重复</span><br><span class=\"line\">\tMap：</span><br><span class=\"line\">\t\t元素不重复，键值对数量最多是10个</span><br><span class=\"line\">\t\t超过10个用ofEntries方法</span><br><span class=\"line\">\t\t（如果JDK超过10  可以用copyOf方法）</span><br><span class=\"line\">\t\tMap&lt;String, String&gt; map = Map.copyOf(hashMap);</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"Collections工具类\"><a href=\"#Collections工具类\" class=\"headerlink\" title=\"Collections工具类\"></a>Collections工具类</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">作用：</span><br><span class=\"line\">\tCollections不是集合，而是集合的工具类</span><br><span class=\"line\">\t</span><br><span class=\"line\">Collections常用的API</span><br><span class=\"line\"></span><br><span class=\"line\">方法名称</span><br><span class=\"line\">public static &lt;T&gt; boolean addAll(Collection&lt;T&gt; c,T...elements)</span><br><span class=\"line\">\t批量添加元素</span><br><span class=\"line\">public static void shuffke(List&lt;?&gt; list) </span><br><span class=\"line\">\t打乱list集合元素的顺序。</span><br><span class=\"line\">public static &lt;T&gt; void sort(List&lt;T&gt; List)</span><br><span class=\"line\">\t排序</span><br><span class=\"line\">public static &lt;T&gt; void sort(List&lt;T&gt; List,Comparator&lt;T&gt; c)</span><br><span class=\"line\">\t根据指定的规则进行排序</span><br><span class=\"line\">public static &lt;T&gt; int binarySearch(List&lt;T&gt;, T key)</span><br><span class=\"line\">\t以二分查找法查找元素</span><br><span class=\"line\">public static &lt;T&gt; void copy(List&lt;T&gt; dest,List&lt;T&gt; src)</span><br><span class=\"line\">\t拷贝集合中的元素</span><br><span class=\"line\">public static &lt;T&gt; int fill(List&lt;T&gt; list,T obj)</span><br><span class=\"line\">\t使用指定的元素填充集合</span><br><span class=\"line\">public static &lt;T&gt; void max/min(Collection&lt;T&gt; coll)</span><br><span class=\"line\">\t根据默认的自然排序获取最大/最小值</span><br><span class=\"line\">public static &lt;T&gt; void swap(List&lt;?&gt; list,int i,int j)</span><br><span class=\"line\">\t交换集合中指定位置的元素</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JDK5</span><br><span class=\"line\">可变参数</span><br><span class=\"line\">方法形参的个数时可以发生变化的0 1 2 3......</span><br><span class=\"line\"></span><br><span class=\"line\">作用：</span><br><span class=\"line\">\t在形参中接收多个数据</span><br><span class=\"line\"></span><br><span class=\"line\">格式：</span><br><span class=\"line\">\t数据类型...名字</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">底层：</span><br><span class=\"line\">\t可变参数底层就是一个数组</span><br><span class=\"line\">\t只不过不需要我们自己创建了，java会帮我们创建好</span><br><span class=\"line\">\t</span><br><span class=\"line\">public static int getSum(int...args)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">小细节：</span><br><span class=\"line\">\t在方法的形参中可变参数最多可以写一个</span><br><span class=\"line\">\t如果在方法中除了可变参数还有其他形参，那么可变参数要写在最后</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">泛型：</span><br><span class=\"line\">\t是JDK5中引入的特性，可以在编译阶段约束操作的数据类型，并进行检查</span><br><span class=\"line\">\t</span><br><span class=\"line\">泛型的格式：</span><br><span class=\"line\">\t&lt;数据类型&gt;</span><br><span class=\"line\">注意：</span><br><span class=\"line\">\t泛型只能支持引用数据类型</span><br><span class=\"line\">\t如果我们没有给集合指定类型，默认认为所有的数据类型都是Object类型，此时可以往集合添加任意的数据类型，带来一个坏处，我们在获取数据的时候，无法使用他的特有行为</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">扩展知识：</span><br><span class=\"line\">\tJava中的泛型是伪泛型</span><br><span class=\"line\">\t在Java文件中泛型存在，编译后泛型就不存在了</span><br><span class=\"line\">\t叫做泛型的擦除</span><br><span class=\"line\"></span><br><span class=\"line\">泛型的细节：</span><br><span class=\"line\">\t泛型中不能写基本数据类型</span><br><span class=\"line\">\t指定泛型的具体类型后，传递数据时，可以传入该类类型或者其子类类型</span><br><span class=\"line\">\t如果不写泛型，类型默认是Object</span><br><span class=\"line\">\t</span><br><span class=\"line\">泛型方法：</span><br><span class=\"line\">\t方法中形参类型不确定时</span><br><span class=\"line\">\t\t方案1：</span><br><span class=\"line\">\t\t\t使用类名后面定义的泛型\t\t本类中所有的方法都能用</span><br><span class=\"line\">\t\t方案2：</span><br><span class=\"line\">\t\t\t在方法申明上定义自己的泛型\t只有本方法可以用</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">泛型方法格式：</span><br><span class=\"line\">\t修饰符&lt;类型&gt;返回值类型 方法名(类型 变量名)&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t//K T V E</span><br><span class=\"line\">\tpublic &lt;T&gt; void show(T,t)&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">泛型接口：</span><br><span class=\"line\">\t格式：</span><br><span class=\"line\">\t\t修饰符 interface 接口名&lt;类型&gt;&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t举例：</span><br><span class=\"line\">\t\tpublic interface List&lt;E&gt;&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">重点：</span><br><span class=\"line\">\t如何使用一个带泛型的接口</span><br><span class=\"line\">\t</span><br><span class=\"line\">方式1：</span><br><span class=\"line\">\t实现类给出具体类型</span><br><span class=\"line\">方式2：</span><br><span class=\"line\">\t实现类延续泛型，创建对象时再确定</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Lanmbda表达式\"><a href=\"#Lanmbda表达式\" class=\"headerlink\" title=\"Lanmbda表达式\"></a>Lanmbda表达式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Lambda的省略规则</span><br><span class=\"line\">    <span class=\"number\">1.</span>参数类型可以省略不写</span><br><span class=\"line\">\t<span class=\"number\">2.</span>如果只有一个参数，参数类型可以省略，同时()也可以省略</span><br><span class=\"line\">\t<span class=\"number\">3.</span>如果Lambda表达式的方法体只有一行，大括号，分号，<span class=\"keyword\">return</span>可以省略不写，需要同时省略</span><br><span class=\"line\">    </span><br><span class=\"line\">lambda表达式的标准格式</span><br><span class=\"line\">\t() -&gt; &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">Lambda表达式的基本作用：</span><br><span class=\"line\">\tLambda表达式可以用来简化匿名内部类的书写</span><br><span class=\"line\">\tLambda表达式只能简化函数式接口的匿名内部类的书写</span><br><span class=\"line\"></span><br><span class=\"line\">Lambda表达式有什么使用前提：</span><br><span class=\"line\">    必须式接口的匿名内部类，接口中只能有一个抽象方法</span><br><span class=\"line\">    </span><br><span class=\"line\">Lambda的好处：</span><br><span class=\"line\">    Lambda是一个匿名函数，我们可以把Lambda表达式理解为是一段可以传递的代码，它可以写出更简洁，更灵活的代码，作为一种更紧凑的代码风格，使Java语言表达能力得到了提升</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"计算机存储规则\"><a href=\"#计算机存储规则\" class=\"headerlink\" title=\"计算机存储规则\"></a>计算机存储规则</h3><p><img src=\"/posts/737a1d74/Users\\Mr.Q\\Pictures\\java\\Snipaste_2023-03-04_14-40-29.png\" alt=\"Snipaste_2023-03-04_14-40-29\"></p>\n<h3 id=\"重新认识main方法\"><a href=\"#重新认识main方法\" class=\"headerlink\" title=\"重新认识main方法\"></a>重新认识main方法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public:</span><br><span class=\"line\">\t被jvm调用，访问权限足够大</span><br><span class=\"line\">static：</span><br><span class=\"line\">\t被jvm调用，不用创建对象，直接类名访问</span><br><span class=\"line\">\t因为main方法是静态的，所以测试类中其他方法也需要是静态的</span><br><span class=\"line\">void：</span><br><span class=\"line\">\t被jvm调用，不需要给返回值</span><br><span class=\"line\">main：</span><br><span class=\"line\">\t一个通用的名称，虽然不是关键字，但是被jvm识别</span><br><span class=\"line\">String[] args：</span><br><span class=\"line\">\t以前用于接收键盘录入数据的，现在没用</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"重写\"><a href=\"#重写\" class=\"headerlink\" title=\"重写\"></a>重写</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方法的重写</span><br><span class=\"line\">\t当父类的方法不能满足子类现在的需求时，需要进行方法的重写</span><br><span class=\"line\">书写格式</span><br><span class=\"line\">\t在继承体系中，子类出现了和父类一样的方法声明，我们就称为子类这个方法是重写的方法</span><br><span class=\"line\"></span><br><span class=\"line\">@Override重写注解</span><br><span class=\"line\">\t1.@Override是重写后的方法上，校验子类重写时语法是否正确</span><br><span class=\"line\">\t2.加上注解后如果有红色波浪线，表示语法错误</span><br><span class=\"line\">\t3.建议重写方法都加@Override注解，代码安全，优雅。</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override重写注解</span><br><span class=\"line\">\t1.@Override是重写后的方法上，校验子类重写时语法是否正确</span><br><span class=\"line\">\t2.加上注解后如果有红色波浪线，表示语法错误</span><br><span class=\"line\">\t3.建议重写方法都加@Override注解，代码安全，优雅。</span><br><span class=\"line\"></span><br><span class=\"line\">@FunctionalInterface函数式接口（Lambda表达式的时候使用）</span><br><span class=\"line\">\t有且仅有一个抽象方法的接口叫做函数式接口，接口上方可以加\t@FunctionalInterface注解判断</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"包\"><a href=\"#包\" class=\"headerlink\" title=\"包\"></a>包</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用其他类的规则</span><br><span class=\"line\">\t使用同一个包中的类时，不需要导包</span><br><span class=\"line\">\t使用java.lang包中的类时，不需要导包</span><br><span class=\"line\">\t其他情况都需要导包</span><br><span class=\"line\">\t如果同时使用两个包中的同名类，需要使用全类名</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">代码块的分类</span><br><span class=\"line\">\t局部代码块，构造代码块，静态代码块</span><br><span class=\"line\">\t</span><br><span class=\"line\">局部代码块</span><br><span class=\"line\">\t提前结束变量的生命周期（已经淘汰）</span><br><span class=\"line\">构造代码块</span><br><span class=\"line\">\t抽取构造方法中的重复代码（不够灵活）</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">静态代码块</span><br><span class=\"line\">\t数据的初始化 </span><br><span class=\"line\">\t\t<span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"抽象类（abstract）\"><a href=\"#抽象类（abstract）\" class=\"headerlink\" title=\"抽象类（abstract）\"></a>抽象类（abstract）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">抽象类的作用是什么</span><br><span class=\"line\">\t抽取共性时，无法确定方法体，就把方法定义为抽象的。</span><br><span class=\"line\">\t强制让子类按照某种格式重写</span><br><span class=\"line\">\t抽象方法所在的类，必须时抽象类</span><br><span class=\"line\"></span><br><span class=\"line\">抽象类和抽象方法的格式</span><br><span class=\"line\">\tpublic abstract 返回值类型 方法名(参数列表);</span><br><span class=\"line\">\tpublic abstract class 类名&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">继承抽象类有哪些要注意</span><br><span class=\"line\">\t要么重写抽象类中所有的方法</span><br><span class=\"line\">\t要么时抽象类</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">设计模式是一套被反复使用，多数人知晓的，经过分类编目的，代码设计经验的总结。使用设计模式是为了可重用代码，让代码更容易被他人理解，保证代码可靠性，程序的重用性</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"适配器设计模式\"><a href=\"#适配器设计模式\" class=\"headerlink\" title=\"适配器设计模式\"></a>适配器设计模式</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解决接口与接口实现类之间的矛盾问题</span><br><span class=\"line\">\t</span><br><span class=\"line\">当一个接口中抽象方法过多，但是我只要使用其中一部分的时候，就可以适配器设计模式</span><br><span class=\"line\">\t</span><br><span class=\"line\">书写步骤 </span><br><span class=\"line\">\t编写中间类XXXAdapter，实现对应的接口</span><br><span class=\"line\">\t对接口中的抽象方法进行空实现</span><br><span class=\"line\">\t让真正的实现类继承中间类，并重写需要用的方法</span><br><span class=\"line\">\t为了避免其他类创建适配器类的对象，中间的适配器类</span><br><span class=\"line\">\t用abstract进行修饰</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"内部类\"><a href=\"#内部类\" class=\"headerlink\" title=\"内部类\"></a>内部类</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类的五大成员：</span><br><span class=\"line\">\t属性，方法，构造方法，代码块，内部类</span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">内部类</span><br><span class=\"line\">\t表示的事物是外部类的一部分</span><br><span class=\"line\">\t内部类单独出现没有意义</span><br><span class=\"line\">\t</span><br><span class=\"line\">内部类的访问特点</span><br><span class=\"line\">\t内部类可以直接访问外部类的成员，包括私有</span><br><span class=\"line\">\t外部类要访问内部类的成员，必须创建对象</span><br><span class=\"line\">\t</span><br><span class=\"line\">成员内部类</span><br><span class=\"line\">\t写在成员位置，属于外部类的成员</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t获取成员内部类对象的两种方式</span><br><span class=\"line\">\t\t方式一：</span><br><span class=\"line\">\t\t\t当成员内部类被private修饰时</span><br><span class=\"line\">\t\t\t在外部类中编写方法，对外提供内部类的对象</span><br><span class=\"line\">\t\t方式二：</span><br><span class=\"line\">\t\t\t当成员内部类被非私有修饰时，直接创建对象</span><br><span class=\"line\">\t\t\tOuter.Inner oi = new Outter().new Inner();直接创建对象</span><br><span class=\"line\">\t外部类成员变量和内部类成员变量重名时，在内部类中如何访问</span><br><span class=\"line\">\t\tSystem.out.pringln(Outer.this.变量名);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">静态内部类</span><br><span class=\"line\"></span><br><span class=\"line\">局部内部类</span><br><span class=\"line\"></span><br><span class=\"line\">匿名内部类</span><br><span class=\"line\">\t什么是匿名内部类：</span><br><span class=\"line\">\t\t隐藏了名字的内部类，可以写在成员位置，也可以写在局部位置</span><br><span class=\"line\">\t匿名内部类的格式：</span><br><span class=\"line\">\t\tnew 类名或者接口名()&#123;</span><br><span class=\"line\">\t\t\t重写方法;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t格式的细节</span><br><span class=\"line\">\t\t包含了继承或实现，方法重写，创建对象。</span><br><span class=\"line\">\t\t整体就是一个类的子类对象或者接口的实现类对象</span><br><span class=\"line\">\t使用场景</span><br><span class=\"line\">\t\t当方法的参数是接口或者类时</span><br><span class=\"line\">\t\t以接口为例，可以传递这个接口的实现类对象，</span><br><span class=\"line\">\t\t如果实现类只使用一次，就可以用匿名内部类简化代码</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">事件源：</span><br><span class=\"line\">\t按钮 图片 窗体...</span><br><span class=\"line\">事件：某些操作</span><br><span class=\"line\">\t如：鼠标单击，鼠标划入...</span><br><span class=\"line\">绑定监听：</span><br><span class=\"line\">\t当事件源上发生了某个事件，则执行某段代码</span><br><span class=\"line\">\t</span><br><span class=\"line\">KeryListener</span><br><span class=\"line\">\t键盘监听</span><br><span class=\"line\">MouseListener</span><br><span class=\"line\">\t鼠标监听</span><br><span class=\"line\">\t\t\t划入动作</span><br><span class=\"line\">\t\t\t按下动作</span><br><span class=\"line\">\t\t\t松开动作</span><br><span class=\"line\">\t\t\thua&#x27;chu</span><br><span class=\"line\">ActionListener</span><br><span class=\"line\">\t动作监听</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h3><h4 id=\"BigInteger\"><a href=\"#BigInteger\" class=\"headerlink\" title=\"BigInteger\"></a>BigInteger</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigInteger构造方法\t\t注意：对象一旦创建，内部的值不能发生改变</span><br><span class=\"line\">\tpublic BigInteger(int num, Random rnd)\t\t获取随机大整数 范围：[0~2的num次方-1]</span><br><span class=\"line\">\tpublic BigInteger(String val)\t\t\t\t获取指定的大整数</span><br><span class=\"line\">\tpublic BigInteger(String val, int radix) \t获取指定进制的大整数</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static BigInteger valueOf(long val)\t静态方法获取BigInteger的对象，内部有优化</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tBigInteger构造方法小结</span><br><span class=\"line\">\t\t如果BigInteger表示的数字没有超出long的范围，可以用静态方法获取</span><br><span class=\"line\">\t\t如果BigInteger表示的超出long的范围，可以用构造方法获取</span><br><span class=\"line\">\t\t对象一旦创建，BigInteger内部记录的值不能发生改变</span><br><span class=\"line\">\t\t只要进行计算都会产生一个新的BigInteger对象</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">BigInteger成员方法</span><br><span class=\"line\">\tpublic BigInteger add(BigInteger val)\t\t\t\t\t加法</span><br><span class=\"line\">\tpublic BigInteger subtract(BigInteger val)\t\t\t\t减法</span><br><span class=\"line\">\tpublic BigInteger multiply(BigInteger val)\t\t\t\t乘法</span><br><span class=\"line\">\tpublic BigInteger divide(BigInteger val)\t\t\t\t除法，获取商</span><br><span class=\"line\">\tpublic BigInteger divideAndRemainder(BigInteger val)\t除法，获取商和余数</span><br><span class=\"line\">\tpublic BigInteger equals(Object x)\t\t\t\t\t\t比较是否相同</span><br><span class=\"line\">\tpublic BigInteger pow(int exponent)\t\t\t\t\t\t次幂</span><br><span class=\"line\">\tpublic BigInteger max/min(BigInteger val)\t\t\t\t返回较大值/较小值</span><br><span class=\"line\">\tpublic int intValue(BigInteger val)\t\t\t\t\t\t转为int类型整数，超出范围数据有误</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"包装类\"><a href=\"#包装类\" class=\"headerlink\" title=\"包装类\"></a>包装类</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8种包装类中除了Character都有对应的parseXxx的方法进行类型</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Integer\"><a href=\"#Integer\" class=\"headerlink\" title=\"Integer\"></a>Integer</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer的成员方法</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">ToBinaryString</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span>\t\t\t得到二进制</span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">ToOctalString</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span>\t\t\t得到八进制</span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">ToHexString</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span>\t\t\t\t得到十六进制</span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">parseInt</span><span class=\"params\">(String s)</span>\t\t\t\t将字符串类型的整数转成<span class=\"keyword\">int</span>类型的整数</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一轮：</span><br><span class=\"line\">\t把<span class=\"number\">0</span>索引的数字作为基准数，确定基准数在数组中正确的位置。</span><br><span class=\"line\">\t比基准数小的全部在左边，比基准数大的全部在右边。</span><br><span class=\"line\">\t代码：</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 定义两个变量记录要查找的范围</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> start = i;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> end = j;</span><br><span class=\"line\">        <span class=\"comment\">//递归的出口</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (start &gt; end)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 记录基准数的值</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> baseNumber = arr[i];</span><br><span class=\"line\">        <span class=\"comment\">// 利用循环找到要交换的数字   5   3  2  7  6</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (start != end) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 利用end，从后往前开始找，找比基准数小的数字</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (end &lt;= start || arr[end] &lt; baseNumber) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                end--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 利用start，从前往后找，找比基准数大的数字</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (start &gt;= end || arr[start] &gt; baseNumber) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                start++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 把end和start指向的元素进行交换</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp = arr[start];</span><br><span class=\"line\">            arr[start] = arr[end];</span><br><span class=\"line\">            arr[end] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 当start和end指向了同一个元素的时候，那么上面的循环就会结束</span></span><br><span class=\"line\">        <span class=\"comment\">// 表示已经找到了基准数在数组中应存的位置</span></span><br><span class=\"line\">        <span class=\"comment\">// 基准数归位</span></span><br><span class=\"line\">        <span class=\"comment\">//就是拿着这个范围中的第一个数字，跟start指向的元素进行交换</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = arr[start];</span><br><span class=\"line\">        arr[start] = baseNumber;</span><br><span class=\"line\">        arr[i] = temp;</span><br><span class=\"line\">        <span class=\"comment\">//确定6左边的范围，重复刚刚所做的事情</span></span><br><span class=\"line\">        quickSort(arr,i,start-<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//确定6右边的范围，重复刚刚所做的事情</span></span><br><span class=\"line\">        quickSort(arr,start+<span class=\"number\">1</span>,j);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t\t</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"工具类\"><a href=\"#工具类\" class=\"headerlink\" title=\"工具类\"></a>工具类</h2><h3 id=\"Arrays\"><a href=\"#Arrays\" class=\"headerlink\" title=\"Arrays\"></a>Arrays</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">操作数组的工具类：</span><br><span class=\"line\">public static String toString(数组)  把数组拼接成一个字符串</span><br><span class=\"line\">public static int binarySearch(数组,查找的元素)\t二分法查找元素</span><br><span class=\"line\">public static int[] copyOf(原数组, 新数组长度)\t拷贝数组</span><br><span class=\"line\">public static int[] copyOfRange(原数组,起始索引，结束索引)\t拷贝数组（指定范围）</span><br><span class=\"line\">public static void fill(数组,元素)\t填充数组</span><br><span class=\"line\">public static void sort(数组)\t按照默认方式进行数组排序</span><br><span class=\"line\">public static void sort(数组,排序规则)\t按照指定的规则排序</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据结构（红黑树）\"><a href=\"#数据结构（红黑树）\" class=\"headerlink\" title=\"数据结构（红黑树）\"></a>数据结构（红黑树）</h3><p><img src=\"/posts/737a1d74/Users\\Mr.Q\\Pictures\\java\\Snipaste_2023-03-20_08-42-16.png\" alt=\"Snipaste_2023-03-20_08-42-16\"></p>\n","more":"<h1 id=\"面向对象编程\"><a href=\"#面向对象编程\" class=\"headerlink\" title=\"面向对象编程\"></a>面向对象编程</h1><h2 id=\"定义类的补充注意事项\"><a href=\"#定义类的补充注意事项\" class=\"headerlink\" title=\"定义类的补充注意事项\"></a>定义类的补充注意事项</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javabean类：</span><br><span class=\"line\">\t用来描述一类事物的类，在javabean类中，是不写main方法的</span><br><span class=\"line\">标准的javabean类：</span><br><span class=\"line\">\t类名需要见名知意</span><br><span class=\"line\">\t成员变量需要用<span class=\"keyword\">private</span>修饰</span><br><span class=\"line\">\t提供至少两个构造方法</span><br><span class=\"line\">\t\t无参构造</span><br><span class=\"line\">\t\t带全部参数的构造方法</span><br><span class=\"line\">\t成员方法</span><br><span class=\"line\">\t\t提供每一个成员变量对应的setXxx()和getXxx()</span><br><span class=\"line\">\t\t如果还有其他行为，也需要写上</span><br><span class=\"line\"></span><br><span class=\"line\">测试类：</span><br><span class=\"line\">\t在以前编写main方法的类，我们可以在测试类中创建javabean类的对象进行赋值调用</span><br><span class=\"line\"></span><br><span class=\"line\">\t成员变量的完整定义格式：修饰符 数据类型 变量名称 = 初始化值，一般无需定义初始化值，存在默认值</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"面向对象三大特征（封装-继承-多态）\"><a href=\"#面向对象三大特征（封装-继承-多态）\" class=\"headerlink\" title=\"面向对象三大特征（封装   继承    多态）\"></a>面向对象三大特征（封装   继承    多态）</h2><h3 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">告诉我们如何正确的设计对象的属性和方法</span><br><span class=\"line\">对象代表什么，就得封装对应的数据，并提供数据对应的行为</span><br><span class=\"line\">\t例如：</span><br><span class=\"line\">\t\t需求：人画圆，请针对这个需求进行面向对象的设计</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java中提供一个关键字extends，用这个关键字，我们可以让一个类和另一个类建立起继承关系。（java只支持单继承，不支持多继承，但是支持多层继承）</span><br><span class=\"line\">    每一个类都直接或间接的继承<span class=\"function\">Object</span></span><br><span class=\"line\"><span class=\"function\">   </span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"keyword\">public</span> class Student extends <span class=\"title\">Person</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">Student称为子类，Person称为父类</span><br><span class=\"line\">    </span><br><span class=\"line\">使用继承的好处</span><br><span class=\"line\">    可以把多个子类重复的代码抽取到父类中，提高了代码的复用性</span><br><span class=\"line\">    子类可以在父类的基础上，增加其他的共能，是子类更强大。</span><br><span class=\"line\">    </span><br><span class=\"line\">什么时候用继承</span><br><span class=\"line\">    当类与类之间，存在相同（共性）的内容，并满足子类是父类中的一种，就可以考虑使用继承，来优化代码。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">什么是多态？</span><br><span class=\"line\">\t同类型的对象，表现出的不同的形态。</span><br><span class=\"line\"></span><br><span class=\"line\">多态的表现形式</span><br><span class=\"line\">\t父类类型 对象名称 = 子类对象;</span><br><span class=\"line\"></span><br><span class=\"line\">多态的前提</span><br><span class=\"line\">\t有继承/实现（接口）关系</span><br><span class=\"line\">\t有父类引用指向子类对象</span><br><span class=\"line\">\t有方法重写</span><br><span class=\"line\">\t</span><br><span class=\"line\">多态的好处</span><br><span class=\"line\">\t使用父类型作为参数，可以接收所有的子类对象，体现多态的扩展与便利 </span><br><span class=\"line\">\t在多态形式下，右边对象可以实现解耦合，便于扩展和维护</span><br><span class=\"line\">\t</span><br><span class=\"line\">多态的弊端</span><br><span class=\"line\">\t不能使用子类独有的方法</span><br><span class=\"line\">解决方法</span><br><span class=\"line\">\t转换成真正的子类类型，从而调用子类独有的功能</span><br><span class=\"line\">\t转换类型与真实对象类型不一致会报错</span><br><span class=\"line\">\t转换时用instanceof关键字进行判断</span><br><span class=\"line\">\t</span><br><span class=\"line\">调用成员变量的特点：</span><br><span class=\"line\">\t编译看左边，运行也看左边</span><br><span class=\"line\">调用成员方法的特点：</span><br><span class=\"line\">\t编译看左边，运行看右边</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"关键字还有修饰符\"><a href=\"#关键字还有修饰符\" class=\"headerlink\" title=\"关键字还有修饰符\"></a>关键字还有修饰符</h2><h3 id=\"private-lt-空着不写-lt-protected-lt-public\"><a href=\"#private-lt-空着不写-lt-protected-lt-public\" class=\"headerlink\" title=\"private &lt; 空着不写 &lt; protected &lt; public\"></a>private &lt; 空着不写 &lt; protected &lt; public</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span>关键字：</span><br><span class=\"line\">\t是一个权限修饰符</span><br><span class=\"line\">\t可以修饰成员（成员变量和成员方法）</span><br><span class=\"line\">\t被  <span class=\"keyword\">private</span>  修饰的成员只能在本类中才能访问</span><br><span class=\"line\">\t针对<span class=\"keyword\">private</span>   修饰的成员变量，如果要被其他类使用，应该提供相应的操作</span><br><span class=\"line\">\t\t提供“setXxx(参数)”方法，用于给成员变量赋值，方法用<span class=\"keyword\">public</span>修饰</span><br><span class=\"line\">\t\t提供<span class=\"string\">&quot;getXxx()&quot;</span>方法，用于获取成员变量的值，方法用<span class=\"keyword\">public</span>修饰</span><br><span class=\"line\"></span><br><span class=\"line\">实际开发中，一般只用<span class=\"keyword\">private</span>和<span class=\"keyword\">public</span></span><br><span class=\"line\">    成员变量私有</span><br><span class=\"line\">    方法公开</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>关键字   （表示当前方法调用者的地址值）</span><br><span class=\"line\">\t可以区分成员变量(在类中不在方法中的变量)和局部变量(方法中的变量就叫局部变量)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"this和super使用总结\"><a href=\"#this和super使用总结\" class=\"headerlink\" title=\"this和super使用总结\"></a>this和super使用总结</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">表示当前方法调用者的地址值</span><br><span class=\"line\">这个this是由虚拟机赋值的 </span><br><span class=\"line\"></span><br><span class=\"line\">this</span><br><span class=\"line\">\t理解为一个变量，表示当前方法调用者的地址</span><br><span class=\"line\">super</span><br><span class=\"line\">\t代表父类存储空间</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static表示静态，是java中的一个修饰符，可以修饰成员方法和成员变量</span><br><span class=\"line\"></span><br><span class=\"line\">被static修饰的成员变量  静态变量</span><br><span class=\"line\">\t特点：</span><br><span class=\"line\">\t\t被该类所有的对象共享</span><br><span class=\"line\">\t\t不属于对象，属于类</span><br><span class=\"line\">\t\t随着类的加载而加载，优先于对象存在</span><br><span class=\"line\">\t调用方式：</span><br><span class=\"line\">\t\t类名调用和对象名调用</span><br><span class=\"line\"></span><br><span class=\"line\">被static修饰的成员方法  静态方法</span><br><span class=\"line\">\t特点：</span><br><span class=\"line\">\t\t多用在测试类和工具类中</span><br><span class=\"line\">\t\tjavabean类中很少会用</span><br><span class=\"line\">\t调用方式：a</span><br><span class=\"line\">\t\t类名调用和对象名调用</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"static注意事项\"><a href=\"#static注意事项\" class=\"headerlink\" title=\"static注意事项\"></a>static注意事项</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">静态方法中，只能访问静态</span><br><span class=\"line\">非静态方法可以访问所有</span><br><span class=\"line\">静态方法中没有this关键字</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"final\"><a href=\"#final\" class=\"headerlink\" title=\"final\"></a>final</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可修饰  方法  类   变量</span><br><span class=\"line\">一旦用final修饰</span><br><span class=\"line\">\t方法</span><br><span class=\"line\">\t\t该方法是最终方法，不能被重写</span><br><span class=\"line\">\t类</span><br><span class=\"line\">\t\t该类值最终类，不能被继承</span><br><span class=\"line\">\t变量</span><br><span class=\"line\">\t\t叫做常量，只能被赋值一次</span><br><span class=\"line\">\t\tfinal修改基本数据类型，记录的值不能发生改变</span><br><span class=\"line\">\t\tfinal修改引用数据类型，记录的地址值不能发生改变，内部的属性值还是可以改变的</span><br><span class=\"line\">\t\t</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">instanceof   </span><br><span class=\"line\">\t用来判断对象和类型是否一致     对象   instanceof   类型</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"构造方法（构造器，构造函数）\"><a href=\"#构造方法（构造器，构造函数）\" class=\"headerlink\" title=\"构造方法（构造器，构造函数）\"></a>构造方法（构造器，构造函数）</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">作用：</span><br><span class=\"line\">\t在创建对象时，虚拟机（jvm）会自动调用构造方法，作用是给成员变量进行赋值的</span><br><span class=\"line\">\t\t例如：</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span>&#123;</span><br><span class=\"line\">\t\t\t\t修饰符     方法名与类名相同  (参数)&#123;</span><br><span class=\"line\">\t\t\t\t\t方法体;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">特点：</span><br><span class=\"line\">\t方法名与类名相同大小写也要一致</span><br><span class=\"line\">\t没有返回值类型，没有<span class=\"keyword\">void</span></span><br><span class=\"line\">\t没有具体的返回值(不能由<span class=\"keyword\">return</span>返回具体的数据)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">注意事项：</span><br><span class=\"line\">\t构造方法的定义：</span><br><span class=\"line\">\t\t如果没有定义构造方法，系统将会给出一个默认的无参构造</span><br><span class=\"line\">\t\t\t无参构造：</span><br><span class=\"line\">\t\t\t\t在初始化对象的时候，成员变量的数据均采用默认值</span><br><span class=\"line\">\t\t如果自己给出了构造方法，系统将不会提供默认的构造方法</span><br><span class=\"line\">\t\t\t有参构造：</span><br><span class=\"line\">\t\t\t\t在初始化对象的时候，同时可以给成员变量进行赋值</span><br><span class=\"line\">\t构造方法的重载：</span><br><span class=\"line\">\t\t带参构造方法，和无参构造方法，两者方法名相同，但是参数不同，这就叫做构造方法的重载</span><br><span class=\"line\">\t推荐使用方式：</span><br><span class=\"line\">\t\t无论是否使用，都手动书写无参构造方法，和带全部参数的构造方法</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"一个对象的内存图\"><a href=\"#一个对象的内存图\" class=\"headerlink\" title=\"一个对象的内存图\"></a>一个对象的内存图</h2><p><img src=\"/posts/737a1d74/Snipaste_2023-02-19_15-50-31.png\"></p>\n<h2 id=\"x3D-x3D-号到底比的是什么？\"><a href=\"#x3D-x3D-号到底比的是什么？\" class=\"headerlink\" title=\"&#x3D;&#x3D;号到底比的是什么？\"></a>&#x3D;&#x3D;号到底比的是什么？</h2><p><img src=\"/posts/737a1d74/Users\\Mr.Q\\Pictures\\java\\Snipaste_2023-02-28_20-54-06.png\"></p>\n<h1 id=\"String概述\"><a href=\"#String概述\" class=\"headerlink\" title=\"String概述\"></a>String概述</h1><h2 id=\"创建String对象的两种方式\"><a href=\"#创建String对象的两种方式\" class=\"headerlink\" title=\"创建String对象的两种方式\"></a>创建String对象的两种方式</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>。直接赋值</span><br><span class=\"line\">\tString name = <span class=\"string\">&quot;Mq&quot;</span>;</span><br><span class=\"line\"><span class=\"number\">2.</span><span class=\"function\">new</span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">()</span>  <span class=\"comment\">//空参构造</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">(<span class=\"keyword\">char</span>[] chs)</span>  <span class=\"comment\">//根据字符数组，创建字符串对象</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"keyword\">public</span> <span class=\"title\">String</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] chs)</span>  <span class=\"comment\">//根据字节数字，创建字符串对象</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第二种创建方式\"><a href=\"#第二种创建方式\" class=\"headerlink\" title=\"第二种创建方式\"></a>第二种创建方式</h3><p><img src=\"/posts/737a1d74/Users\\Mr.Q\\Pictures\\java\\Snipaste_2023-02-28_20-43-55.png\"></p>\n<h2 id=\"String的一些方法\"><a href=\"#String的一些方法\" class=\"headerlink\" title=\"String的一些方法\"></a>String的一些方法</h2><h3 id=\"字符串比较\"><a href=\"#字符串比较\" class=\"headerlink\" title=\"字符串比较\"></a>字符串比较</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">boolean</span> equals方法(要比较的字符串)   完全一样结果才是<span class=\"keyword\">true</span>，否则就是<span class=\"function\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">equalslgnoreCase</span><span class=\"params\">(要比较的字符串)</span>  忽略大小写比较   <span class=\"comment\">//一般都是字符串</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">//比较两个字符串字母的大小</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">compareTo</span><span class=\"params\">(String str)</span></span></span><br><span class=\"line\"><span class=\"function\">    String s1 </span>= <span class=\"string\">&quot;a&quot;</span>;</span><br><span class=\"line\">\tString s2 = <span class=\"string\">&quot;b&quot;</span>;</span><br><span class=\"line\">\ts1.compareTo(s2);\t<span class=\"comment\">//会返回-1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"遍历字符串\"><a href=\"#遍历字符串\" class=\"headerlink\" title=\"遍历字符串\"></a>遍历字符串</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">char</span> <span class=\"title\">charAt</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span>: 根据索引返回字符</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">length</span><span class=\"params\">()</span>: 返回此字符串的长度</span></span><br><span class=\"line\"><span class=\"function\">数组的长度： 数组名.length</span></span><br><span class=\"line\"><span class=\"function\">字符串的长度： 字符串对象.<span class=\"title\">length</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">字符串的长度是方法    数组的长度是属性</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"截取字符串\"><a href=\"#截取字符串\" class=\"headerlink\" title=\"截取字符串\"></a>截取字符串</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">String <span class=\"title\">substring</span><span class=\"params\">(<span class=\"keyword\">int</span> beginIndex,<span class=\"keyword\">int</span> endIndex)</span>  注意：包头不包尾，包左不包右</span></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">substring</span><span class=\"params\">(<span class=\"keyword\">int</span> beginIndex)</span>  截取到末尾 </span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"替换字符串\"><a href=\"#替换字符串\" class=\"headerlink\" title=\"替换字符串\"></a>替换字符串</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">String <span class=\"title\">replace</span><span class=\"params\">(旧值,新值)</span>  <span class=\"comment\">//注意：只有返回值才是替换之后的结果</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串原理\"><a href=\"#字符串原理\" class=\"headerlink\" title=\"字符串原理\"></a>字符串原理</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字符串存储的内存原理</span><br><span class=\"line\">\t直接赋值会复用字符常量池中的</span><br><span class=\"line\">\t<span class=\"keyword\">new</span>出来的不会复用，而是开辟一个新的空间</span><br><span class=\"line\">==号比较的到底是什么？</span><br><span class=\"line\">\t基本数据类型比较数据值</span><br><span class=\"line\">\t引用数据类型比较地址值   .equals()方法</span><br><span class=\"line\">字符串拼接的底层原理</span><br><span class=\"line\">\t如果没有变量参与，都是字符串直接相加，编译之后就是拼接之后的结果，会复用串池中的字符串。</span><br><span class=\"line\">\t如果有变量参与，每一行拼接的代码，都会在内存中创建新的字符串，浪费内存。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串拼接的底层原理\"><a href=\"#字符串拼接的底层原理\" class=\"headerlink\" title=\"字符串拼接的底层原理\"></a>字符串拼接的底层原理</h3><p><img src=\"/posts/737a1d74/Users\\Mr.Q\\Pictures\\java\\Snipaste_2023-03-01_21-59-54.png\"></p>\n<h2 id=\"StringBuilder概述\"><a href=\"#StringBuilder概述\" class=\"headerlink\" title=\"StringBuilder概述\"></a>StringBuilder概述</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringBuilder可以看成一个容器，创建之后里边的内容是可变的！！！</span><br><span class=\"line\">\t作用：提高字符串的操作效率</span><br><span class=\"line\">\t比如单纯的字符串拼接操作会产生新的字符串造成空间的浪费</span><br><span class=\"line\">\t提高效率的底层原理</span><br><span class=\"line\">\t\t所有要拼接的内容都会往StringBuilder中放，不会创建很多无用的空间，节约内存</span><br><span class=\"line\">构造方法</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StringBuilder</span><span class=\"params\">()</span>    创建一个空白可变字符串对象，不含有任何内容</span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"keyword\">public</span> <span class=\"title\">StringBuilder</span><span class=\"params\">(String str)</span> 根据字符串的内容，来创建可变字符串对象</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"StringBuilder常用方法\"><a href=\"#StringBuilder常用方法\" class=\"headerlink\" title=\"StringBuilder常用方法\"></a>StringBuilder常用方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> StringBuilder <span class=\"title\">append</span><span class=\"params\">(任意类型)</span> 添加数据，并返回对象本身</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> StringBuilder <span class=\"title\">reverse</span><span class=\"params\">()</span> 反转容器中的内容</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lengh</span><span class=\"params\">()</span> 返回长度（字符出现的个数）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> 通过<span class=\"title\">toString</span><span class=\"params\">()</span>就可以实现把StringBuilder转换为String</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"StringBuilder源码分析\"><a href=\"#StringBuilder源码分析\" class=\"headerlink\" title=\"StringBuilder源码分析\"></a>StringBuilder源码分析</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">默认创建一个长度为<span class=\"number\">16</span>的字节数组</span><br><span class=\"line\">添加的内容长度小于<span class=\"number\">16</span>，直接存</span><br><span class=\"line\">添加的内容大于<span class=\"number\">16</span>会扩容（原来的容量*<span class=\"number\">2</span>+<span class=\"number\">2</span>）</span><br><span class=\"line\">如果扩容之后还不够，以实际长度为准</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"StringJoiner概述\"><a href=\"#StringJoiner概述\" class=\"headerlink\" title=\"StringJoiner概述\"></a><strong>StringJoiner概述</strong></h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringJoiner和StringBuilder一样，也可以看成一个容器，创建之后里边的内容是可变的</span><br><span class=\"line\">\t作用：</span><br><span class=\"line\">\t\t提高字符串的操作效率，而且代码编写特别简介，但是目前市场上很少有人用。</span><br><span class=\"line\">\t构造方法</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StringJoiner</span><span class=\"params\">(间隔符号)</span>  创建一个StringJoiner对象，指定拼接时的间隔符号</span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"keyword\">public</span> <span class=\"title\">StringJoiner</span><span class=\"params\">(间隔符号,开始符号,结束符号)</span> 创建一个StringJoiner对象，指定拼接时的间隔符号开始符号和结束符号</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"StringJoiner常用方法\"><a href=\"#StringJoiner常用方法\" class=\"headerlink\" title=\"StringJoiner常用方法\"></a><strong>StringJoiner常用方法</strong></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> StringJoiner <span class=\"title\">add</span><span class=\"params\">(添加的内容)</span>  添加数据，并返回对象本身</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">length</span><span class=\"params\">()</span>  返回长度</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span>  返回一个字符串该字符串就是拼接后的结果 </span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h2><h3 id=\"Collection单列集合（接口，需要创建实现类对象）\"><a href=\"#Collection单列集合（接口，需要创建实现类对象）\" class=\"headerlink\" title=\"Collection单列集合（接口，需要创建实现类对象）\"></a>Collection单列集合（接口，需要创建实现类对象）</h3><p><img src=\"/posts/737a1d74/Users\\Mr.Q\\Pictures\\java\\Snipaste_2023-03-16_14-59-52.png\" alt=\"Snipaste_2023-03-16_14-59-52\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Collection</span><br><span class=\"line\">\tCollection是单列集合的祖宗接口，它的功能是全部单列集合都可以继承使用的。</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span>\t\t把给定的对象添加到当前集合中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span>\t\t清空集合中所有的元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(E e)</span>\t把给定的对象在当前集合删除</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Object obj)</span>\t判断当前集合是否包含给定对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span>\t判断当前集合是否为空</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> \t\t返回集合元素个数</span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\">需要注意：</span></span><br><span class=\"line\"><span class=\"function\">     contains底层是依赖equals方法进行判断是否存在的</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"comment\">// 所以，如果集合中存储的是自定义对象，也想通过contains方法来判断是否包含，那么在javabean类中，一定要重写equals方法</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\">---------------------------------------------------Collection集合获取迭代器</span></span><br><span class=\"line\"><span class=\"function\"> </span></span><br><span class=\"line\"><span class=\"function\">\tIterator&lt;E&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span>\t\t返回迭代器对象，默认指向当前集合的0索引</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p><img src=\"/posts/737a1d74/Users\\Mr.Q\\Pictures\\java\\Snipaste_2023-03-18_15-02-50.png\"></p>\n<h4 id=\"List集合（也是接口，需要创建实现类的对象）\"><a href=\"#List集合（也是接口，需要创建实现类的对象）\" class=\"headerlink\" title=\"List集合（也是接口，需要创建实现类的对象）\"></a>List集合（也是接口，需要创建实现类的对象）</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List集合的特点</span><br><span class=\"line\">\t有序：</span><br><span class=\"line\">\t\t存和取的元素顺序一致</span><br><span class=\"line\">\t有索引：</span><br><span class=\"line\">\t\t可以通过索引操作元素</span><br><span class=\"line\">\t可重复：</span><br><span class=\"line\">\t\t存储的元素可以重复</span><br><span class=\"line\"></span><br><span class=\"line\">List集合的特有方法</span><br><span class=\"line\">\tCollection的方法List都继承了</span><br><span class=\"line\">\tList集合因为有索引，所以多了很多索引操作的方法</span><br><span class=\"line\"></span><br><span class=\"line\">方法名称</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index,E element)</span> <span class=\"comment\">//在集合中按指定位置插入元素</span></span></span><br><span class=\"line\"><span class=\"function\">E <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span>\t<span class=\"comment\">//删除指定索引的元素，返回被删除的元素</span></span></span><br><span class=\"line\"><span class=\"function\">E <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> index,E element)</span>\t<span class=\"comment\">//修改指定索引的元素，返回被修改的元素</span></span></span><br><span class=\"line\"><span class=\"function\">E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span>\t<span class=\"comment\">//返回指定索引处的元素</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"ArrayList集合\"><a href=\"#ArrayList集合\" class=\"headerlink\" title=\"ArrayList集合\"></a>ArrayList集合</h5><h5 id=\"集合和数组的对比\"><a href=\"#集合和数组的对比\" class=\"headerlink\" title=\"集合和数组的对比\"></a>集合和数组的对比</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">集合</span><br><span class=\"line\">\t长度可变</span><br><span class=\"line\">\t可以存引用数据类型（存基本数据类型的话需要包装类）</span><br><span class=\"line\">    E   泛型：限定集合中存储数据的类型\t</span><br><span class=\"line\">数组</span><br><span class=\"line\">\t长度固定</span><br><span class=\"line\">\t可以存基本数据类型和引用数据类型</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"ArrayList成员方法-增删改查\"><a href=\"#ArrayList成员方法-增删改查\" class=\"headerlink\" title=\"ArrayList成员方法(增删改查)\"></a>ArrayList成员方法(增删改查)</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span>  <span class=\"comment\">//添加元素，返回值表示是否添加成功</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(E e)</span><span class=\"comment\">//删除指定元素，返回值表示是否删除成功</span></span></span><br><span class=\"line\"><span class=\"function\">E <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> <span class=\"comment\">//删除指定索引的元素，返回被删除的元素</span></span></span><br><span class=\"line\"><span class=\"function\">E <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> index,E e)</span> <span class=\"comment\">//修改指定索引下的元素，返回原来的元素</span></span></span><br><span class=\"line\"><span class=\"function\">E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> <span class=\"comment\">//获取指定索引的元素</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span>  <span class=\"comment\">//集合的长度，也就是集合中元素的个数</span></span></span><br></pre></td></tr></table></figure>\n\n<h4 id><a href=\"#\" class=\"headerlink\" title></a></h4><h4 id=\"Set系列集合（Set接口中的方法和Collection的Api一致）\"><a href=\"#Set系列集合（Set接口中的方法和Collection的Api一致）\" class=\"headerlink\" title=\"Set系列集合（Set接口中的方法和Collection的Api一致）\"></a>Set系列集合（Set接口中的方法和Collection的Api一致）</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set集合特点：</span><br><span class=\"line\">\t无序：存取顺序不一致</span><br><span class=\"line\">\t不重复：可以去除重复</span><br><span class=\"line\">\t无索引:没有带索引的方法，所以不能使用普通for循环遍历，也不能通过索引来获取元素</span><br><span class=\"line\">\t</span><br><span class=\"line\">Set集合的实现类：</span><br><span class=\"line\">\tHashSet：无序、不重复、无索引</span><br><span class=\"line\">\tLinkedHashSet：有序、不重复、无索引</span><br><span class=\"line\">\tTreeSet：可排序、不重复、无索引</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"HashSet\"><a href=\"#HashSet\" class=\"headerlink\" title=\"HashSet\"></a>HashSet</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HashSet底层原理：</span><br><span class=\"line\">\tHashSet集合底层采取哈希表存储数据</span><br><span class=\"line\">\t哈希表是一种对于增删改查数据性能都较好的结构</span><br><span class=\"line\">\t1.创建一个默认长度16，默认加载因子为0.75的数组，数组名为table</span><br><span class=\"line\">\t2.根据元素的哈希值跟数组的长度计算出应存入的位置</span><br><span class=\"line\">\t3.判断当前位置是否为null，如果是null直接存入</span><br><span class=\"line\">\t4.如果位置不为null，表示有元素，则调用equals方法比较属性值</span><br><span class=\"line\">\t5.一样： 不存\t\t不一样： 存入数组，形成链表</span><br><span class=\"line\">\t\tJDK8以前： 新元素存入数组，老元素挂在新元素下面</span><br><span class=\"line\">\t\tJDK8以后： 新元素直接挂在老元素下面</span><br><span class=\"line\">\tJDK8以后，当链表长度超过8，而且数组长度大于等于64时，自动转换为红黑树</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t如果集合中存储的时自定义对象，必须重写hashCode和equals方法</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">HashSet的三个问题</span><br><span class=\"line\">\tHashSet为什么存和取的顺序不一样？</span><br><span class=\"line\">\t\t遍历时从数组的0索引开始，遇到链表先遍历完再进行数组的遍历</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tHashSet为什么没有索引？</span><br><span class=\"line\">\t\t因为HashSet在底层是，数组链表和红黑树组成的的结构，不知道以谁当索引</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tHashSet是利用什么机制保证数据去重的？</span><br><span class=\"line\">\t\tHashSet方法和equals方法</span><br><span class=\"line\"></span><br><span class=\"line\">哈希表组成：</span><br><span class=\"line\">\tJDK8之前：</span><br><span class=\"line\">\t\t数组+链表</span><br><span class=\"line\">\tJDK8开始：</span><br><span class=\"line\">\t\t数组+链表+红黑树</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">哈希值：</span><br><span class=\"line\">\t对象的整数表现形式</span><br><span class=\"line\">\t根据hashCode方法算出来的int类型的整数</span><br><span class=\"line\">\t该方法定义再Object类中，所有对象都可以调用，默认使用地址值进行计算</span><br><span class=\"line\">\t一般情况下，会重写hashCode方法，利用对象内部的属性值计算哈希值</span><br><span class=\"line\">\t</span><br><span class=\"line\">对象的哈希值特点：</span><br><span class=\"line\">\t如果没有重写hashCode方法，不同对象计算出的哈希值是不同的</span><br><span class=\"line\">\t如果已经重写hashCode方法，不同的对象只要属性值相同，计算出的哈希值就是一样的</span><br><span class=\"line\">\t在小部分情况下，不同的属性值或者不同的地址值计算出来的哈希值也有可能一样（哈希碰撞）</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"LinkedHashSet\"><a href=\"#LinkedHashSet\" class=\"headerlink\" title=\"LinkedHashSet\"></a>LinkedHashSet</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">继承HashSet直接用HashSet的方法即可</span><br><span class=\"line\">底层是使用双向链表保证数据的顺序</span><br><span class=\"line\">特点：</span><br><span class=\"line\">\t有顺序、不重复、无索引</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"TreeSet\"><a href=\"#TreeSet\" class=\"headerlink\" title=\"TreeSet\"></a>TreeSet</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">特点：</span><br><span class=\"line\">\t可排序、不重复、无索引</span><br><span class=\"line\">\t</span><br><span class=\"line\">TreeSet添加的两种规则：</span><br><span class=\"line\">\t方式一：</span><br><span class=\"line\">\t\t默认排序，自然排序：</span><br><span class=\"line\">\t\t\tJavabean类实现Comparable接口指定比较规则</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t<span class=\"comment\">// 返回值：</span></span><br><span class=\"line\">    <span class=\"comment\">//     负数：认为要添加的元素是小的，存在左边</span></span><br><span class=\"line\">    <span class=\"comment\">//     正数：认为要添加的元素是大的，存在右边</span></span><br><span class=\"line\">    <span class=\"comment\">//     0：认为要添加的元素已经存在，舍弃</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Student o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//指定排序的规则</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//按照年龄比较</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getAge()-o.getAge();</span><br><span class=\"line\">        <span class=\"comment\">// return 0;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t方式二：</span><br><span class=\"line\">        比较器排序：创建TreeSet对象的时候，传递比较器Comparator指定规则</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"单列集合总结\"><a href=\"#单列集合总结\" class=\"headerlink\" title=\"单列集合总结\"></a>单列集合总结</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.如果想要集合中的元素可重复</span><br><span class=\"line\">\t用ArrayList集合，基于数组的</span><br><span class=\"line\">2.如果想要集合中元素重复，而且当前的增删操作明显多于查询</span><br><span class=\"line\">\t用LinkedList集合，基于链表的</span><br><span class=\"line\">3.如果想对集合中的元素去重</span><br><span class=\"line\">\t用HashSet集合，基于哈希表的</span><br><span class=\"line\">4.如果想对集合中的元素去重，而且保证存取顺序</span><br><span class=\"line\">\t用LinkedHashSet集合，基于哈希表和双链表，效率低于HashSet</span><br><span class=\"line\">5.如果想对集合中的元素进行排列</span><br><span class=\"line\">\t用TreeSet集合，基于红黑树，后续也可以用List集合实现排序</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Map双列集合（Map是双列集合的顶层接口，它的共功能是全部双列集合都可以继承使用的）\"><a href=\"#Map双列集合（Map是双列集合的顶层接口，它的共功能是全部双列集合都可以继承使用的）\" class=\"headerlink\" title=\"Map双列集合（Map是双列集合的顶层接口，它的共功能是全部双列集合都可以继承使用的）\"></a>Map双列集合（Map是双列集合的顶层接口，它的共功能是全部双列集合都可以继承使用的）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">双列集合的特点</span><br><span class=\"line\">\t双列集合一次需要存一对数据，分别为键和值</span><br><span class=\"line\">\t键不能重复，值可以重复</span><br><span class=\"line\">\t键和值是一一对应的，每一个键只能找到自己对应的值</span><br><span class=\"line\">\t键+值这个整体 我们称之为&quot;键值对&quot; 或者 &quot;键值对对象&quot;，在java中叫做&quot;Entry对象&quot;</span><br><span class=\"line\">\t</span><br><span class=\"line\">TreeMap特点：</span><br><span class=\"line\">\t不重复、无索引、可排序</span><br><span class=\"line\">\t底层基于红黑树实现排序，增删改查性能好</span><br><span class=\"line\">TreeMap集合排序的两种方式：</span><br><span class=\"line\">\t实现Compareble接口，指定比较规则</span><br><span class=\"line\">\t创建集合时传递Com【arator比较器对象，指定比较规则</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/posts/737a1d74/Users\\Mr.Q\\Pictures\\java\\Snipaste_2023-03-20_15-15-33.png\" alt=\"Snipaste_2023-03-20_15-15-33\"></p>\n<h4 id=\"Map常见的API\"><a href=\"#Map常见的API\" class=\"headerlink\" title=\"Map常见的API\"></a>Map常见的API</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">V put (K key,V value)\t\t添加元素</span><br><span class=\"line\">V remove(Object key)\t\t根据键删除键值对元素</span><br><span class=\"line\">void clear()\t\t\t\t移除所有的键值对元素</span><br><span class=\"line\">boolean containsKey(Object key)\t判断集合是否包含指定的键</span><br><span class=\"line\">Boolean containsValue(Object value) 判断集合是否包含指定的值</span><br><span class=\"line\">boolean isEmpty() \t\t\t判断集合是否为空</span><br><span class=\"line\">int size()\t\t\t\t\t集合的长度，也就是集合中键值对的个数</span><br><span class=\"line\">int get(Object key)\t\t\t判断键出现的次数</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Map遍历\"><a href=\"#Map遍历\" class=\"headerlink\" title=\"Map遍历\"></a>Map遍历</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">遍历方式有三种</span><br><span class=\"line\">\t<span class=\"number\">1.</span>键找值</span><br><span class=\"line\">\t<span class=\"comment\">//获取所有的键，把这些键放到一个集合中</span></span><br><span class=\"line\">        Set&lt;String&gt; keySet = m.keySet();</span><br><span class=\"line\">        然后通过Set集合遍历</span><br><span class=\"line\">    <span class=\"comment\">//利用map中对应的key键获取对应的值value</span></span><br><span class=\"line\">        String value = m.get(key);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;key = &quot;</span>+key+<span class=\"string\">&quot;  value = &quot;</span>+value);</span><br><span class=\"line\">\t<span class=\"number\">2.</span>不推荐</span><br><span class=\"line\">    <span class=\"number\">3.</span>利用Lambda改写BiConsumer</span><br><span class=\"line\">        m.forEach((key,value)-&gt; System.out.println(key+<span class=\"string\">&quot;=&quot;</span>+value));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">统计思想，利用map集合进行排序</span><br><span class=\"line\">    如果题目中没有要求对结果进行排序，默认使用HashMap</span><br><span class=\"line\">\t如果题目中要求对结果进行排序，默认使用TreeMap</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"遍历\"><a href=\"#遍历\" class=\"headerlink\" title=\"遍历\"></a>遍历</h2><h3 id=\"Colleation遍历\"><a href=\"#Colleation遍历\" class=\"headerlink\" title=\"Colleation遍历\"></a>Colleation遍历</h3><h4 id=\"迭代器遍历\"><a href=\"#迭代器遍历\" class=\"headerlink\" title=\"迭代器遍历\"></a>迭代器遍历</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">迭代器不依赖索引</span><br><span class=\"line\">Iterator中常用方法</span><br><span class=\"line\"></span><br><span class=\"line\">boolean hasNext() 判断当前位置是否有元素，有元素返回true，没有元素返回false</span><br><span class=\"line\"></span><br><span class=\"line\">E next() \t获取当前位置的元素，并将迭代器对象移向下一个位置</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"增强for\"><a href=\"#增强for\" class=\"headerlink\" title=\"增强for\"></a>增强for</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">增强<span class=\"keyword\">for</span>的底层就是迭代器，为了简化迭代器的代码书写的</span><br><span class=\"line\">他是JDK5以后出现的，其内部原理就是一个Iterator迭代器</span><br><span class=\"line\">所有的单列集合和数组才能用增强<span class=\"keyword\">for</span>进行遍历</span><br><span class=\"line\"></span><br><span class=\"line\">格式：</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(元素的数据类型 变量名:数组或集合)&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">例如：</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(String s : List)&#123;</span><br><span class=\"line\">        System.out.println(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">增强<span class=\"keyword\">for</span>的细节：</span><br><span class=\"line\">    \t修改增强<span class=\"keyword\">for</span>中的变量，不会改变集合中原本的数据</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Lambda表达式遍历\"><a href=\"#Lambda表达式遍历\" class=\"headerlink\" title=\"Lambda表达式遍历\"></a>Lambda表达式遍历</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JDK8开始的新技术Lambda表达式，提供了一种更简单，更直接的遍历集合的方式</span><br><span class=\"line\">() -&gt; </span><br><span class=\"line\">default void forEach(Consumer&lt;? super T&gt; action) :\t\t结合Lambda遍历集合</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"基本数据类型对应包装类\"><a href=\"#基本数据类型对应包装类\" class=\"headerlink\" title=\"基本数据类型对应包装类\"></a>基本数据类型对应包装类</h3><p><img src=\"/posts/737a1d74/Users\\Mr.Q\\Pictures\\java\\Snipaste_2023-03-02_21-18-07.png\" alt=\"Snipaste_2023-03-02_21-18-07\"></p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">什么是反射？</span><br><span class=\"line\">\t反射允许对封装类的字段（成员变量）</span><br><span class=\"line\">\t方法（成员方法）</span><br><span class=\"line\">\t构造函数（构造方法）</span><br><span class=\"line\">\t的信息进行编程访问</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">什么是多线程？</span><br><span class=\"line\">\t有了多线程，我们就可以让程序同时做多件事情</span><br><span class=\"line\">多线程的作用？</span><br><span class=\"line\">\t提高效率</span><br><span class=\"line\">多线程的应用场景？</span><br><span class=\"line\">\t只要你想让多个事情同时运行就需要用到多线程</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"并发与并行\"><a href=\"#并发与并行\" class=\"headerlink\" title=\"并发与并行\"></a>并发与并行</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">并发：</span><br><span class=\"line\">\t在同一时刻，有多个指令在单个CPU上   交替   执行</span><br><span class=\"line\">\t</span><br><span class=\"line\">并行：</span><br><span class=\"line\">\t在同一时刻，有多个指令在多个CPU上   同时   执行</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"多线程三种实现方法对比\"><a href=\"#多线程三种实现方法对比\" class=\"headerlink\" title=\"多线程三种实现方法对比\"></a>多线程三种实现方法对比</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一种：</span><br><span class=\"line\">\t继承Thread类</span><br><span class=\"line\">\t\t优点：</span><br><span class=\"line\">\t\t\t编程比较简单可以直接使用Thread类中的方法</span><br><span class=\"line\">\t\t缺点：</span><br><span class=\"line\">\t\t\t扩展性较差，不能再继承其他类</span><br><span class=\"line\">第二种：</span><br><span class=\"line\">\t实现Runnable接口</span><br><span class=\"line\">\t\t优点：</span><br><span class=\"line\">\t\t\t扩展性强，实现该接口的同时还可以继承其他的类</span><br><span class=\"line\">\t\t缺点：</span><br><span class=\"line\">\t\t\t编程相对复杂，不能直接使用Thread类中的方法</span><br><span class=\"line\">第三种：</span><br><span class=\"line\">\t实现Callable接口    （同第二种）</span><br><span class=\"line\">\t不过可以获取线程运行的结果</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"线程常用的成员方法\"><a href=\"#线程常用的成员方法\" class=\"headerlink\" title=\"线程常用的成员方法\"></a>线程常用的成员方法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回此线程的名称</span></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">getName</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 设置线程的名字（构造方法也可以设置名字）</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 获取当前线程的对象</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> Thread <span class=\"title\">currentThread</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 让线程休眠指定的时间，单位为毫秒</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sleep</span><span class=\"params\">(Long time)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 设置线程的优先级</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">setPriority</span><span class=\"params\">(<span class=\"keyword\">int</span> newPriority)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 获取线程的优先级</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getPriority</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 设置为守护线程</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">setDaemon</span><span class=\"params\">(<span class=\"keyword\">boolean</span> on)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 出让线程/礼让线程</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">yield</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 插入线程/插队线程</span></span></span><br><span class=\"line\"><span class=\"function\">publid <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">join</span><span class=\"params\">()</span></span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"线程的生命周期\"><a href=\"#线程的生命周期\" class=\"headerlink\" title=\"线程的生命周期\"></a>线程的生命周期</h4><p><img src=\"/posts/737a1d74/Users\\Mr.Q\\Pictures\\java\\Snipaste_2023-03-29_11-50-03.png\" alt=\"Snipaste_2023-03-29_11-50-03\"></p>\n<h4 id=\"同步代码块\"><a href=\"#同步代码块\" class=\"headerlink\" title=\"同步代码块\"></a>同步代码块</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">把操作共享数据的代码锁起来</span><br><span class=\"line\">格式：</span><br><span class=\"line\">\tsynchronized(锁)&#123;</span><br><span class=\"line\">\t\t操作共享数据的代码</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">特点：</span><br><span class=\"line\">\t锁默认打开，有一个线程进入，锁自动关闭</span><br><span class=\"line\">\t里面所有的代码全部执行完毕，线程出来，锁自动打开</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Lock锁\"><a href=\"#Lock锁\" class=\"headerlink\" title=\"Lock锁\"></a>Lock锁</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Lock实现提供比使用<span class=\"keyword\">synchronized</span>方法和语句可以获得更广泛的锁定操作</span><br><span class=\"line\">Lock中提供了获得锁和释放锁的方法</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">locl</span><span class=\"params\">()</span>:获得锁</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unlock</span><span class=\"params\">()</span>:释放锁</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">Lock是接口不能直接实例化，这里采用它的实现类ReentrantLock来实例化</span></span><br><span class=\"line\"><span class=\"function\">ReentrantLock的构造方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">ReentrantLock</span><span class=\"params\">()</span>:创建一个ReentrantLock的实例化</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Execuors：</span><br><span class=\"line\">\t线程池的工具类通过调用方法返回不同类型的线程池对象</span><br><span class=\"line\"></span><br><span class=\"line\">线程池代码实现：</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建一个没有上线的线程池</span><br><span class=\"line\">public static ExecutorService newCachedThreadPool()</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建有上限的线程池</span><br><span class=\"line\">public static ExecutorService newFixedThreadPool(int nThreads)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">线程池主要核心原理</span><br><span class=\"line\">\t1.创建一个池子，池子中是空的</span><br><span class=\"line\">\t2.提交任务时，池子会创建新的线程对象，任务执行完毕，线程归还给池子，下回再次提交任务时，不需要创建新的线程，直接复用已有的线程即可</span><br><span class=\"line\">\t3.但是如果提交任务时，池子中没有空闲线程，也无法创建新的线程，任务就会排队等待</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">自定义线程池</span><br><span class=\"line\">\t小结：</span><br><span class=\"line\">\t\t1.创建一个空的池子</span><br><span class=\"line\">\t\t2.有任务提交时，线程池会创建线程去执行任务，执行完毕归还线程</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">不断的提交任务，会有三个临界点：</span><br><span class=\"line\">\t1.当核心线程满时，在提交任务就会排队</span><br><span class=\"line\">\t2.当核心线程满，队伍满时，会创建临时线程</span><br><span class=\"line\">\t3.当核心线程满，队伍满，临时线程满时，会触发任务拒绝策略</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"网络编程\"><a href=\"#网络编程\" class=\"headerlink\" title=\"网络编程\"></a>网络编程</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">什么是网络编程？</span><br><span class=\"line\">\t在网络通信协议下，不同计算机上运行的程序，进行的数据传输</span><br><span class=\"line\">\t</span><br><span class=\"line\">表示互联网协议（IP）地址的类</span><br><span class=\"line\">\tInetAddress</span><br><span class=\"line\">\t</span><br><span class=\"line\">端口号：</span><br><span class=\"line\">\t应用程序在设备中的唯一标识</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t端口号：</span><br><span class=\"line\">\t\t由两个字节表示的整数，取值范围：0~65535</span><br><span class=\"line\">\t\t其中0~1023之间的端口号用于一些知名的网络服务或者应用</span><br><span class=\"line\">\t\t我们自己使用1024以上的端口号就可以了</span><br><span class=\"line\">\t注意：</span><br><span class=\"line\">\t\t一个端口号只能被一个应用程序使用</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">协议：</span><br><span class=\"line\">\t计算机网络中，连接和通信的规则被称为网络通信协议</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tUDP协议：</span><br><span class=\"line\">\t\t用户数据报协议</span><br><span class=\"line\">\t\tUDP是  面向无连接  通信协议</span><br><span class=\"line\">\t\t速度快，有大小限制一次最多发送64K，数据不安全，易丢失</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\tUDP的三种通信方式</span><br><span class=\"line\">\t\t1.单播：</span><br><span class=\"line\">\t\t\t以前的代码就是单播</span><br><span class=\"line\">\t\t2.组播：</span><br><span class=\"line\">\t\t\t组播地址：224.0.0.0 ~ 239.255.255.255</span><br><span class=\"line\">\t\t\t\t\t其中224.0.0.0 ~ 224.0.0.255为预留的组播地址</span><br><span class=\"line\">\t\t3.广播：</span><br><span class=\"line\">\t\t\t广播地址：255.255.255.255</span><br><span class=\"line\">\tTCP协议：</span><br><span class=\"line\">\t\t传输控制协议TCP</span><br><span class=\"line\">\t\tTCP协议是  面向连接  的通信协议</span><br><span class=\"line\">\t\t速度慢，没有大小限制，数据安全</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">客户端：</span><br><span class=\"line\">\t1.创建客户端的Socket对象与指定服务端连接</span><br><span class=\"line\">\tSocket(String host,int port)</span><br><span class=\"line\">\t2.获取输出流，写数据</span><br><span class=\"line\">\tOutputStream  getOutputStream()</span><br><span class=\"line\">\t3.释放资源</span><br><span class=\"line\">\tvoid close()</span><br><span class=\"line\">\t</span><br><span class=\"line\">服务器：</span><br><span class=\"line\">\t1.创建服务器端的Socket对象</span><br><span class=\"line\">\tServerSocket(int port)</span><br><span class=\"line\">\t2.监听客户端连接，返回一个Socket对象</span><br><span class=\"line\">\tSocket accept()</span><br><span class=\"line\">\t3.获取输入流，读数据，并把数据显示在控制台</span><br><span class=\"line\">\tInputStream   getInputStream()</span><br><span class=\"line\">\t4.释放资源</span><br><span class=\"line\">\tvoid close()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"TCP通信程序（三次握手）\"><a href=\"#TCP通信程序（三次握手）\" class=\"headerlink\" title=\"TCP通信程序（三次握手）\"></a>TCP通信程序（三次握手）</h4><p><img src=\"/posts/737a1d74/Users\\Mr.Q\\Pictures\\java\\Snipaste_2023-03-30_09-20-17.png\" alt=\"Snipaste_2023-03-30_09-20-17\"></p>\n<h4 id=\"TCP通信程序（四次挥手）\"><a href=\"#TCP通信程序（四次挥手）\" class=\"headerlink\" title=\"TCP通信程序（四次挥手）\"></a>TCP通信程序（四次挥手）</h4><p><img src=\"/posts/737a1d74/Users\\Mr.Q\\Pictures\\java\\Snipaste_2023-03-30_09-23-49.png\" alt=\"Snipaste_2023-03-30_09-23-49\"></p>\n<h3 id=\"IO流\"><a href=\"#IO流\" class=\"headerlink\" title=\"IO流\"></a>IO流</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">什么是IO流</span><br><span class=\"line\">\t存储和读取数据的解决方啊</span><br><span class=\"line\">\tI:intput\tO:output</span><br><span class=\"line\">\t流：像水流一样传输数据</span><br><span class=\"line\"></span><br><span class=\"line\">IO流的作用：</span><br><span class=\"line\">\t用于读写数据（本地文件，网络）</span><br><span class=\"line\">\t</span><br><span class=\"line\">IO流按照流向可以分类哪两种流</span><br><span class=\"line\">\t输出流： 程序  -&gt;  文件</span><br><span class=\"line\">\t输入流： 文件  -&gt;  程序</span><br><span class=\"line\">\t</span><br><span class=\"line\">IO流按照操作文件的类型可以分类哪两种流</span><br><span class=\"line\">\t字节流：可以操作所有类型的文件</span><br><span class=\"line\">\t字符流：只能操作纯文本文件</span><br><span class=\"line\">\t</span><br><span class=\"line\">什么是纯文本文件</span><br><span class=\"line\">\t用Windows系统自带的记事本打开并且能够读懂的文件</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"File\"><a href=\"#File\" class=\"headerlink\" title=\"File\"></a>File</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File表示什么：</span><br><span class=\"line\">    File对象表示路径，可以是文件，也可以是文件夹。</span><br><span class=\"line\">    这个路径可以是存在的，也可以是不存在的</span><br><span class=\"line\">    </span><br><span class=\"line\">绝对路径和相对路径是什么意思：</span><br><span class=\"line\">    绝对路径是带盘符的</span><br><span class=\"line\">    相对路径是不带盘符的，默认到当前项目下去找</span><br><span class=\"line\"></span><br><span class=\"line\">File三种构造方法：    </span><br><span class=\"line\">\t<span class=\"comment\">// 根据文件路径创建文件对象</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">File</span><span class=\"params\">(String pathname)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"comment\">// 根据父路径名字符串和子路径名字符串创建文件对象</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"keyword\">public</span> <span class=\"title\">File</span><span class=\"params\">(String parent, String chile)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"comment\">// 根据父路径对应文件对象和子路径名字符串创建文件对象</span></span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"keyword\">public</span> <span class=\"title\">File</span><span class=\"params\">(File parent,String chile)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"File常见的成员方法\"><a href=\"#File常见的成员方法\" class=\"headerlink\" title=\"File常见的成员方法\"></a>File常见的成员方法</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 判断此路径名表示的File是否为文件夹</span><br><span class=\"line\">boolean isDirectory()</span><br><span class=\"line\"></span><br><span class=\"line\">// 判断此路径名表示的File是否为文件</span><br><span class=\"line\">boolean isFile()</span><br><span class=\"line\"></span><br><span class=\"line\">// 判断此路径名表示的File是否为存在</span><br><span class=\"line\">boolean exists()</span><br><span class=\"line\"></span><br><span class=\"line\">// 返回文件的大小(字节数量)</span><br><span class=\"line\">long length()</span><br><span class=\"line\"></span><br><span class=\"line\">// 返回文件的绝对路径</span><br><span class=\"line\">String getAbsolutePath()</span><br><span class=\"line\"></span><br><span class=\"line\">// 返回定义文件时使用的路径</span><br><span class=\"line\">String getPath()</span><br><span class=\"line\"></span><br><span class=\"line\">// 返回文件的名称，带后缀</span><br><span class=\"line\">String getName()</span><br><span class=\"line\"></span><br><span class=\"line\">// 返回文件的最后修改时间(时间毫秒值)</span><br><span class=\"line\">Long lastModified()</span><br><span class=\"line\"></span><br><span class=\"line\">=================(创建、删除)==============</span><br><span class=\"line\">// 创建一个新的空的文件</span><br><span class=\"line\">boolean createNewFile()</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建单级文件夹</span><br><span class=\"line\">boolean mkdir()</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建多级文件夹</span><br><span class=\"line\">boolean mkdirs()</span><br><span class=\"line\"></span><br><span class=\"line\">// 删除文件、空文件见！！！注意删除的时候不走回收站</span><br><span class=\"line\">boolean delete()</span><br><span class=\"line\"></span><br><span class=\"line\">=================获取并遍历===============</span><br><span class=\"line\">// 获取当前该路径下所有内容</span><br><span class=\"line\">File[] listFiles()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"FileOutPutStream书写细节（字节流）\"><a href=\"#FileOutPutStream书写细节（字节流）\" class=\"headerlink\" title=\"FileOutPutStream书写细节（字节流）\"></a>FileOutPutStream书写细节（字节流）</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字节输出流的细节：</span><br><span class=\"line\">  \t1.创建字节输出流对象</span><br><span class=\"line\">        细节1：参数是字符串表示的路径或者是File对象都是可以的</span><br><span class=\"line\">        细节2：如果文件不存在会创建一个新的文件，但是要保证父级路径是存在的</span><br><span class=\"line\">        细节3: 如果文件中存在数据，则会清空数据</span><br><span class=\"line\">        </span><br><span class=\"line\">     2.写出数据：</span><br><span class=\"line\">        细节1：write输入的是整数，但是保存在本地的是ASCII的对应字符</span><br><span class=\"line\">        </span><br><span class=\"line\">     3.释放资源：</span><br><span class=\"line\">        每次使用完流之后都要释放资源</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">FileOutPutStream写数据的3中方式</span><br><span class=\"line\"></span><br><span class=\"line\">//一次写一个数据</span><br><span class=\"line\">void write(int b)</span><br><span class=\"line\"></span><br><span class=\"line\">//一次写一个字节数组数据</span><br><span class=\"line\">void write(byte[] b)</span><br><span class=\"line\"></span><br><span class=\"line\">//一次写一个字节数组的部分数据</span><br><span class=\"line\">void write(byte[] b,int off,int len)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"FileInPutStream书写细节（字节流）\"><a href=\"#FileInPutStream书写细节（字节流）\" class=\"headerlink\" title=\"FileInPutStream书写细节（字节流）\"></a>FileInPutStream书写细节（字节流）</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.创建字节输入流对象：</span><br><span class=\"line\">\t细节1：如果文件不存在，就直接报错</span><br><span class=\"line\">\t</span><br><span class=\"line\">2.读取数据：</span><br><span class=\"line\">\t细节1：一次读一个字节，读出来的数据是ASCII上对应的数字</span><br><span class=\"line\">\t细节2：读到文件末尾了，read方法返回-1</span><br><span class=\"line\"></span><br><span class=\"line\">3.释放资源：</span><br><span class=\"line\">\t细节：每次使用完流必须要释放资源</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"FileReader（字符流）\"><a href=\"#FileReader（字符流）\" class=\"headerlink\" title=\"FileReader（字符流）\"></a>FileReader（字符流）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第一步：创建对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FileReader</span><span class=\"params\">(File file)</span>        创建字符输入流关联本地文件</span></span><br><span class=\"line\"><span class=\"function\"> <span class=\"keyword\">public</span> <span class=\"title\">FileReader</span><span class=\"params\">(String pathname)</span>  创建字符输入流关联本地文件</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">//第二步：读取数据</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span>                   读取数据，读到末尾返回-1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">char</span>[] buffer)</span>      读取多个数据，读到末尾返回-1</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">//第三步：释放资源</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span>                 释放资源/关流</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"字符流原理解析\"><a href=\"#字符流原理解析\" class=\"headerlink\" title=\"字符流原理解析\"></a>字符流原理解析</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.创建字符输入流对象</span><br><span class=\"line\">\t底层：关联文件，并创建缓冲区（长度为8192的字节数组）</span><br><span class=\"line\"></span><br><span class=\"line\">2.读取数据</span><br><span class=\"line\">\t底层：</span><br><span class=\"line\">\t\t1.判断缓冲区中是否有数据可以读取</span><br><span class=\"line\">\t\t2.缓冲区没有数据：</span><br><span class=\"line\">\t\t\t\t就从文件中获取，撞到缓冲区中，每次尽可能装满缓冲区 如果文件中也没有数据了，返回-1</span><br><span class=\"line\">\t\t3.缓冲区有数据：</span><br><span class=\"line\">\t\t\t\t就从缓冲区读取</span><br><span class=\"line\">\t\t\t空参的read方法：</span><br><span class=\"line\">\t\t\t\t一次读取一个字节，遇到中文一次读多个字节，把字节解码并转换成十进制返回</span><br><span class=\"line\">\t\t\t有参的read方法：</span><br><span class=\"line\">\t\t\t\t把读取字节，解码，强转三步合并了，强转之后的字符放到数组中</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"缓冲流\"><a href=\"#缓冲流\" class=\"headerlink\" title=\"缓冲流\"></a>缓冲流</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.缓冲流有几种</span><br><span class=\"line\">\t字节缓冲输入流：BufferedInputStream()</span><br><span class=\"line\">\t字节缓冲输出流：BufferedOutputStream()</span><br><span class=\"line\">\t字符缓冲输入流：BufferedReader()</span><br><span class=\"line\">\t字节缓冲输出流：BufferedWriter()</span><br><span class=\"line\"></span><br><span class=\"line\">2.缓冲流为什么能提高性能</span><br><span class=\"line\">\t缓冲流自带长度为8192的缓冲区</span><br><span class=\"line\">\t可以显著提高字节流的读写性能</span><br><span class=\"line\">\t对于字符流提升不明显，有两种特有的方法</span><br><span class=\"line\"></span><br><span class=\"line\">3.字符缓冲流有两个特有的方法</span><br><span class=\"line\">\t字符缓冲输入流 BufferedReader: readLine()</span><br><span class=\"line\">\t字符缓冲输出流 BufferedWriter: newLine()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"转换流\"><a href=\"#转换流\" class=\"headerlink\" title=\"转换流\"></a>转换流</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">转换流的名字：</span><br><span class=\"line\">\t字符转换输入流：InputStreamReader</span><br><span class=\"line\">\t字符转换输出流：OutputStreamWriter</span><br><span class=\"line\">转换流的作用是什么：</span><br><span class=\"line\">\t指定字符集读写数据</span><br><span class=\"line\">\t字节流想要使用字符流中的方法</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"序列化流-x2F-对象操作输出流\"><a href=\"#序列化流-x2F-对象操作输出流\" class=\"headerlink\" title=\"序列化流&#x2F;对象操作输出流\"></a>序列化流&#x2F;对象操作输出流</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以把Java中的对象写到本地文件中</span><br><span class=\"line\"></span><br><span class=\"line\">构造方法</span><br><span class=\"line\">// 把基本流包装成高级流</span><br><span class=\"line\">public ObjectOutputStream(OutputStream out)</span><br><span class=\"line\"></span><br><span class=\"line\">成员方法</span><br><span class=\"line\">// 把对象序列化(写出)到文件中去</span><br><span class=\"line\">public final void wtiterObject(Object obj)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">序列化小细节：</span><br><span class=\"line\">\t使用对象输出流将对象保存到文件时会出现问题</span><br><span class=\"line\"></span><br><span class=\"line\">解决方案：</span><br><span class=\"line\">\t需要让JavaBean类实现Serializable接口</span><br><span class=\"line\">\t</span><br><span class=\"line\">如果一个对象的某个成员变量的值不想被序列化</span><br><span class=\"line\">\t给该成员变量加上transient关键字修饰</span><br><span class=\"line\">\t该关键字标记的成员变量不参与序列化过程</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"打印流\"><a href=\"#打印流\" class=\"headerlink\" title=\"打印流\"></a>打印流</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">分类：</span><br><span class=\"line\">\t一般是指PintStream，PrintWrite</span><br><span class=\"line\">特点1：</span><br><span class=\"line\">\t打印流只操作文件目的地，不操作数据源</span><br><span class=\"line\">特点2：</span><br><span class=\"line\">\t特有的写出方法可以实现，数据原样写出</span><br><span class=\"line\">特点3：</span><br><span class=\"line\">\t特有的写出方法，可以实现自动刷新，换行</span><br><span class=\"line\">\t</span><br><span class=\"line\">字节打印流：</span><br><span class=\"line\">\t构造方法</span><br><span class=\"line\">\t//关联字节输出流/文件/文件路径</span><br><span class=\"line\">\tpublic PrintStream(OutStream/File/String)</span><br><span class=\"line\">\t//指定字符编码</span><br><span class=\"line\">\tpublic PrintStream(String fileName, Charset charset)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t成员方法：</span><br><span class=\"line\">\t//规则和之前一样，将指定的字节写出</span><br><span class=\"line\">\tvoid write(int b)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t特有方法：</span><br><span class=\"line\">\t//打印任意数据，自动换行，自动刷新</span><br><span class=\"line\">\tprintln()</span><br><span class=\"line\">\t//打印任意数据，不换行</span><br><span class=\"line\">\tprint()</span><br><span class=\"line\">\t//带有占位符的打印语句，不换行</span><br><span class=\"line\">\tprintf(String format, Object... args)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"字符集\"><a href=\"#字符集\" class=\"headerlink\" title=\"字符集\"></a>字符集</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.在计算机中，任意数据都是以二进制的形式来存储的</span><br><span class=\"line\">2.计算机中最小的存储单元是一个字节</span><br><span class=\"line\">3.ASCII字符集中，一个英文占一个字节</span><br><span class=\"line\">4.简体中文版Windows，默认使用GBK字符集</span><br><span class=\"line\">5.GBK字符集完全兼容ASCII字符集</span><br><span class=\"line\">\t一个英文占一个字节，二进制第一位是0</span><br><span class=\"line\">\t一个中文占两个字节，二进制高位字节的第一位是1</span><br><span class=\"line\">\t</span><br><span class=\"line\">Unicode字符集的UTF-8下</span><br><span class=\"line\">\t一个英文占一个字节，二进制第一位是0</span><br><span class=\"line\">\t一个中文占3个字节，1110XXXX 10XXXXXX 10XXXXXX（首位是1）</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">异常：</span><br><span class=\"line\">\t就是代表程序出的错误</span><br><span class=\"line\"></span><br><span class=\"line\">误区：</span><br><span class=\"line\">\t不是让我们以后不出异常，而是程序出了异常之后，该如何处理</span><br><span class=\"line\">\t</span><br><span class=\"line\">异常体系的最上层父类是谁？异常分为几类？</span><br><span class=\"line\">\t父类：Exception</span><br><span class=\"line\">\t异常分为两类：编译时异常、运行时异常</span><br><span class=\"line\"></span><br><span class=\"line\">编译时异常和运行时异常的区别</span><br><span class=\"line\">\t编译时异常：</span><br><span class=\"line\">\t\t没有继承RuntimeException的异常，直接继承于Exception</span><br><span class=\"line\">\t\t编译阶段就会错误提示</span><br><span class=\"line\">\t运行时异常：</span><br><span class=\"line\">\t\tRuntimeException本身和子类</span><br><span class=\"line\">\t\t编译阶段没有错误提示，运行时出现的</span><br><span class=\"line\">\t</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/posts/737a1d74/Users\\Mr.Q\\Pictures\\java\\Snipaste_2023-03-22_17-41-33.png\" alt=\"Snipaste_2023-03-22_17-41-33\"></p>\n<h4 id=\"捕获异常\"><a href=\"#捕获异常\" class=\"headerlink\" title=\"捕获异常\"></a>捕获异常</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式：</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        可能出现异常的代码;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(异常类名 变量名) &#123;</span><br><span class=\"line\">        异常的处理代码;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">目的：</span><br><span class=\"line\">    当代码出现异常时，可以让程序继续往下执行</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/posts/737a1d74/Users\\Mr.Q\\Pictures\\java\\Snipaste_2023-03-22_18-23-55.png\" alt=\"Snipaste_2023-03-22_18-23-55\"></p>\n<h3 id=\"方法引用\"><a href=\"#方法引用\" class=\"headerlink\" title=\"方法引用\"></a>方法引用</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.什么是方法引用？</span><br><span class=\"line\">\t把已经存在的方法拿过来用，当作函数式接口中抽象方法的方法体</span><br><span class=\"line\">2.::是什么符号？</span><br><span class=\"line\">\t方法引用符</span><br><span class=\"line\">3.方法引用时需要注意什么？</span><br><span class=\"line\">\t需要有函数式接口</span><br><span class=\"line\">\t被引用方法必须已经存在</span><br><span class=\"line\">\t被引用方法的形参和返回值需要跟抽象方法保持一致</span><br><span class=\"line\">\t被引用方法的功能要满足当前的需求</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">=================================================================</span><br><span class=\"line\">1.引用静态方法</span><br><span class=\"line\">\t类名::静态方法</span><br><span class=\"line\">2.引用成员方法</span><br><span class=\"line\">\t对象::成员方法</span><br><span class=\"line\">\tthis::成员方法</span><br><span class=\"line\">\tsuper::成员方法</span><br><span class=\"line\">3.引用构造方法</span><br><span class=\"line\">\t类名::new</span><br><span class=\"line\">4.使用类名引用成员方法</span><br><span class=\"line\">\t类名::成员方法</span><br><span class=\"line\">5.引用数组的构造方法</span><br><span class=\"line\">\t数据类型[]::new</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Stream流\"><a href=\"#Stream流\" class=\"headerlink\" title=\"Stream流\"></a>Stream流</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream流的思想</span><br><span class=\"line\"></span><br><span class=\"line\">Stream流的作用：</span><br><span class=\"line\">\t结合了Lambda表达式，简化集合，数组的操作</span><br><span class=\"line\">\t</span><br><span class=\"line\">Stream流的使用步骤：</span><br><span class=\"line\">\t1.先得到一条Stream流（流水线），并把数据放上去</span><br><span class=\"line\">\t2.利用Stream流中的API进行各种操作</span><br><span class=\"line\">\t过滤\t\t转换\t\t中间方法   方法调用完毕之后，还可以调用其他方法</span><br><span class=\"line\">\t统计\t\t打印\t\t终结方法   最后一步，调用完毕之后，不能调用其他方法</span><br><span class=\"line\">\t</span><br><span class=\"line\">使用流程：</span><br><span class=\"line\">获取方式\t\t方法名\t\t\t  \t\t\t\t\t说明</span><br><span class=\"line\">单列集合\tdefault Stream&lt;E&gt; stream()\t\tCollection中的默认方法</span><br><span class=\"line\">双列集合\t\t无\t\t\t\t\t\t\t无法直接使用Stream流</span><br><span class=\"line\">数组\t\tpublic static&lt;T&gt;Stream&lt;T&gt;stream(T[] Array)\tArray工具类</span><br><span class=\"line\">一堆零散的数据\t\t\tStream&lt;T&gt;of(T...values)\tStream接口的静态方法</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Stream流的中间方法\"><a href=\"#Stream流的中间方法\" class=\"headerlink\" title=\"Stream流的中间方法\"></a>Stream流的中间方法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">过滤</span><br><span class=\"line\">\tStream&lt;T&gt;filter(Predicate&lt;? super T&gt;predicate) </span><br><span class=\"line\">\t</span><br><span class=\"line\">获取前几个元素</span><br><span class=\"line\">\tStream&lt;T&gt;limit(long maxSize)</span><br><span class=\"line\">\t</span><br><span class=\"line\">跳过前几个元素</span><br><span class=\"line\">\tStream&lt;T&gt;skip(long n)</span><br><span class=\"line\">\t</span><br><span class=\"line\">元素去重，依赖（hashCode和equals方法）</span><br><span class=\"line\">\tStream&lt;T&gt;distinct()</span><br><span class=\"line\">\t</span><br><span class=\"line\">合并a和b两个流为一个流</span><br><span class=\"line\">\tstatic&lt;T&gt;Stream&lt;T&gt;concat(Stream a,Stream b)</span><br><span class=\"line\">\t</span><br><span class=\"line\">转换流中的数据类型</span><br><span class=\"line\">\tStream&lt;R&gt;map(Function&lt;T,R&gt; mapper)</span><br><span class=\"line\">\t</span><br><span class=\"line\">注意点：</span><br><span class=\"line\">\t1.中间方法，返回新的Stream流，原来的Stream流只能用一次，建议使用链式编程</span><br><span class=\"line\">\t2.修改Stream流中的数据，不会影响原来集合或者数组中的数据</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Stream流的终结方法\"><a href=\"#Stream流的终结方法\" class=\"headerlink\" title=\"Stream流的终结方法\"></a>Stream流的终结方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">遍历</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">forEach</span><span class=\"params\">(Consumer action)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">统计</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">count</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">收集流中的数据，放到数组中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">toArray</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">收集流中的数据，放到集合中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">collect</span><span class=\"params\">(Collector collector)</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"不可变集合\"><a href=\"#不可变集合\" class=\"headerlink\" title=\"不可变集合\"></a>不可变集合</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在List、Set、Map接口中，都存在静态的of方法，可以获取一个不可变的集合</span><br><span class=\"line\"></span><br><span class=\"line\">方法：</span><br><span class=\"line\">static &lt;E&gt; List&lt;E&gt; of(E...elements) 创建一个具有指定元素的List集合对象</span><br><span class=\"line\">static &lt;E&gt; Set&lt;E&gt; of(E...elements) 创建一个具有指定元素的Set集合对象</span><br><span class=\"line\">static &lt;E,V&gt; Map&lt;K,V&gt; of(E...elements) 创建一个具有指定元素的Map集合对象</span><br><span class=\"line\"></span><br><span class=\"line\">注意：</span><br><span class=\"line\">\t这个集合不能添加，不能删除，不能修改</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">不可变集合的特点：</span><br><span class=\"line\">\t定义完成后不可以修改，或者添加，删除</span><br><span class=\"line\">如何创建不可变集合：</span><br><span class=\"line\">\tList，Set，Map接口中，都存在of方法可以创建不可变集合</span><br><span class=\"line\">三种方式的细节：</span><br><span class=\"line\">\tList：</span><br><span class=\"line\">\t\t直接用</span><br><span class=\"line\">\tSet：</span><br><span class=\"line\">\t\t元素不能重复</span><br><span class=\"line\">\tMap：</span><br><span class=\"line\">\t\t元素不重复，键值对数量最多是10个</span><br><span class=\"line\">\t\t超过10个用ofEntries方法</span><br><span class=\"line\">\t\t（如果JDK超过10  可以用copyOf方法）</span><br><span class=\"line\">\t\tMap&lt;String, String&gt; map = Map.copyOf(hashMap);</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"Collections工具类\"><a href=\"#Collections工具类\" class=\"headerlink\" title=\"Collections工具类\"></a>Collections工具类</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">作用：</span><br><span class=\"line\">\tCollections不是集合，而是集合的工具类</span><br><span class=\"line\">\t</span><br><span class=\"line\">Collections常用的API</span><br><span class=\"line\"></span><br><span class=\"line\">方法名称</span><br><span class=\"line\">public static &lt;T&gt; boolean addAll(Collection&lt;T&gt; c,T...elements)</span><br><span class=\"line\">\t批量添加元素</span><br><span class=\"line\">public static void shuffke(List&lt;?&gt; list) </span><br><span class=\"line\">\t打乱list集合元素的顺序。</span><br><span class=\"line\">public static &lt;T&gt; void sort(List&lt;T&gt; List)</span><br><span class=\"line\">\t排序</span><br><span class=\"line\">public static &lt;T&gt; void sort(List&lt;T&gt; List,Comparator&lt;T&gt; c)</span><br><span class=\"line\">\t根据指定的规则进行排序</span><br><span class=\"line\">public static &lt;T&gt; int binarySearch(List&lt;T&gt;, T key)</span><br><span class=\"line\">\t以二分查找法查找元素</span><br><span class=\"line\">public static &lt;T&gt; void copy(List&lt;T&gt; dest,List&lt;T&gt; src)</span><br><span class=\"line\">\t拷贝集合中的元素</span><br><span class=\"line\">public static &lt;T&gt; int fill(List&lt;T&gt; list,T obj)</span><br><span class=\"line\">\t使用指定的元素填充集合</span><br><span class=\"line\">public static &lt;T&gt; void max/min(Collection&lt;T&gt; coll)</span><br><span class=\"line\">\t根据默认的自然排序获取最大/最小值</span><br><span class=\"line\">public static &lt;T&gt; void swap(List&lt;?&gt; list,int i,int j)</span><br><span class=\"line\">\t交换集合中指定位置的元素</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JDK5</span><br><span class=\"line\">可变参数</span><br><span class=\"line\">方法形参的个数时可以发生变化的0 1 2 3......</span><br><span class=\"line\"></span><br><span class=\"line\">作用：</span><br><span class=\"line\">\t在形参中接收多个数据</span><br><span class=\"line\"></span><br><span class=\"line\">格式：</span><br><span class=\"line\">\t数据类型...名字</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">底层：</span><br><span class=\"line\">\t可变参数底层就是一个数组</span><br><span class=\"line\">\t只不过不需要我们自己创建了，java会帮我们创建好</span><br><span class=\"line\">\t</span><br><span class=\"line\">public static int getSum(int...args)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">小细节：</span><br><span class=\"line\">\t在方法的形参中可变参数最多可以写一个</span><br><span class=\"line\">\t如果在方法中除了可变参数还有其他形参，那么可变参数要写在最后</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">泛型：</span><br><span class=\"line\">\t是JDK5中引入的特性，可以在编译阶段约束操作的数据类型，并进行检查</span><br><span class=\"line\">\t</span><br><span class=\"line\">泛型的格式：</span><br><span class=\"line\">\t&lt;数据类型&gt;</span><br><span class=\"line\">注意：</span><br><span class=\"line\">\t泛型只能支持引用数据类型</span><br><span class=\"line\">\t如果我们没有给集合指定类型，默认认为所有的数据类型都是Object类型，此时可以往集合添加任意的数据类型，带来一个坏处，我们在获取数据的时候，无法使用他的特有行为</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">扩展知识：</span><br><span class=\"line\">\tJava中的泛型是伪泛型</span><br><span class=\"line\">\t在Java文件中泛型存在，编译后泛型就不存在了</span><br><span class=\"line\">\t叫做泛型的擦除</span><br><span class=\"line\"></span><br><span class=\"line\">泛型的细节：</span><br><span class=\"line\">\t泛型中不能写基本数据类型</span><br><span class=\"line\">\t指定泛型的具体类型后，传递数据时，可以传入该类类型或者其子类类型</span><br><span class=\"line\">\t如果不写泛型，类型默认是Object</span><br><span class=\"line\">\t</span><br><span class=\"line\">泛型方法：</span><br><span class=\"line\">\t方法中形参类型不确定时</span><br><span class=\"line\">\t\t方案1：</span><br><span class=\"line\">\t\t\t使用类名后面定义的泛型\t\t本类中所有的方法都能用</span><br><span class=\"line\">\t\t方案2：</span><br><span class=\"line\">\t\t\t在方法申明上定义自己的泛型\t只有本方法可以用</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">泛型方法格式：</span><br><span class=\"line\">\t修饰符&lt;类型&gt;返回值类型 方法名(类型 变量名)&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t//K T V E</span><br><span class=\"line\">\tpublic &lt;T&gt; void show(T,t)&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">泛型接口：</span><br><span class=\"line\">\t格式：</span><br><span class=\"line\">\t\t修饰符 interface 接口名&lt;类型&gt;&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t举例：</span><br><span class=\"line\">\t\tpublic interface List&lt;E&gt;&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">重点：</span><br><span class=\"line\">\t如何使用一个带泛型的接口</span><br><span class=\"line\">\t</span><br><span class=\"line\">方式1：</span><br><span class=\"line\">\t实现类给出具体类型</span><br><span class=\"line\">方式2：</span><br><span class=\"line\">\t实现类延续泛型，创建对象时再确定</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Lanmbda表达式\"><a href=\"#Lanmbda表达式\" class=\"headerlink\" title=\"Lanmbda表达式\"></a>Lanmbda表达式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Lambda的省略规则</span><br><span class=\"line\">    <span class=\"number\">1.</span>参数类型可以省略不写</span><br><span class=\"line\">\t<span class=\"number\">2.</span>如果只有一个参数，参数类型可以省略，同时()也可以省略</span><br><span class=\"line\">\t<span class=\"number\">3.</span>如果Lambda表达式的方法体只有一行，大括号，分号，<span class=\"keyword\">return</span>可以省略不写，需要同时省略</span><br><span class=\"line\">    </span><br><span class=\"line\">lambda表达式的标准格式</span><br><span class=\"line\">\t() -&gt; &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">Lambda表达式的基本作用：</span><br><span class=\"line\">\tLambda表达式可以用来简化匿名内部类的书写</span><br><span class=\"line\">\tLambda表达式只能简化函数式接口的匿名内部类的书写</span><br><span class=\"line\"></span><br><span class=\"line\">Lambda表达式有什么使用前提：</span><br><span class=\"line\">    必须式接口的匿名内部类，接口中只能有一个抽象方法</span><br><span class=\"line\">    </span><br><span class=\"line\">Lambda的好处：</span><br><span class=\"line\">    Lambda是一个匿名函数，我们可以把Lambda表达式理解为是一段可以传递的代码，它可以写出更简洁，更灵活的代码，作为一种更紧凑的代码风格，使Java语言表达能力得到了提升</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"计算机存储规则\"><a href=\"#计算机存储规则\" class=\"headerlink\" title=\"计算机存储规则\"></a>计算机存储规则</h3><p><img src=\"/posts/737a1d74/Users\\Mr.Q\\Pictures\\java\\Snipaste_2023-03-04_14-40-29.png\" alt=\"Snipaste_2023-03-04_14-40-29\"></p>\n<h3 id=\"重新认识main方法\"><a href=\"#重新认识main方法\" class=\"headerlink\" title=\"重新认识main方法\"></a>重新认识main方法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public:</span><br><span class=\"line\">\t被jvm调用，访问权限足够大</span><br><span class=\"line\">static：</span><br><span class=\"line\">\t被jvm调用，不用创建对象，直接类名访问</span><br><span class=\"line\">\t因为main方法是静态的，所以测试类中其他方法也需要是静态的</span><br><span class=\"line\">void：</span><br><span class=\"line\">\t被jvm调用，不需要给返回值</span><br><span class=\"line\">main：</span><br><span class=\"line\">\t一个通用的名称，虽然不是关键字，但是被jvm识别</span><br><span class=\"line\">String[] args：</span><br><span class=\"line\">\t以前用于接收键盘录入数据的，现在没用</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"重写\"><a href=\"#重写\" class=\"headerlink\" title=\"重写\"></a>重写</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方法的重写</span><br><span class=\"line\">\t当父类的方法不能满足子类现在的需求时，需要进行方法的重写</span><br><span class=\"line\">书写格式</span><br><span class=\"line\">\t在继承体系中，子类出现了和父类一样的方法声明，我们就称为子类这个方法是重写的方法</span><br><span class=\"line\"></span><br><span class=\"line\">@Override重写注解</span><br><span class=\"line\">\t1.@Override是重写后的方法上，校验子类重写时语法是否正确</span><br><span class=\"line\">\t2.加上注解后如果有红色波浪线，表示语法错误</span><br><span class=\"line\">\t3.建议重写方法都加@Override注解，代码安全，优雅。</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override重写注解</span><br><span class=\"line\">\t1.@Override是重写后的方法上，校验子类重写时语法是否正确</span><br><span class=\"line\">\t2.加上注解后如果有红色波浪线，表示语法错误</span><br><span class=\"line\">\t3.建议重写方法都加@Override注解，代码安全，优雅。</span><br><span class=\"line\"></span><br><span class=\"line\">@FunctionalInterface函数式接口（Lambda表达式的时候使用）</span><br><span class=\"line\">\t有且仅有一个抽象方法的接口叫做函数式接口，接口上方可以加\t@FunctionalInterface注解判断</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"包\"><a href=\"#包\" class=\"headerlink\" title=\"包\"></a>包</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用其他类的规则</span><br><span class=\"line\">\t使用同一个包中的类时，不需要导包</span><br><span class=\"line\">\t使用java.lang包中的类时，不需要导包</span><br><span class=\"line\">\t其他情况都需要导包</span><br><span class=\"line\">\t如果同时使用两个包中的同名类，需要使用全类名</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">代码块的分类</span><br><span class=\"line\">\t局部代码块，构造代码块，静态代码块</span><br><span class=\"line\">\t</span><br><span class=\"line\">局部代码块</span><br><span class=\"line\">\t提前结束变量的生命周期（已经淘汰）</span><br><span class=\"line\">构造代码块</span><br><span class=\"line\">\t抽取构造方法中的重复代码（不够灵活）</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">静态代码块</span><br><span class=\"line\">\t数据的初始化 </span><br><span class=\"line\">\t\t<span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"抽象类（abstract）\"><a href=\"#抽象类（abstract）\" class=\"headerlink\" title=\"抽象类（abstract）\"></a>抽象类（abstract）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">抽象类的作用是什么</span><br><span class=\"line\">\t抽取共性时，无法确定方法体，就把方法定义为抽象的。</span><br><span class=\"line\">\t强制让子类按照某种格式重写</span><br><span class=\"line\">\t抽象方法所在的类，必须时抽象类</span><br><span class=\"line\"></span><br><span class=\"line\">抽象类和抽象方法的格式</span><br><span class=\"line\">\tpublic abstract 返回值类型 方法名(参数列表);</span><br><span class=\"line\">\tpublic abstract class 类名&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">继承抽象类有哪些要注意</span><br><span class=\"line\">\t要么重写抽象类中所有的方法</span><br><span class=\"line\">\t要么时抽象类</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">设计模式是一套被反复使用，多数人知晓的，经过分类编目的，代码设计经验的总结。使用设计模式是为了可重用代码，让代码更容易被他人理解，保证代码可靠性，程序的重用性</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"适配器设计模式\"><a href=\"#适配器设计模式\" class=\"headerlink\" title=\"适配器设计模式\"></a>适配器设计模式</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解决接口与接口实现类之间的矛盾问题</span><br><span class=\"line\">\t</span><br><span class=\"line\">当一个接口中抽象方法过多，但是我只要使用其中一部分的时候，就可以适配器设计模式</span><br><span class=\"line\">\t</span><br><span class=\"line\">书写步骤 </span><br><span class=\"line\">\t编写中间类XXXAdapter，实现对应的接口</span><br><span class=\"line\">\t对接口中的抽象方法进行空实现</span><br><span class=\"line\">\t让真正的实现类继承中间类，并重写需要用的方法</span><br><span class=\"line\">\t为了避免其他类创建适配器类的对象，中间的适配器类</span><br><span class=\"line\">\t用abstract进行修饰</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"内部类\"><a href=\"#内部类\" class=\"headerlink\" title=\"内部类\"></a>内部类</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类的五大成员：</span><br><span class=\"line\">\t属性，方法，构造方法，代码块，内部类</span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">内部类</span><br><span class=\"line\">\t表示的事物是外部类的一部分</span><br><span class=\"line\">\t内部类单独出现没有意义</span><br><span class=\"line\">\t</span><br><span class=\"line\">内部类的访问特点</span><br><span class=\"line\">\t内部类可以直接访问外部类的成员，包括私有</span><br><span class=\"line\">\t外部类要访问内部类的成员，必须创建对象</span><br><span class=\"line\">\t</span><br><span class=\"line\">成员内部类</span><br><span class=\"line\">\t写在成员位置，属于外部类的成员</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t获取成员内部类对象的两种方式</span><br><span class=\"line\">\t\t方式一：</span><br><span class=\"line\">\t\t\t当成员内部类被private修饰时</span><br><span class=\"line\">\t\t\t在外部类中编写方法，对外提供内部类的对象</span><br><span class=\"line\">\t\t方式二：</span><br><span class=\"line\">\t\t\t当成员内部类被非私有修饰时，直接创建对象</span><br><span class=\"line\">\t\t\tOuter.Inner oi = new Outter().new Inner();直接创建对象</span><br><span class=\"line\">\t外部类成员变量和内部类成员变量重名时，在内部类中如何访问</span><br><span class=\"line\">\t\tSystem.out.pringln(Outer.this.变量名);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">静态内部类</span><br><span class=\"line\"></span><br><span class=\"line\">局部内部类</span><br><span class=\"line\"></span><br><span class=\"line\">匿名内部类</span><br><span class=\"line\">\t什么是匿名内部类：</span><br><span class=\"line\">\t\t隐藏了名字的内部类，可以写在成员位置，也可以写在局部位置</span><br><span class=\"line\">\t匿名内部类的格式：</span><br><span class=\"line\">\t\tnew 类名或者接口名()&#123;</span><br><span class=\"line\">\t\t\t重写方法;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t格式的细节</span><br><span class=\"line\">\t\t包含了继承或实现，方法重写，创建对象。</span><br><span class=\"line\">\t\t整体就是一个类的子类对象或者接口的实现类对象</span><br><span class=\"line\">\t使用场景</span><br><span class=\"line\">\t\t当方法的参数是接口或者类时</span><br><span class=\"line\">\t\t以接口为例，可以传递这个接口的实现类对象，</span><br><span class=\"line\">\t\t如果实现类只使用一次，就可以用匿名内部类简化代码</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">事件源：</span><br><span class=\"line\">\t按钮 图片 窗体...</span><br><span class=\"line\">事件：某些操作</span><br><span class=\"line\">\t如：鼠标单击，鼠标划入...</span><br><span class=\"line\">绑定监听：</span><br><span class=\"line\">\t当事件源上发生了某个事件，则执行某段代码</span><br><span class=\"line\">\t</span><br><span class=\"line\">KeryListener</span><br><span class=\"line\">\t键盘监听</span><br><span class=\"line\">MouseListener</span><br><span class=\"line\">\t鼠标监听</span><br><span class=\"line\">\t\t\t划入动作</span><br><span class=\"line\">\t\t\t按下动作</span><br><span class=\"line\">\t\t\t松开动作</span><br><span class=\"line\">\t\t\thua&#x27;chu</span><br><span class=\"line\">ActionListener</span><br><span class=\"line\">\t动作监听</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h3><h4 id=\"BigInteger\"><a href=\"#BigInteger\" class=\"headerlink\" title=\"BigInteger\"></a>BigInteger</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigInteger构造方法\t\t注意：对象一旦创建，内部的值不能发生改变</span><br><span class=\"line\">\tpublic BigInteger(int num, Random rnd)\t\t获取随机大整数 范围：[0~2的num次方-1]</span><br><span class=\"line\">\tpublic BigInteger(String val)\t\t\t\t获取指定的大整数</span><br><span class=\"line\">\tpublic BigInteger(String val, int radix) \t获取指定进制的大整数</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static BigInteger valueOf(long val)\t静态方法获取BigInteger的对象，内部有优化</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tBigInteger构造方法小结</span><br><span class=\"line\">\t\t如果BigInteger表示的数字没有超出long的范围，可以用静态方法获取</span><br><span class=\"line\">\t\t如果BigInteger表示的超出long的范围，可以用构造方法获取</span><br><span class=\"line\">\t\t对象一旦创建，BigInteger内部记录的值不能发生改变</span><br><span class=\"line\">\t\t只要进行计算都会产生一个新的BigInteger对象</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">BigInteger成员方法</span><br><span class=\"line\">\tpublic BigInteger add(BigInteger val)\t\t\t\t\t加法</span><br><span class=\"line\">\tpublic BigInteger subtract(BigInteger val)\t\t\t\t减法</span><br><span class=\"line\">\tpublic BigInteger multiply(BigInteger val)\t\t\t\t乘法</span><br><span class=\"line\">\tpublic BigInteger divide(BigInteger val)\t\t\t\t除法，获取商</span><br><span class=\"line\">\tpublic BigInteger divideAndRemainder(BigInteger val)\t除法，获取商和余数</span><br><span class=\"line\">\tpublic BigInteger equals(Object x)\t\t\t\t\t\t比较是否相同</span><br><span class=\"line\">\tpublic BigInteger pow(int exponent)\t\t\t\t\t\t次幂</span><br><span class=\"line\">\tpublic BigInteger max/min(BigInteger val)\t\t\t\t返回较大值/较小值</span><br><span class=\"line\">\tpublic int intValue(BigInteger val)\t\t\t\t\t\t转为int类型整数，超出范围数据有误</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"包装类\"><a href=\"#包装类\" class=\"headerlink\" title=\"包装类\"></a>包装类</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8种包装类中除了Character都有对应的parseXxx的方法进行类型</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Integer\"><a href=\"#Integer\" class=\"headerlink\" title=\"Integer\"></a>Integer</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer的成员方法</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">ToBinaryString</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span>\t\t\t得到二进制</span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">ToOctalString</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span>\t\t\t得到八进制</span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">ToHexString</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span>\t\t\t\t得到十六进制</span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">parseInt</span><span class=\"params\">(String s)</span>\t\t\t\t将字符串类型的整数转成<span class=\"keyword\">int</span>类型的整数</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一轮：</span><br><span class=\"line\">\t把<span class=\"number\">0</span>索引的数字作为基准数，确定基准数在数组中正确的位置。</span><br><span class=\"line\">\t比基准数小的全部在左边，比基准数大的全部在右边。</span><br><span class=\"line\">\t代码：</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 定义两个变量记录要查找的范围</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> start = i;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> end = j;</span><br><span class=\"line\">        <span class=\"comment\">//递归的出口</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (start &gt; end)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 记录基准数的值</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> baseNumber = arr[i];</span><br><span class=\"line\">        <span class=\"comment\">// 利用循环找到要交换的数字   5   3  2  7  6</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (start != end) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 利用end，从后往前开始找，找比基准数小的数字</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (end &lt;= start || arr[end] &lt; baseNumber) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                end--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 利用start，从前往后找，找比基准数大的数字</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (start &gt;= end || arr[start] &gt; baseNumber) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                start++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 把end和start指向的元素进行交换</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp = arr[start];</span><br><span class=\"line\">            arr[start] = arr[end];</span><br><span class=\"line\">            arr[end] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 当start和end指向了同一个元素的时候，那么上面的循环就会结束</span></span><br><span class=\"line\">        <span class=\"comment\">// 表示已经找到了基准数在数组中应存的位置</span></span><br><span class=\"line\">        <span class=\"comment\">// 基准数归位</span></span><br><span class=\"line\">        <span class=\"comment\">//就是拿着这个范围中的第一个数字，跟start指向的元素进行交换</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = arr[start];</span><br><span class=\"line\">        arr[start] = baseNumber;</span><br><span class=\"line\">        arr[i] = temp;</span><br><span class=\"line\">        <span class=\"comment\">//确定6左边的范围，重复刚刚所做的事情</span></span><br><span class=\"line\">        quickSort(arr,i,start-<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//确定6右边的范围，重复刚刚所做的事情</span></span><br><span class=\"line\">        quickSort(arr,start+<span class=\"number\">1</span>,j);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t\t</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"工具类\"><a href=\"#工具类\" class=\"headerlink\" title=\"工具类\"></a>工具类</h2><h3 id=\"Arrays\"><a href=\"#Arrays\" class=\"headerlink\" title=\"Arrays\"></a>Arrays</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">操作数组的工具类：</span><br><span class=\"line\">public static String toString(数组)  把数组拼接成一个字符串</span><br><span class=\"line\">public static int binarySearch(数组,查找的元素)\t二分法查找元素</span><br><span class=\"line\">public static int[] copyOf(原数组, 新数组长度)\t拷贝数组</span><br><span class=\"line\">public static int[] copyOfRange(原数组,起始索引，结束索引)\t拷贝数组（指定范围）</span><br><span class=\"line\">public static void fill(数组,元素)\t填充数组</span><br><span class=\"line\">public static void sort(数组)\t按照默认方式进行数组排序</span><br><span class=\"line\">public static void sort(数组,排序规则)\t按照指定的规则排序</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据结构（红黑树）\"><a href=\"#数据结构（红黑树）\" class=\"headerlink\" title=\"数据结构（红黑树）\"></a>数据结构（红黑树）</h3><p><img src=\"/posts/737a1d74/Users\\Mr.Q\\Pictures\\java\\Snipaste_2023-03-20_08-42-16.png\" alt=\"Snipaste_2023-03-20_08-42-16\"></p>\n","categories":[],"tags":[]}