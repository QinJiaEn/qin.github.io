{"title":"八股文-框架篇","slug":"八股文-框架篇","date":"2023-07-24T09:43:38.000Z","updated":"2023-07-27T10:06:10.434Z","comments":true,"path":"api/articles/八股文-框架篇.json","excerpt":null,"covers":["/posts/90abcb0a/image-20230724174617036.png","/posts/90abcb0a/image-20230724175230927.png","/posts/90abcb0a/image-20230724175410989.png","/posts/90abcb0a/image-20230724175759872.png","/posts/90abcb0a/image-20230724180948505.png","/posts/90abcb0a/image-20230724180552118.png","/posts/90abcb0a/image-20230724182222137.png","/posts/90abcb0a/image-20230724182512757.png","/posts/90abcb0a/image-20230724194544508.png","/posts/90abcb0a/image-20230724203138282.png","/posts/90abcb0a/image-20230724204637165.png","/posts/90abcb0a/image-20230724210930952.png","/posts/90abcb0a/image-20230724211242950.png","/posts/90abcb0a/image-20230724212156129.png","/posts/90abcb0a/image-20230724211516842.png","/posts/90abcb0a/image-20230724212300102.png","/posts/90abcb0a/image-20230727110216531.png","/posts/90abcb0a/image-20230727110548350.png","/posts/90abcb0a/image-20230727111652765.png","/posts/90abcb0a/image-20230727113821618.png","/posts/90abcb0a/image-20230727114228908.png","/posts/90abcb0a/image-20230727114334823.png","/posts/90abcb0a/image-20230727114511263.png","/posts/90abcb0a/image-20230727114649280.png","/posts/90abcb0a/image-20230727115716199.png","/posts/90abcb0a/image-20230727115821892.png","/posts/90abcb0a/image-20230727121957399.png","/posts/90abcb0a/image-20230727122106946.png","/posts/90abcb0a/image-20230727122434434.png","/posts/90abcb0a/image-20230727171428335.png","/posts/90abcb0a/image-20230727172538700.png","/posts/90abcb0a/image-20230727172642563.png"],"content":"<h1 id=\"框架篇\"><a href=\"#框架篇\" class=\"headerlink\" title=\"框架篇\"></a>框架篇</h1><p><img src=\"/posts/90abcb0a/image-20230724174617036.png\" alt=\"image-20230724174617036\"></p>\n<h2 id=\"Spring\"><a href=\"#Spring\" class=\"headerlink\" title=\"Spring\"></a>Spring</h2><h3 id=\"Spring框架中的单例Bean是线程安全的吗？\"><a href=\"#Spring框架中的单例Bean是线程安全的吗？\" class=\"headerlink\" title=\"Spring框架中的单例Bean是线程安全的吗？\"></a>Spring框架中的单例Bean是线程安全的吗？</h3><p><img src=\"/posts/90abcb0a/image-20230724175230927.png\" alt=\"image-20230724175230927\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">不是线程安全的</span><br><span class=\"line\">Spring框架中有一个 @Scope 注解，默认的值就是 singleton 单例的，因为一般在 Spring 的 bean 中都是注入无状态的对象，没有线程安全问题，如果在 bean 中定义了可修改的成员变量，是要考虑线程安全问题的，可以使用多例或者加锁来解决</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"e-g\"><a href=\"#e-g\" class=\"headerlink\" title=\"e.g\"></a>e.g</h4><p><img src=\"/posts/90abcb0a/image-20230724175410989.png\" alt=\"image-20230724175410989\"></p>\n<h3 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h3><p><img src=\"/posts/90abcb0a/image-20230724175759872.png\" alt=\"image-20230724175759872\"></p>\n<p><img src=\"/posts/90abcb0a/image-20230724180948505.png\" alt=\"image-20230724180948505\"></p>\n<h3 id=\"Spring中的事务如何实现\"><a href=\"#Spring中的事务如何实现\" class=\"headerlink\" title=\"Spring中的事务如何实现\"></a>Spring中的事务如何实现</h3><p><img src=\"/posts/90abcb0a/image-20230724180552118.png\" alt=\"image-20230724180552118\"></p>\n<h3 id=\"Spring中事务失效场景\"><a href=\"#Spring中事务失效场景\" class=\"headerlink\" title=\"Spring中事务失效场景\"></a>Spring中事务失效场景</h3><p><strong>异常捕获处理</strong></p>\n<p><img src=\"/posts/90abcb0a/image-20230724182222137.png\" alt=\"image-20230724182222137\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原因：</span><br><span class=\"line\">\t自己手动处理了异常try掉了，没有抛出异常</span><br><span class=\"line\">解决：</span><br><span class=\"line\">\t手动抛出异常</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>抛出检查异常</strong></p>\n<p><img src=\"/posts/90abcb0a/image-20230724182512757.png\" alt=\"image-20230724182512757\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原因：</span><br><span class=\"line\">\tSpring默认只会回滚非检查异常</span><br><span class=\"line\">解决:</span><br><span class=\"line\">\t配置rollbackFor属性</span><br><span class=\"line\">\t<span class=\"meta\">@Transaction(rollbackFor = Exception.class)</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>非public方法</strong></p>\n<p><img src=\"/posts/90abcb0a/image-20230724194544508.png\" alt=\"image-20230724194544508\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原因：</span><br><span class=\"line\">\tSpring 为方法创建代理，添加事务通知，前提条件都是该方法是public的</span><br><span class=\"line\">\t</span><br><span class=\"line\">解决：</span><br><span class=\"line\">\t改为public   不写默认是defult</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Spring-中-Bean-的生命周期\"><a href=\"#Spring-中-Bean-的生命周期\" class=\"headerlink\" title=\"Spring 中 Bean 的生命周期\"></a>Spring 中 Bean 的生命周期</h3><p><img src=\"/posts/90abcb0a/image-20230724203138282.png\" alt=\"image-20230724203138282\"></p>\n<p><img src=\"/posts/90abcb0a/image-20230724204637165.png\" alt=\"image-20230724204637165\"></p>\n<h3 id=\"Spring-的循环引用\"><a href=\"#Spring-的循环引用\" class=\"headerlink\" title=\"Spring 的循环引用\"></a>Spring 的循环引用</h3><p><img src=\"/posts/90abcb0a/image-20230724210930952.png\" alt=\"image-20230724210930952\"></p>\n<h4 id=\"三级缓存解决循环依赖\"><a href=\"#三级缓存解决循环依赖\" class=\"headerlink\" title=\"三级缓存解决循环依赖\"></a>三级缓存解决循环依赖</h4><p><img src=\"/posts/90abcb0a/image-20230724211242950.png\" alt=\"image-20230724211242950\"></p>\n<p><img src=\"/posts/90abcb0a/image-20230724212156129.png\" alt=\"image-20230724212156129\"></p>\n<p><strong>用一级缓存和二级缓存解决</strong></p>\n<p><img src=\"/posts/90abcb0a/image-20230724211516842.png\" alt=\"image-20230724211516842\"></p>\n<h4 id=\"构造方法出现循环依赖\"><a href=\"#构造方法出现循环依赖\" class=\"headerlink\" title=\"构造方法出现循环依赖\"></a>构造方法出现循环依赖</h4><p><img src=\"/posts/90abcb0a/image-20230724212300102.png\" alt=\"image-20230724212300102\"></p>\n<h3 id=\"Spring-MVC-的执行流程\"><a href=\"#Spring-MVC-的执行流程\" class=\"headerlink\" title=\"Spring MVC 的执行流程\"></a>Spring MVC 的执行流程</h3><h4 id=\"视图阶段-JSP\"><a href=\"#视图阶段-JSP\" class=\"headerlink\" title=\"视图阶段(JSP)\"></a>视图阶段(JSP)</h4><p><img src=\"/posts/90abcb0a/image-20230727110216531.png\" alt=\"image-20230727110216531\"></p>\n<h4 id=\"前后端分离阶段（接口开发，异步请求）\"><a href=\"#前后端分离阶段（接口开发，异步请求）\" class=\"headerlink\" title=\"前后端分离阶段（接口开发，异步请求）\"></a>前后端分离阶段（接口开发，异步请求）</h4><p><img src=\"/posts/90abcb0a/image-20230727110548350.png\" alt=\"image-20230727110548350\"></p>\n<p><img src=\"/posts/90abcb0a/image-20230727111652765.png\" alt=\"image-20230727111652765\"></p>\n<h3 id=\"Spring-Boot-自动配置原理\"><a href=\"#Spring-Boot-自动配置原理\" class=\"headerlink\" title=\"Spring Boot 自动配置原理\"></a>Spring Boot 自动配置原理</h3><p><img src=\"/posts/90abcb0a/image-20230727113821618.png\" alt=\"image-20230727113821618\"></p>\n<p><img src=\"/posts/90abcb0a/image-20230727114228908.png\" alt=\"image-20230727114228908\"></p>\n<h3 id=\"常见注解\"><a href=\"#常见注解\" class=\"headerlink\" title=\"常见注解\"></a>常见注解</h3><h4 id=\"Spring中常见注解\"><a href=\"#Spring中常见注解\" class=\"headerlink\" title=\"Spring中常见注解\"></a>Spring中常见注解</h4><p><img src=\"/posts/90abcb0a/image-20230727114334823.png\" alt=\"image-20230727114334823\"></p>\n<h4 id=\"SpringMVC-常见注解\"><a href=\"#SpringMVC-常见注解\" class=\"headerlink\" title=\"SpringMVC 常见注解\"></a>SpringMVC 常见注解</h4><p><img src=\"/posts/90abcb0a/image-20230727114511263.png\" alt=\"image-20230727114511263\"></p>\n<h4 id=\"SpringBoot-常见注解\"><a href=\"#SpringBoot-常见注解\" class=\"headerlink\" title=\"SpringBoot 常见注解\"></a>SpringBoot 常见注解</h4><p><img src=\"/posts/90abcb0a/image-20230727114649280.png\" alt=\"image-20230727114649280\"></p>\n<h2 id=\"Mybatis\"><a href=\"#Mybatis\" class=\"headerlink\" title=\"Mybatis\"></a>Mybatis</h2><h3 id=\"Mybatis的执行流程\"><a href=\"#Mybatis的执行流程\" class=\"headerlink\" title=\"Mybatis的执行流程\"></a>Mybatis的执行流程</h3><p><img src=\"/posts/90abcb0a/image-20230727115716199.png\" alt=\"image-20230727115716199\"></p>\n<p><img src=\"/posts/90abcb0a/image-20230727115821892.png\" alt=\"image-20230727115821892\"></p>\n<h3 id=\"Mybatis延迟加载\"><a href=\"#Mybatis延迟加载\" class=\"headerlink\" title=\"Mybatis延迟加载\"></a>Mybatis延迟加载</h3><p><img src=\"/posts/90abcb0a/image-20230727121957399.png\" alt=\"image-20230727121957399\"></p>\n<p><img src=\"/posts/90abcb0a/image-20230727122106946.png\" alt=\"image-20230727122106946\"></p>\n<h3 id=\"Mybatis的一级缓存和二级缓存\"><a href=\"#Mybatis的一级缓存和二级缓存\" class=\"headerlink\" title=\"Mybatis的一级缓存和二级缓存\"></a>Mybatis的一级缓存和二级缓存</h3><h4 id=\"一级缓存\"><a href=\"#一级缓存\" class=\"headerlink\" title=\"一级缓存\"></a>一级缓存</h4><p><img src=\"/posts/90abcb0a/image-20230727122434434.png\" alt=\"image-20230727122434434\"></p>\n<h4 id=\"二级缓存\"><a href=\"#二级缓存\" class=\"headerlink\" title=\"二级缓存\"></a>二级缓存</h4><p><img src=\"/posts/90abcb0a/image-20230727171428335.png\" alt=\"image-20230727171428335\"></p>\n<p><img src=\"/posts/90abcb0a/image-20230727172538700.png\" alt=\"image-20230727172538700\"></p>\n<p><img src=\"/posts/90abcb0a/image-20230727172642563.png\" alt=\"image-20230727172642563\"></p>\n","more":"<h1 id=\"框架篇\"><a href=\"#框架篇\" class=\"headerlink\" title=\"框架篇\"></a>框架篇</h1><p><img src=\"/posts/90abcb0a/image-20230724174617036.png\" alt=\"image-20230724174617036\"></p>\n<h2 id=\"Spring\"><a href=\"#Spring\" class=\"headerlink\" title=\"Spring\"></a>Spring</h2><h3 id=\"Spring框架中的单例Bean是线程安全的吗？\"><a href=\"#Spring框架中的单例Bean是线程安全的吗？\" class=\"headerlink\" title=\"Spring框架中的单例Bean是线程安全的吗？\"></a>Spring框架中的单例Bean是线程安全的吗？</h3><p><img src=\"/posts/90abcb0a/image-20230724175230927.png\" alt=\"image-20230724175230927\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">不是线程安全的</span><br><span class=\"line\">Spring框架中有一个 @Scope 注解，默认的值就是 singleton 单例的，因为一般在 Spring 的 bean 中都是注入无状态的对象，没有线程安全问题，如果在 bean 中定义了可修改的成员变量，是要考虑线程安全问题的，可以使用多例或者加锁来解决</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"e-g\"><a href=\"#e-g\" class=\"headerlink\" title=\"e.g\"></a>e.g</h4><p><img src=\"/posts/90abcb0a/image-20230724175410989.png\" alt=\"image-20230724175410989\"></p>\n<h3 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h3><p><img src=\"/posts/90abcb0a/image-20230724175759872.png\" alt=\"image-20230724175759872\"></p>\n<p><img src=\"/posts/90abcb0a/image-20230724180948505.png\" alt=\"image-20230724180948505\"></p>\n<h3 id=\"Spring中的事务如何实现\"><a href=\"#Spring中的事务如何实现\" class=\"headerlink\" title=\"Spring中的事务如何实现\"></a>Spring中的事务如何实现</h3><p><img src=\"/posts/90abcb0a/image-20230724180552118.png\" alt=\"image-20230724180552118\"></p>\n<h3 id=\"Spring中事务失效场景\"><a href=\"#Spring中事务失效场景\" class=\"headerlink\" title=\"Spring中事务失效场景\"></a>Spring中事务失效场景</h3><p><strong>异常捕获处理</strong></p>\n<p><img src=\"/posts/90abcb0a/image-20230724182222137.png\" alt=\"image-20230724182222137\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原因：</span><br><span class=\"line\">\t自己手动处理了异常try掉了，没有抛出异常</span><br><span class=\"line\">解决：</span><br><span class=\"line\">\t手动抛出异常</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>抛出检查异常</strong></p>\n<p><img src=\"/posts/90abcb0a/image-20230724182512757.png\" alt=\"image-20230724182512757\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原因：</span><br><span class=\"line\">\tSpring默认只会回滚非检查异常</span><br><span class=\"line\">解决:</span><br><span class=\"line\">\t配置rollbackFor属性</span><br><span class=\"line\">\t<span class=\"meta\">@Transaction(rollbackFor = Exception.class)</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>非public方法</strong></p>\n<p><img src=\"/posts/90abcb0a/image-20230724194544508.png\" alt=\"image-20230724194544508\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原因：</span><br><span class=\"line\">\tSpring 为方法创建代理，添加事务通知，前提条件都是该方法是public的</span><br><span class=\"line\">\t</span><br><span class=\"line\">解决：</span><br><span class=\"line\">\t改为public   不写默认是defult</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Spring-中-Bean-的生命周期\"><a href=\"#Spring-中-Bean-的生命周期\" class=\"headerlink\" title=\"Spring 中 Bean 的生命周期\"></a>Spring 中 Bean 的生命周期</h3><p><img src=\"/posts/90abcb0a/image-20230724203138282.png\" alt=\"image-20230724203138282\"></p>\n<p><img src=\"/posts/90abcb0a/image-20230724204637165.png\" alt=\"image-20230724204637165\"></p>\n<h3 id=\"Spring-的循环引用\"><a href=\"#Spring-的循环引用\" class=\"headerlink\" title=\"Spring 的循环引用\"></a>Spring 的循环引用</h3><p><img src=\"/posts/90abcb0a/image-20230724210930952.png\" alt=\"image-20230724210930952\"></p>\n<h4 id=\"三级缓存解决循环依赖\"><a href=\"#三级缓存解决循环依赖\" class=\"headerlink\" title=\"三级缓存解决循环依赖\"></a>三级缓存解决循环依赖</h4><p><img src=\"/posts/90abcb0a/image-20230724211242950.png\" alt=\"image-20230724211242950\"></p>\n<p><img src=\"/posts/90abcb0a/image-20230724212156129.png\" alt=\"image-20230724212156129\"></p>\n<p><strong>用一级缓存和二级缓存解决</strong></p>\n<p><img src=\"/posts/90abcb0a/image-20230724211516842.png\" alt=\"image-20230724211516842\"></p>\n<h4 id=\"构造方法出现循环依赖\"><a href=\"#构造方法出现循环依赖\" class=\"headerlink\" title=\"构造方法出现循环依赖\"></a>构造方法出现循环依赖</h4><p><img src=\"/posts/90abcb0a/image-20230724212300102.png\" alt=\"image-20230724212300102\"></p>\n<h3 id=\"Spring-MVC-的执行流程\"><a href=\"#Spring-MVC-的执行流程\" class=\"headerlink\" title=\"Spring MVC 的执行流程\"></a>Spring MVC 的执行流程</h3><h4 id=\"视图阶段-JSP\"><a href=\"#视图阶段-JSP\" class=\"headerlink\" title=\"视图阶段(JSP)\"></a>视图阶段(JSP)</h4><p><img src=\"/posts/90abcb0a/image-20230727110216531.png\" alt=\"image-20230727110216531\"></p>\n<h4 id=\"前后端分离阶段（接口开发，异步请求）\"><a href=\"#前后端分离阶段（接口开发，异步请求）\" class=\"headerlink\" title=\"前后端分离阶段（接口开发，异步请求）\"></a>前后端分离阶段（接口开发，异步请求）</h4><p><img src=\"/posts/90abcb0a/image-20230727110548350.png\" alt=\"image-20230727110548350\"></p>\n<p><img src=\"/posts/90abcb0a/image-20230727111652765.png\" alt=\"image-20230727111652765\"></p>\n<h3 id=\"Spring-Boot-自动配置原理\"><a href=\"#Spring-Boot-自动配置原理\" class=\"headerlink\" title=\"Spring Boot 自动配置原理\"></a>Spring Boot 自动配置原理</h3><p><img src=\"/posts/90abcb0a/image-20230727113821618.png\" alt=\"image-20230727113821618\"></p>\n<p><img src=\"/posts/90abcb0a/image-20230727114228908.png\" alt=\"image-20230727114228908\"></p>\n<h3 id=\"常见注解\"><a href=\"#常见注解\" class=\"headerlink\" title=\"常见注解\"></a>常见注解</h3><h4 id=\"Spring中常见注解\"><a href=\"#Spring中常见注解\" class=\"headerlink\" title=\"Spring中常见注解\"></a>Spring中常见注解</h4><p><img src=\"/posts/90abcb0a/image-20230727114334823.png\" alt=\"image-20230727114334823\"></p>\n<h4 id=\"SpringMVC-常见注解\"><a href=\"#SpringMVC-常见注解\" class=\"headerlink\" title=\"SpringMVC 常见注解\"></a>SpringMVC 常见注解</h4><p><img src=\"/posts/90abcb0a/image-20230727114511263.png\" alt=\"image-20230727114511263\"></p>\n<h4 id=\"SpringBoot-常见注解\"><a href=\"#SpringBoot-常见注解\" class=\"headerlink\" title=\"SpringBoot 常见注解\"></a>SpringBoot 常见注解</h4><p><img src=\"/posts/90abcb0a/image-20230727114649280.png\" alt=\"image-20230727114649280\"></p>\n<h2 id=\"Mybatis\"><a href=\"#Mybatis\" class=\"headerlink\" title=\"Mybatis\"></a>Mybatis</h2><h3 id=\"Mybatis的执行流程\"><a href=\"#Mybatis的执行流程\" class=\"headerlink\" title=\"Mybatis的执行流程\"></a>Mybatis的执行流程</h3><p><img src=\"/posts/90abcb0a/image-20230727115716199.png\" alt=\"image-20230727115716199\"></p>\n<p><img src=\"/posts/90abcb0a/image-20230727115821892.png\" alt=\"image-20230727115821892\"></p>\n<h3 id=\"Mybatis延迟加载\"><a href=\"#Mybatis延迟加载\" class=\"headerlink\" title=\"Mybatis延迟加载\"></a>Mybatis延迟加载</h3><p><img src=\"/posts/90abcb0a/image-20230727121957399.png\" alt=\"image-20230727121957399\"></p>\n<p><img src=\"/posts/90abcb0a/image-20230727122106946.png\" alt=\"image-20230727122106946\"></p>\n<h3 id=\"Mybatis的一级缓存和二级缓存\"><a href=\"#Mybatis的一级缓存和二级缓存\" class=\"headerlink\" title=\"Mybatis的一级缓存和二级缓存\"></a>Mybatis的一级缓存和二级缓存</h3><h4 id=\"一级缓存\"><a href=\"#一级缓存\" class=\"headerlink\" title=\"一级缓存\"></a>一级缓存</h4><p><img src=\"/posts/90abcb0a/image-20230727122434434.png\" alt=\"image-20230727122434434\"></p>\n<h4 id=\"二级缓存\"><a href=\"#二级缓存\" class=\"headerlink\" title=\"二级缓存\"></a>二级缓存</h4><p><img src=\"/posts/90abcb0a/image-20230727171428335.png\" alt=\"image-20230727171428335\"></p>\n<p><img src=\"/posts/90abcb0a/image-20230727172538700.png\" alt=\"image-20230727172538700\"></p>\n<p><img src=\"/posts/90abcb0a/image-20230727172642563.png\" alt=\"image-20230727172642563\"></p>\n","categories":[],"tags":[]}