{"title":"微服务实战","slug":"微服务实战","date":"2023-07-10T00:27:03.000Z","updated":"2023-07-10T04:18:30.451Z","comments":true,"path":"api/articles/微服务实战.json","excerpt":null,"covers":["/posts/a219ce80/image-20230710083244286.png","/posts/a219ce80/image-20230710083425232.png","/posts/a219ce80/image-20230710092437011.png","/posts/a219ce80/image-20230710092518955.png","/posts/a219ce80/image-20230710084856174.png","/posts/a219ce80/image-20230710084913048.png","/posts/a219ce80/image-20230710084925142.png","/posts/a219ce80/image-20230710085209091.png","/posts/a219ce80/image-20230710085236250.png","/posts/a219ce80/image-20230710090109319.png","/posts/a219ce80/image-20230710120135885.png","/posts/a219ce80/image-20230710121258644.png","/posts/a219ce80/image-20230710121318486.png"],"content":"<h1 id=\"实战内容\"><a href=\"#实战内容\" class=\"headerlink\" title=\"实战内容\"></a>实战内容</h1><h2 id=\"1-搭建环境\"><a href=\"#1-搭建环境\" class=\"headerlink\" title=\"1.搭建环境\"></a>1.搭建环境</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">搭建环境</span><br><span class=\"line\">1.没什么好说的，导入 SQL</span><br><span class=\"line\">2.导入项目</span><br><span class=\"line\">3.nginx 发布前端页面</span><br><span class=\"line\">\t需要注意的是在 nginx.conf 配置（如下图）</span><br><span class=\"line\">\t在http&#123;</span><br><span class=\"line\">\t\tserver&#123;</span><br><span class=\"line\">\t\t// 这里写</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t中配置server&#123;</span><br><span class=\"line\">\t\tlisten  端口号;</span><br><span class=\"line\">\t\tserver_name  localhost;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tlocation /&#123;</span><br><span class=\"line\">\t\t   root   前端项目路径;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">4.配置 nacos</span><br><span class=\"line\">\t首先引入依赖</span><br><span class=\"line\">&lt;!--nacos服务注册发现依赖--&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t然后在 application.yml 中配置 nacos 的相关配置</span><br><span class=\"line\"></span><br><span class=\"line\">\tspring:</span><br><span class=\"line\">  \t\tapplication:</span><br><span class=\"line\">    \t\tname: 服务名称</span><br><span class=\"line\">\t\tcloud:</span><br><span class=\"line\">    \t\tnacos:</span><br><span class=\"line\">      \t\tdiscovery:</span><br><span class=\"line\">        \tserver-addr: localhost:8848 # nacos地址</span><br><span class=\"line\">5.配置网关服务</span><br><span class=\"line\">\t新建 gateway 网关模块并引入依赖（同时注册进 nacos 方便拉取2服务）</span><br><span class=\"line\">\t\t&lt;!-- Spring Cloud Gateway --&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;!-- Nacos 服务注册与发现 --&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">\t并在 application.yml 中写入 gateway 相关配置</span><br><span class=\"line\"></span><br><span class=\"line\">server:</span><br><span class=\"line\">  port: 10010</span><br><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: gateway</span><br><span class=\"line\">  cloud:</span><br><span class=\"line\">    gateway:</span><br><span class=\"line\">      default-filters:</span><br><span class=\"line\">        - AddRequestHeader=authorization,2  #往请求中加请求头</span><br><span class=\"line\">      routes:</span><br><span class=\"line\">        - id: userservice</span><br><span class=\"line\">          uri: lb://userservice # 路由的地址，lb，负载均衡</span><br><span class=\"line\">          predicates:</span><br><span class=\"line\">            - Path=/user/**,/address/**</span><br><span class=\"line\"></span><br><span class=\"line\">      globalcors: # 全局的跨域处理</span><br><span class=\"line\">        add-to-simple-url-handler-mapping: true # 解决options请求被拦截问题</span><br><span class=\"line\"></span><br><span class=\"line\">        corsConfigurations:</span><br><span class=\"line\">          &#x27;[/**]&#x27;:</span><br><span class=\"line\">            allowedOrigins: # 允许哪些网站的跨域请求</span><br><span class=\"line\">              - &quot;http://localhost:9001&quot;</span><br><span class=\"line\">              - &quot;http://localhost:9002&quot;</span><br><span class=\"line\">            allowedMethods: # 允许的跨域ajax的请求方式</span><br><span class=\"line\">              - &quot;GET&quot;</span><br><span class=\"line\">              - &quot;POST&quot;</span><br><span class=\"line\">              - &quot;DELETE&quot;</span><br><span class=\"line\">              - &quot;PUT&quot;</span><br><span class=\"line\">              - &quot;OPTIONS&quot;</span><br><span class=\"line\">            allowedHeaders: &quot;*&quot; # 允许在请求中携带的头信息</span><br><span class=\"line\">            allowCredentials: true # 是否允许携带cookie</span><br><span class=\"line\">            maxAge: 360000 # 这次跨域检测的有效期</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/posts/a219ce80/image-20230710083244286.png\" alt=\"image-20230710083244286\"></p>\n<p><img src=\"/posts/a219ce80/image-20230710083425232.png\" alt=\"image-20230710083425232\"></p>\n<h3 id=\"1-1-Feign-的远程调用\"><a href=\"#1-1-Feign-的远程调用\" class=\"headerlink\" title=\"1.1 Feign 的远程调用\"></a>1.1 Feign 的远程调用</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.创建 Feign 模块</span><br><span class=\"line\">2.引入 Feign 的依赖</span><br><span class=\"line\">\t&lt;dependency&gt;</span><br><span class=\"line\">\t    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">\t    &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;/dependency&gt;</span><br><span class=\"line\">3.声明服务的接口 XxxFeignClient</span><br><span class=\"line\">\t将服务暴露的接口写入其中 路径名、方法名、请求类型、参数类型都要相同</span><br><span class=\"line\">4.在需要远程调用其他接口的服务中引入 Feign 的依赖</span><br><span class=\"line\">\t自动注入 XxxFeignClient 然后调用方法</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/posts/a219ce80/image-20230710092437011.png\" alt=\"image-20230710092437011\"></p>\n<p><img src=\"/posts/a219ce80/image-20230710092518955.png\" alt=\"image-20230710092518955\"></p>\n<h3 id=\"1-2-网关-Gateway-配置\"><a href=\"#1-2-网关-Gateway-配置\" class=\"headerlink\" title=\"1.2 网关 Gateway 配置\"></a>1.2 网关 Gateway 配置</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.创建Gateway模块</span><br><span class=\"line\">2.导入依赖</span><br><span class=\"line\">\t&lt;!-- Spring Cloud Gateway --&gt;</span><br><span class=\"line\">\t&lt;dependency&gt;</span><br><span class=\"line\">\t    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">\t    &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;/dependency&gt;</span><br><span class=\"line\">\t&lt;!-- Nacos 服务注册与发现 --&gt;</span><br><span class=\"line\">\t&lt;dependency&gt;</span><br><span class=\"line\">\t    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class=\"line\">\t    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">3.配置 application.yml </span><br><span class=\"line\">\tserver:</span><br><span class=\"line\">\t  port: 10010</span><br><span class=\"line\">\tspring:</span><br><span class=\"line\">\t  application:</span><br><span class=\"line\">\t    name: gateway</span><br><span class=\"line\">\t  cloud:</span><br><span class=\"line\">\t    gateway:</span><br><span class=\"line\">\t      default-filters:</span><br><span class=\"line\">\t        - AddRequestHeader=authorization,2</span><br><span class=\"line\">\t      routes:</span><br><span class=\"line\">\t        - id: userservice</span><br><span class=\"line\">\t          uri: lb://userservice # 路由的地址，lb，负载均衡</span><br><span class=\"line\">\t          predicates:</span><br><span class=\"line\">\t            - Path=/user/**,/address/**</span><br><span class=\"line\">\t        - id: orderservice</span><br><span class=\"line\">\t          uri: lb://orderservice</span><br><span class=\"line\">\t          predicates:</span><br><span class=\"line\">\t            - Path=/order/**,/pay/**</span><br><span class=\"line\">\t        - id: itemservice</span><br><span class=\"line\">\t          uri: lb://itemservice</span><br><span class=\"line\">\t          predicates:</span><br><span class=\"line\">\t            - Path=/item/**</span><br><span class=\"line\">\t        - id: searchservice</span><br><span class=\"line\">\t          uri: lb://searchservice</span><br><span class=\"line\">\t          predicates:</span><br><span class=\"line\">\t            - Path=/search/**</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t      globalcors: # 全局的跨域处理</span><br><span class=\"line\">\t        add-to-simple-url-handler-mapping: true # 解决options请求被拦截问题</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t        corsConfigurations:</span><br><span class=\"line\">\t          &#x27;[/**]&#x27;:</span><br><span class=\"line\">\t            allowedOrigins: # 允许哪些网站的跨域请求</span><br><span class=\"line\">\t              - &quot;http://localhost:9001&quot;</span><br><span class=\"line\">\t              - &quot;http://localhost:9002&quot;</span><br><span class=\"line\">\t            allowedMethods: # 允许的跨域ajax的请求方式</span><br><span class=\"line\">\t              - &quot;GET&quot;</span><br><span class=\"line\">\t              - &quot;POST&quot;</span><br><span class=\"line\">\t              - &quot;DELETE&quot;</span><br><span class=\"line\">\t              - &quot;PUT&quot;</span><br><span class=\"line\">\t              - &quot;OPTIONS&quot;</span><br><span class=\"line\">\t            allowedHeaders: &quot;*&quot; # 允许在请求中携带的头信息</span><br><span class=\"line\">\t            allowCredentials: true # 是否允许携带cookie</span><br><span class=\"line\">\t            maxAge: 360000 # 这次跨域检测的有效期</span><br><span class=\"line\">\t</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-3-配置-ES-客户端\"><a href=\"#1-3-配置-ES-客户端\" class=\"headerlink\" title=\"1.3 配置 ES 客户端\"></a>1.3 配置 ES 客户端</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.引入依赖</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--elasticsearch--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;elasticsearch-rest-high-level-client&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">2.编写配置类</span><br><span class=\"line\"></span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">public class ElasticsearchConfig &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public RestHighLevelClient restHighLevelClient() &#123;</span><br><span class=\"line\">        return new RestHighLevelClient(RestClient.builder(</span><br><span class=\"line\">                HttpHost.create(&quot;http://192.168.150.105:9200&quot;)</span><br><span class=\"line\">        ));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">然后在其他地方</span><br><span class=\"line\">@Autowired</span><br><span class=\"line\">private RestHighLevelClient restHighLevelClient;</span><br><span class=\"line\">注入</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-4-配置RabbitMQ\"><a href=\"#1-4-配置RabbitMQ\" class=\"headerlink\" title=\"1.4 配置RabbitMQ\"></a>1.4 配置RabbitMQ</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 引入依赖</span><br><span class=\"line\">&lt;!--amqp--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">2.编写MQ的监听（将交换机和队列进行绑定，基于注解方式）</span><br><span class=\"line\"></span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class ItemLinstter &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private SearchService searchService;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RabbitListener(bindings = @QueueBinding(</span><br><span class=\"line\">            exchange = @Exchange(name = MqConstants.HMALL_EXCHANGE, type = ExchangeTypes.TOPIC),</span><br><span class=\"line\">            value = @Queue(name = MqConstants.HMALL_INSERT_QUEUE),</span><br><span class=\"line\">            key = &#123;MqConstants.HMALL_INSERT_KEY&#125;</span><br><span class=\"line\">    ))</span><br><span class=\"line\">    public void linsterIemUp(Long id) &#123;</span><br><span class=\"line\">        searchService.saveItemById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RabbitListener(bindings = @QueueBinding(</span><br><span class=\"line\">            value = @Queue(name = MqConstants.HMALL_DELETTE_QUEUE),</span><br><span class=\"line\">            exchange = @Exchange(name = MqConstants.HMALL_EXCHANGE, type = ExchangeTypes.TOPIC),</span><br><span class=\"line\">            key = &#123;MqConstants.HMALL_DELETE_KEY&#125;</span><br><span class=\"line\">    ))</span><br><span class=\"line\">    public void linsterIemDown(Long id) &#123;</span><br><span class=\"line\">        searchService.deleteItemById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"2-商品管理服务\"><a href=\"#2-商品管理服务\" class=\"headerlink\" title=\"2.商品管理服务\"></a>2.商品管理服务</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">今天没什么好写的，因为用了 MP 框架</span><br><span class=\"line\">对于单表的增删改查很容易</span><br><span class=\"line\">要注意</span><br><span class=\"line\">在 XxxMapper 的接口上要 extends BaseMapper&lt;实体类名&gt;</span><br><span class=\"line\">（数据库的实体类映射）</span><br><span class=\"line\">在 XxxService 的接口上是 extends IService&lt;实体类名&gt;</span><br><span class=\"line\">在 XxxServiceImpl 的实现类上是 extends ServiceImpl&lt;XxxMapper,实体类&gt; 并且同时 implements XxxService</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/posts/a219ce80/image-20230710084856174.png\" alt=\"image-20230710084856174\"></p>\n<p><img src=\"/posts/a219ce80/image-20230710084913048.png\" alt=\"image-20230710084913048\"></p>\n<p><img src=\"/posts/a219ce80/image-20230710084925142.png\" alt=\"image-20230710084925142\"></p>\n<h2 id=\"3-搜索业务\"><a href=\"#3-搜索业务\" class=\"headerlink\" title=\"3.搜索业务\"></a>3.搜索业务</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">上强度开始</span><br><span class=\"line\">1.创建索引库</span><br><span class=\"line\">\t首先根据数据库表结构设计出 ES 的索引表结构</span><br><span class=\"line\">\t\t其中设计了后边要用的关键字搜索 </span><br><span class=\"line\">\t\t设计了 all 字段，参与搜索</span><br><span class=\"line\">\t\t&quot;all&quot;: &#123;</span><br><span class=\"line\">        \t&quot;type&quot;: &quot;text&quot;,</span><br><span class=\"line\">        \t&quot;analyzer&quot;: &quot;text_analyzer&quot;,</span><br><span class=\"line\">        \t&quot;search_analyzer&quot;: &quot;ik_smart&quot;</span><br><span class=\"line\">     \t &#125;</span><br><span class=\"line\">    \t在其他字段下 写  ”copy_to“: &quot;all&quot;</span><br><span class=\"line\">    \t使其他字段在查询的时候参与查询</span><br><span class=\"line\">    同时还设置了 py 分词器，以便在搜索框搜索的时候可以使用拼音搜索</span><br><span class=\"line\">    </span><br><span class=\"line\">2.导入数据</span><br><span class=\"line\">\t大体思路就是</span><br><span class=\"line\">\t\t2.1将其他服务写好的查询数据库的全部数据的接口暴露给 Feign</span><br><span class=\"line\">\t\t2.2然后在需要导入数据的服务中引入 Feign 的依赖</span><br><span class=\"line\">\t\t2.3调用 Feign 的接口\t（Feign如何操作见1.1模块）</span><br><span class=\"line\">\t\t2.4通过 RestHighLevelClient 给 ES 发送请求 （配置见1.3）</span><br><span class=\"line\">3.关键字搜索</span><br><span class=\"line\">\t// 1.创建请求对象</span><br><span class=\"line\">    SearchRequest request = new SearchRequest(&quot;hmall&quot;);</span><br><span class=\"line\">    // 2.多个条件判断</span><br><span class=\"line\">    BoolQueryBuilder boolQuery = QueryBuilders.boolQuery();</span><br><span class=\"line\">    // key健壮性判断</span><br><span class=\"line\">    if (StringUtils.isNotEmpty(params.getKey())) &#123;</span><br><span class=\"line\">        boolQuery.must(QueryBuilders.matchQuery(&quot;all&quot;, params.getKey()));</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        boolQuery.must(QueryBuilders.matchAllQuery());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   \t……</span><br><span class=\"line\">   \t// 其他条件的判断</span><br><span class=\"line\">   \t……</span><br><span class=\"line\">   \t// 3.发送请求</span><br><span class=\"line\">   \tSearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">   \t// 4.解析数据</span><br><span class=\"line\">   \t…… 固定套路（剥洋葱）……</span><br><span class=\"line\"></span><br><span class=\"line\">4.过滤查询</span><br><span class=\"line\">\t聚合操作通常包括以下几个步骤：</span><br><span class=\"line\">\t\t1.创建一个 SearchRequest 对象，指定要执行聚合的索引和类型。</span><br><span class=\"line\">\t\t2.构建查询条件（如果需要），可以使用 QueryBuilders 类提供的方法创建各种类型的查询条件。</span><br><span class=\"line\">\t\t3.创建一个 AggregationBuilder 对象，指定要执行的聚合类型和聚合字段。</span><br><span class=\"line\">\t\t4.将聚合对象添加到 SearchRequest 对象中的 AggregationBuilder 列表中。</span><br><span class=\"line\">\t\t5.执行搜索请求，将 SearchRequest 对象传递给 Elasticsearch 客户端的 search 方法。</span><br><span class=\"line\">\t\t6.从 SearchResponse 对象中提取聚合结果。</span><br><span class=\"line\">5.销量和价格排序</span><br><span class=\"line\">\t// 排序</span><br><span class=\"line\">    String sortBy = params.getSortBy();</span><br><span class=\"line\">    if (&quot;sold&quot;.equals(sortBy))&#123;</span><br><span class=\"line\">        request.source().sort(sortBy, SortOrder.DESC);</span><br><span class=\"line\">    &#125;else if (&quot;price&quot;.equals(sortBy))&#123;</span><br><span class=\"line\">        request.source().sort(sortBy, SortOrder.ASC);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 发送请求</span><br><span class=\"line\">    client.search(request, RequestOptions.DEFAULT);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/posts/a219ce80/image-20230710085209091.png\" alt=\"image-20230710085209091\"></p>\n<p><img src=\"/posts/a219ce80/image-20230710085236250.png\" alt=\"image-20230710085236250\"></p>\n<p><img src=\"/posts/a219ce80/image-20230710090109319.png\" alt=\"image-20230710090109319\"></p>\n<h3 id=\"3-1数据同步\"><a href=\"#3-1数据同步\" class=\"headerlink\" title=\"3.1数据同步\"></a>3.1数据同步</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">基于 RabbitMQ 实现数据库 elasticsearch 的数据同步，要求如下：</span><br><span class=\"line\">ES配置见1.3</span><br><span class=\"line\">RabbitMQ配置见1.4</span><br><span class=\"line\">- 商品上架时：search-service新增商品到elasticsearch</span><br><span class=\"line\">- 商品下架时：search-service删除elasticsearch中的商品</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/posts/a219ce80/image-20230710120135885.png\" alt=\"image-20230710120135885\"></p>\n<h2 id=\"4-登录信息获取\"><a href=\"#4-登录信息获取\" class=\"headerlink\" title=\"4.登录信息获取\"></a>4.登录信息获取</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>网关配置(见<span class=\"number\">1.2</span>)</span><br><span class=\"line\"><span class=\"number\">2.</span>在 application.yml 中添加如下配置</span><br><span class=\"line\">\tspring:</span><br><span class=\"line\">\t  cloud:</span><br><span class=\"line\">\t    gateway:</span><br><span class=\"line\">\t      <span class=\"keyword\">default</span>-filters:</span><br><span class=\"line\">\t        - AddRequestHeader=authorization,<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3.</span>在服务中编写拦截器</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 拦截器类，在WebMvc中添加了拦截规则之后，前置拦截请求，添加请求头</span></span><br><span class=\"line\"><span class=\"comment\">* */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AuthorizationInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerInterceptor</span>  </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    * 前置拦截</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// String authorizationHeader = request.getHeader(&quot;authorization&quot;);</span></span><br><span class=\"line\">        <span class=\"comment\">// 在这里使用authorization头进行相应的处理</span></span><br><span class=\"line\">        String userID = request.getHeader(<span class=\"string\">&quot;authorization&quot;</span>);</span><br><span class=\"line\">        MyThreadLocal.setUserId(userID);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4.</span>编写拦截器配置类并将拦截器注册到容器中</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 需要将拦截器注册到MVC中</span></span><br><span class=\"line\"><span class=\"comment\">* */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebMvcConfig</span> <span class=\"keyword\">implements</span> <span class=\"title\">WebMvcConfigurer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AuthorizationInterceptor authorizationInterceptor;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">        registry.addInterceptor(authorizationInterceptor).addPathPatterns(<span class=\"string\">&quot;/**&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-1-Feign-的请求头\"><a href=\"#4-1-Feign-的请求头\" class=\"headerlink\" title=\"4.1 Feign 的请求头\"></a>4.1 Feign 的请求头</h3><p><img src=\"/posts/a219ce80/image-20230710121258644.png\" alt=\"image-20230710121258644\"></p>\n<p><img src=\"/posts/a219ce80/image-20230710121318486.png\" alt=\"image-20230710121318486\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这两段代码是用于配置和添加自定义的 Feign 拦截器。</span><br><span class=\"line\"></span><br><span class=\"line\">首先，FeignInterceptor 是一个实现了 RequestInterceptor 接口的拦截器类。在 apply 方法中，我们可以对请求进行一些自定义操作，比如添加请求头信息。通过调用 template.header(&quot;authorization&quot;,&quot;2&quot;) 方法，向请求添加了一个名为 &quot;authorization&quot; 的请求头，值为&quot;2&quot;。</span><br><span class=\"line\"></span><br><span class=\"line\">接下来，FeignConfig 是一个配置类，用于配置 Feign 客户端的一些参数和属性。通过使用 @EnableFeignClients 注解指定了 Feign 客户端的基础包路径，告诉 Spring Boot 在哪些包下寻找 Feign 客户端接口进行代理。</span><br><span class=\"line\"></span><br><span class=\"line\">在 FeignConfig 中，通过使用 @Bean 注解来声明一个名为 feignInterceptor 的 Bean ，该 Bean 是 FeignInterceptor 类型的实例。这样，SpringBoot 会自动将该拦截器添加到 Feign 的拦截器链中，使其生效。</span><br><span class=\"line\"></span><br><span class=\"line\">通过这样的配置和自定义拦截器，我们可以在Feign客户端发送请求前进行一些预处理操作，比如添加认证信息、日志记录等。</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"5-用户服务\"><a href=\"#5-用户服务\" class=\"headerlink\" title=\"5.用户服务\"></a>5.用户服务</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">略~~~</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"6-订单服务\"><a href=\"#6-订单服务\" class=\"headerlink\" title=\"6.订单服务\"></a>6.订单服务</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建订单业务比较复杂，流程如下：</span><br><span class=\"line\"></span><br><span class=\"line\">- 1）根据雪花算法生成订单 id</span><br><span class=\"line\">\t因为导入了 MP 所以有</span><br><span class=\"line\">\t    @TableId(type = IdType.ASSIGN_ID)</span><br><span class=\"line\">\t或者网上搜一个雪花算法的工具类掉方法</span><br><span class=\"line\">\t</span><br><span class=\"line\">- 2）商品微服务提供 FeignClient ，实现根据 id 查询商品的接口</span><br><span class=\"line\">\t将 ItemService 中的根据 id 获取对象的接口暴露给 Feign 通过(1.1 Feign 的远程调用实现)</span><br><span class=\"line\">\t</span><br><span class=\"line\">- 3）根据 itemId 查询商品信息</span><br><span class=\"line\">\t// 1.根据 id 查询出商品信息</span><br><span class=\"line\">    Item item = itemFeignClient.selectById(params.getItemId());</span><br><span class=\"line\">    </span><br><span class=\"line\">- 4）基于商品价格、购买数量计算商品总价：totalFee</span><br><span class=\"line\"></span><br><span class=\"line\">- 5）封装 Order 对象，初识 status 为未支付</span><br><span class=\"line\">\tOrder.setXxx();</span><br><span class=\"line\">\t</span><br><span class=\"line\">- 6）将 Order 写入数据库 tb_order 表中</span><br><span class=\"line\">\tsave(order);</span><br><span class=\"line\">\t</span><br><span class=\"line\">- 7）将商品信息、orderId 信息封装为 OrderDetail 对象，写入 tb_order_detail 表</span><br><span class=\"line\">\torderDetail.setXxx();</span><br><span class=\"line\">\tsave(orderDetail);</span><br><span class=\"line\">\t</span><br><span class=\"line\">- 8）将 user-service 的根据id查询地址接口封装为 FeignClient</span><br><span class=\"line\">\t通过(1.1 Feign 的远程调用实现)</span><br><span class=\"line\">\t</span><br><span class=\"line\">- 9）根据 addressId 查询 user-service 服务，获取地址信息</span><br><span class=\"line\">\t同上……</span><br><span class=\"line\">- 10）将地址封装为 OrderLogistics 对象，写入 tb_order_logistics 表</span><br><span class=\"line\">\t同上……</span><br><span class=\"line\">- 11）在 item-service 提供减库存接口，并编写 FeignClient</span><br><span class=\"line\">\t同上……</span><br><span class=\"line\">- 12）调用 item-service 的减库存接口</span><br><span class=\"line\">\t同上……</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-1-清理超时未支付订单\"><a href=\"#6-1-清理超时未支付订单\" class=\"headerlink\" title=\"6.1 清理超时未支付订单\"></a>6.1 清理超时未支付订单</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>原计划用延迟队列，但是突发奇想，想看看 SpringTask 可不可以实现，以下是对 SpringTask 的尝试</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span>创建 SpringTask 的模块</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span>引入 SpringTask 的起步依赖</span><br><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">&lt;/dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4.</span>启动类上添加<span class=\"meta\">@EnableScheduling</span></span><br><span class=\"line\"><span class=\"meta\">@EnableScheduling</span>：启动定时任务，放在启动类的上面</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@EnableScheduling</span></span><br><span class=\"line\"><span class=\"meta\">@EnableFeignClients(clients = &#123;OrderFeignClient.class&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TaskSpringBootApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(TaskSpringBootApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5.</span>编写业务代码(欠缺考虑增加库存数量)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyScheduledTask</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> OrderFeignClient orderFeignClient;</span><br><span class=\"line\">    <span class=\"comment\">// 优化性能 用计数器来 控制</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> counter = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Scheduled(fixedRate = 10000)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">task</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (counter &lt; <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">            counter++;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Order&gt; orderList = orderFeignClient.getOrderList();</span><br><span class=\"line\">        Date currentTime = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Order order : orderList) &#123;</span><br><span class=\"line\">            Date createTime = order.getCreateTime();</span><br><span class=\"line\">            Calendar calendar = Calendar.getInstance();</span><br><span class=\"line\">            calendar.setTime(createTime);</span><br><span class=\"line\">            calendar.add(Calendar.MINUTE, <span class=\"number\">30</span>);</span><br><span class=\"line\">            Date targetTime = calendar.getTime();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> isPast30Minutes = currentTime.after(targetTime);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isPast30Minutes) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 执行支付状态更改逻辑</span></span><br><span class=\"line\">                orderFeignClient.updateOrder(order.getId());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        counter = <span class=\"number\">0</span>; <span class=\"comment\">// 重置计数器</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-贴心小贴士\"><a href=\"#7-贴心小贴士\" class=\"headerlink\" title=\"7.贴心小贴士\"></a>7.贴心小贴士</h2><p>这是一个链接 [点进来有惊喜](<a href=\"https://chat-shared2.zhile.io/shared.html?v=2\">Shared Chat (zhile.io)</a> “ChatGPT”)</p>\n","more":"<h1 id=\"实战内容\"><a href=\"#实战内容\" class=\"headerlink\" title=\"实战内容\"></a>实战内容</h1><h2 id=\"1-搭建环境\"><a href=\"#1-搭建环境\" class=\"headerlink\" title=\"1.搭建环境\"></a>1.搭建环境</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">搭建环境</span><br><span class=\"line\">1.没什么好说的，导入 SQL</span><br><span class=\"line\">2.导入项目</span><br><span class=\"line\">3.nginx 发布前端页面</span><br><span class=\"line\">\t需要注意的是在 nginx.conf 配置（如下图）</span><br><span class=\"line\">\t在http&#123;</span><br><span class=\"line\">\t\tserver&#123;</span><br><span class=\"line\">\t\t// 这里写</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t中配置server&#123;</span><br><span class=\"line\">\t\tlisten  端口号;</span><br><span class=\"line\">\t\tserver_name  localhost;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tlocation /&#123;</span><br><span class=\"line\">\t\t   root   前端项目路径;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">4.配置 nacos</span><br><span class=\"line\">\t首先引入依赖</span><br><span class=\"line\">&lt;!--nacos服务注册发现依赖--&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t然后在 application.yml 中配置 nacos 的相关配置</span><br><span class=\"line\"></span><br><span class=\"line\">\tspring:</span><br><span class=\"line\">  \t\tapplication:</span><br><span class=\"line\">    \t\tname: 服务名称</span><br><span class=\"line\">\t\tcloud:</span><br><span class=\"line\">    \t\tnacos:</span><br><span class=\"line\">      \t\tdiscovery:</span><br><span class=\"line\">        \tserver-addr: localhost:8848 # nacos地址</span><br><span class=\"line\">5.配置网关服务</span><br><span class=\"line\">\t新建 gateway 网关模块并引入依赖（同时注册进 nacos 方便拉取2服务）</span><br><span class=\"line\">\t\t&lt;!-- Spring Cloud Gateway --&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;!-- Nacos 服务注册与发现 --&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">\t并在 application.yml 中写入 gateway 相关配置</span><br><span class=\"line\"></span><br><span class=\"line\">server:</span><br><span class=\"line\">  port: 10010</span><br><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: gateway</span><br><span class=\"line\">  cloud:</span><br><span class=\"line\">    gateway:</span><br><span class=\"line\">      default-filters:</span><br><span class=\"line\">        - AddRequestHeader=authorization,2  #往请求中加请求头</span><br><span class=\"line\">      routes:</span><br><span class=\"line\">        - id: userservice</span><br><span class=\"line\">          uri: lb://userservice # 路由的地址，lb，负载均衡</span><br><span class=\"line\">          predicates:</span><br><span class=\"line\">            - Path=/user/**,/address/**</span><br><span class=\"line\"></span><br><span class=\"line\">      globalcors: # 全局的跨域处理</span><br><span class=\"line\">        add-to-simple-url-handler-mapping: true # 解决options请求被拦截问题</span><br><span class=\"line\"></span><br><span class=\"line\">        corsConfigurations:</span><br><span class=\"line\">          &#x27;[/**]&#x27;:</span><br><span class=\"line\">            allowedOrigins: # 允许哪些网站的跨域请求</span><br><span class=\"line\">              - &quot;http://localhost:9001&quot;</span><br><span class=\"line\">              - &quot;http://localhost:9002&quot;</span><br><span class=\"line\">            allowedMethods: # 允许的跨域ajax的请求方式</span><br><span class=\"line\">              - &quot;GET&quot;</span><br><span class=\"line\">              - &quot;POST&quot;</span><br><span class=\"line\">              - &quot;DELETE&quot;</span><br><span class=\"line\">              - &quot;PUT&quot;</span><br><span class=\"line\">              - &quot;OPTIONS&quot;</span><br><span class=\"line\">            allowedHeaders: &quot;*&quot; # 允许在请求中携带的头信息</span><br><span class=\"line\">            allowCredentials: true # 是否允许携带cookie</span><br><span class=\"line\">            maxAge: 360000 # 这次跨域检测的有效期</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/posts/a219ce80/image-20230710083244286.png\" alt=\"image-20230710083244286\"></p>\n<p><img src=\"/posts/a219ce80/image-20230710083425232.png\" alt=\"image-20230710083425232\"></p>\n<h3 id=\"1-1-Feign-的远程调用\"><a href=\"#1-1-Feign-的远程调用\" class=\"headerlink\" title=\"1.1 Feign 的远程调用\"></a>1.1 Feign 的远程调用</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.创建 Feign 模块</span><br><span class=\"line\">2.引入 Feign 的依赖</span><br><span class=\"line\">\t&lt;dependency&gt;</span><br><span class=\"line\">\t    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">\t    &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;/dependency&gt;</span><br><span class=\"line\">3.声明服务的接口 XxxFeignClient</span><br><span class=\"line\">\t将服务暴露的接口写入其中 路径名、方法名、请求类型、参数类型都要相同</span><br><span class=\"line\">4.在需要远程调用其他接口的服务中引入 Feign 的依赖</span><br><span class=\"line\">\t自动注入 XxxFeignClient 然后调用方法</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/posts/a219ce80/image-20230710092437011.png\" alt=\"image-20230710092437011\"></p>\n<p><img src=\"/posts/a219ce80/image-20230710092518955.png\" alt=\"image-20230710092518955\"></p>\n<h3 id=\"1-2-网关-Gateway-配置\"><a href=\"#1-2-网关-Gateway-配置\" class=\"headerlink\" title=\"1.2 网关 Gateway 配置\"></a>1.2 网关 Gateway 配置</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.创建Gateway模块</span><br><span class=\"line\">2.导入依赖</span><br><span class=\"line\">\t&lt;!-- Spring Cloud Gateway --&gt;</span><br><span class=\"line\">\t&lt;dependency&gt;</span><br><span class=\"line\">\t    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">\t    &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;/dependency&gt;</span><br><span class=\"line\">\t&lt;!-- Nacos 服务注册与发现 --&gt;</span><br><span class=\"line\">\t&lt;dependency&gt;</span><br><span class=\"line\">\t    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class=\"line\">\t    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">3.配置 application.yml </span><br><span class=\"line\">\tserver:</span><br><span class=\"line\">\t  port: 10010</span><br><span class=\"line\">\tspring:</span><br><span class=\"line\">\t  application:</span><br><span class=\"line\">\t    name: gateway</span><br><span class=\"line\">\t  cloud:</span><br><span class=\"line\">\t    gateway:</span><br><span class=\"line\">\t      default-filters:</span><br><span class=\"line\">\t        - AddRequestHeader=authorization,2</span><br><span class=\"line\">\t      routes:</span><br><span class=\"line\">\t        - id: userservice</span><br><span class=\"line\">\t          uri: lb://userservice # 路由的地址，lb，负载均衡</span><br><span class=\"line\">\t          predicates:</span><br><span class=\"line\">\t            - Path=/user/**,/address/**</span><br><span class=\"line\">\t        - id: orderservice</span><br><span class=\"line\">\t          uri: lb://orderservice</span><br><span class=\"line\">\t          predicates:</span><br><span class=\"line\">\t            - Path=/order/**,/pay/**</span><br><span class=\"line\">\t        - id: itemservice</span><br><span class=\"line\">\t          uri: lb://itemservice</span><br><span class=\"line\">\t          predicates:</span><br><span class=\"line\">\t            - Path=/item/**</span><br><span class=\"line\">\t        - id: searchservice</span><br><span class=\"line\">\t          uri: lb://searchservice</span><br><span class=\"line\">\t          predicates:</span><br><span class=\"line\">\t            - Path=/search/**</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t      globalcors: # 全局的跨域处理</span><br><span class=\"line\">\t        add-to-simple-url-handler-mapping: true # 解决options请求被拦截问题</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t        corsConfigurations:</span><br><span class=\"line\">\t          &#x27;[/**]&#x27;:</span><br><span class=\"line\">\t            allowedOrigins: # 允许哪些网站的跨域请求</span><br><span class=\"line\">\t              - &quot;http://localhost:9001&quot;</span><br><span class=\"line\">\t              - &quot;http://localhost:9002&quot;</span><br><span class=\"line\">\t            allowedMethods: # 允许的跨域ajax的请求方式</span><br><span class=\"line\">\t              - &quot;GET&quot;</span><br><span class=\"line\">\t              - &quot;POST&quot;</span><br><span class=\"line\">\t              - &quot;DELETE&quot;</span><br><span class=\"line\">\t              - &quot;PUT&quot;</span><br><span class=\"line\">\t              - &quot;OPTIONS&quot;</span><br><span class=\"line\">\t            allowedHeaders: &quot;*&quot; # 允许在请求中携带的头信息</span><br><span class=\"line\">\t            allowCredentials: true # 是否允许携带cookie</span><br><span class=\"line\">\t            maxAge: 360000 # 这次跨域检测的有效期</span><br><span class=\"line\">\t</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-3-配置-ES-客户端\"><a href=\"#1-3-配置-ES-客户端\" class=\"headerlink\" title=\"1.3 配置 ES 客户端\"></a>1.3 配置 ES 客户端</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.引入依赖</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--elasticsearch--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;elasticsearch-rest-high-level-client&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">2.编写配置类</span><br><span class=\"line\"></span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">public class ElasticsearchConfig &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public RestHighLevelClient restHighLevelClient() &#123;</span><br><span class=\"line\">        return new RestHighLevelClient(RestClient.builder(</span><br><span class=\"line\">                HttpHost.create(&quot;http://192.168.150.105:9200&quot;)</span><br><span class=\"line\">        ));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">然后在其他地方</span><br><span class=\"line\">@Autowired</span><br><span class=\"line\">private RestHighLevelClient restHighLevelClient;</span><br><span class=\"line\">注入</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-4-配置RabbitMQ\"><a href=\"#1-4-配置RabbitMQ\" class=\"headerlink\" title=\"1.4 配置RabbitMQ\"></a>1.4 配置RabbitMQ</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 引入依赖</span><br><span class=\"line\">&lt;!--amqp--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">2.编写MQ的监听（将交换机和队列进行绑定，基于注解方式）</span><br><span class=\"line\"></span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class ItemLinstter &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private SearchService searchService;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RabbitListener(bindings = @QueueBinding(</span><br><span class=\"line\">            exchange = @Exchange(name = MqConstants.HMALL_EXCHANGE, type = ExchangeTypes.TOPIC),</span><br><span class=\"line\">            value = @Queue(name = MqConstants.HMALL_INSERT_QUEUE),</span><br><span class=\"line\">            key = &#123;MqConstants.HMALL_INSERT_KEY&#125;</span><br><span class=\"line\">    ))</span><br><span class=\"line\">    public void linsterIemUp(Long id) &#123;</span><br><span class=\"line\">        searchService.saveItemById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @RabbitListener(bindings = @QueueBinding(</span><br><span class=\"line\">            value = @Queue(name = MqConstants.HMALL_DELETTE_QUEUE),</span><br><span class=\"line\">            exchange = @Exchange(name = MqConstants.HMALL_EXCHANGE, type = ExchangeTypes.TOPIC),</span><br><span class=\"line\">            key = &#123;MqConstants.HMALL_DELETE_KEY&#125;</span><br><span class=\"line\">    ))</span><br><span class=\"line\">    public void linsterIemDown(Long id) &#123;</span><br><span class=\"line\">        searchService.deleteItemById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"2-商品管理服务\"><a href=\"#2-商品管理服务\" class=\"headerlink\" title=\"2.商品管理服务\"></a>2.商品管理服务</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">今天没什么好写的，因为用了 MP 框架</span><br><span class=\"line\">对于单表的增删改查很容易</span><br><span class=\"line\">要注意</span><br><span class=\"line\">在 XxxMapper 的接口上要 extends BaseMapper&lt;实体类名&gt;</span><br><span class=\"line\">（数据库的实体类映射）</span><br><span class=\"line\">在 XxxService 的接口上是 extends IService&lt;实体类名&gt;</span><br><span class=\"line\">在 XxxServiceImpl 的实现类上是 extends ServiceImpl&lt;XxxMapper,实体类&gt; 并且同时 implements XxxService</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/posts/a219ce80/image-20230710084856174.png\" alt=\"image-20230710084856174\"></p>\n<p><img src=\"/posts/a219ce80/image-20230710084913048.png\" alt=\"image-20230710084913048\"></p>\n<p><img src=\"/posts/a219ce80/image-20230710084925142.png\" alt=\"image-20230710084925142\"></p>\n<h2 id=\"3-搜索业务\"><a href=\"#3-搜索业务\" class=\"headerlink\" title=\"3.搜索业务\"></a>3.搜索业务</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">上强度开始</span><br><span class=\"line\">1.创建索引库</span><br><span class=\"line\">\t首先根据数据库表结构设计出 ES 的索引表结构</span><br><span class=\"line\">\t\t其中设计了后边要用的关键字搜索 </span><br><span class=\"line\">\t\t设计了 all 字段，参与搜索</span><br><span class=\"line\">\t\t&quot;all&quot;: &#123;</span><br><span class=\"line\">        \t&quot;type&quot;: &quot;text&quot;,</span><br><span class=\"line\">        \t&quot;analyzer&quot;: &quot;text_analyzer&quot;,</span><br><span class=\"line\">        \t&quot;search_analyzer&quot;: &quot;ik_smart&quot;</span><br><span class=\"line\">     \t &#125;</span><br><span class=\"line\">    \t在其他字段下 写  ”copy_to“: &quot;all&quot;</span><br><span class=\"line\">    \t使其他字段在查询的时候参与查询</span><br><span class=\"line\">    同时还设置了 py 分词器，以便在搜索框搜索的时候可以使用拼音搜索</span><br><span class=\"line\">    </span><br><span class=\"line\">2.导入数据</span><br><span class=\"line\">\t大体思路就是</span><br><span class=\"line\">\t\t2.1将其他服务写好的查询数据库的全部数据的接口暴露给 Feign</span><br><span class=\"line\">\t\t2.2然后在需要导入数据的服务中引入 Feign 的依赖</span><br><span class=\"line\">\t\t2.3调用 Feign 的接口\t（Feign如何操作见1.1模块）</span><br><span class=\"line\">\t\t2.4通过 RestHighLevelClient 给 ES 发送请求 （配置见1.3）</span><br><span class=\"line\">3.关键字搜索</span><br><span class=\"line\">\t// 1.创建请求对象</span><br><span class=\"line\">    SearchRequest request = new SearchRequest(&quot;hmall&quot;);</span><br><span class=\"line\">    // 2.多个条件判断</span><br><span class=\"line\">    BoolQueryBuilder boolQuery = QueryBuilders.boolQuery();</span><br><span class=\"line\">    // key健壮性判断</span><br><span class=\"line\">    if (StringUtils.isNotEmpty(params.getKey())) &#123;</span><br><span class=\"line\">        boolQuery.must(QueryBuilders.matchQuery(&quot;all&quot;, params.getKey()));</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        boolQuery.must(QueryBuilders.matchAllQuery());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   \t……</span><br><span class=\"line\">   \t// 其他条件的判断</span><br><span class=\"line\">   \t……</span><br><span class=\"line\">   \t// 3.发送请求</span><br><span class=\"line\">   \tSearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">   \t// 4.解析数据</span><br><span class=\"line\">   \t…… 固定套路（剥洋葱）……</span><br><span class=\"line\"></span><br><span class=\"line\">4.过滤查询</span><br><span class=\"line\">\t聚合操作通常包括以下几个步骤：</span><br><span class=\"line\">\t\t1.创建一个 SearchRequest 对象，指定要执行聚合的索引和类型。</span><br><span class=\"line\">\t\t2.构建查询条件（如果需要），可以使用 QueryBuilders 类提供的方法创建各种类型的查询条件。</span><br><span class=\"line\">\t\t3.创建一个 AggregationBuilder 对象，指定要执行的聚合类型和聚合字段。</span><br><span class=\"line\">\t\t4.将聚合对象添加到 SearchRequest 对象中的 AggregationBuilder 列表中。</span><br><span class=\"line\">\t\t5.执行搜索请求，将 SearchRequest 对象传递给 Elasticsearch 客户端的 search 方法。</span><br><span class=\"line\">\t\t6.从 SearchResponse 对象中提取聚合结果。</span><br><span class=\"line\">5.销量和价格排序</span><br><span class=\"line\">\t// 排序</span><br><span class=\"line\">    String sortBy = params.getSortBy();</span><br><span class=\"line\">    if (&quot;sold&quot;.equals(sortBy))&#123;</span><br><span class=\"line\">        request.source().sort(sortBy, SortOrder.DESC);</span><br><span class=\"line\">    &#125;else if (&quot;price&quot;.equals(sortBy))&#123;</span><br><span class=\"line\">        request.source().sort(sortBy, SortOrder.ASC);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 发送请求</span><br><span class=\"line\">    client.search(request, RequestOptions.DEFAULT);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/posts/a219ce80/image-20230710085209091.png\" alt=\"image-20230710085209091\"></p>\n<p><img src=\"/posts/a219ce80/image-20230710085236250.png\" alt=\"image-20230710085236250\"></p>\n<p><img src=\"/posts/a219ce80/image-20230710090109319.png\" alt=\"image-20230710090109319\"></p>\n<h3 id=\"3-1数据同步\"><a href=\"#3-1数据同步\" class=\"headerlink\" title=\"3.1数据同步\"></a>3.1数据同步</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">基于 RabbitMQ 实现数据库 elasticsearch 的数据同步，要求如下：</span><br><span class=\"line\">ES配置见1.3</span><br><span class=\"line\">RabbitMQ配置见1.4</span><br><span class=\"line\">- 商品上架时：search-service新增商品到elasticsearch</span><br><span class=\"line\">- 商品下架时：search-service删除elasticsearch中的商品</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/posts/a219ce80/image-20230710120135885.png\" alt=\"image-20230710120135885\"></p>\n<h2 id=\"4-登录信息获取\"><a href=\"#4-登录信息获取\" class=\"headerlink\" title=\"4.登录信息获取\"></a>4.登录信息获取</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>网关配置(见<span class=\"number\">1.2</span>)</span><br><span class=\"line\"><span class=\"number\">2.</span>在 application.yml 中添加如下配置</span><br><span class=\"line\">\tspring:</span><br><span class=\"line\">\t  cloud:</span><br><span class=\"line\">\t    gateway:</span><br><span class=\"line\">\t      <span class=\"keyword\">default</span>-filters:</span><br><span class=\"line\">\t        - AddRequestHeader=authorization,<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3.</span>在服务中编写拦截器</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 拦截器类，在WebMvc中添加了拦截规则之后，前置拦截请求，添加请求头</span></span><br><span class=\"line\"><span class=\"comment\">* */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AuthorizationInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerInterceptor</span>  </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    * 前置拦截</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// String authorizationHeader = request.getHeader(&quot;authorization&quot;);</span></span><br><span class=\"line\">        <span class=\"comment\">// 在这里使用authorization头进行相应的处理</span></span><br><span class=\"line\">        String userID = request.getHeader(<span class=\"string\">&quot;authorization&quot;</span>);</span><br><span class=\"line\">        MyThreadLocal.setUserId(userID);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4.</span>编写拦截器配置类并将拦截器注册到容器中</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* 需要将拦截器注册到MVC中</span></span><br><span class=\"line\"><span class=\"comment\">* */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebMvcConfig</span> <span class=\"keyword\">implements</span> <span class=\"title\">WebMvcConfigurer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AuthorizationInterceptor authorizationInterceptor;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">        registry.addInterceptor(authorizationInterceptor).addPathPatterns(<span class=\"string\">&quot;/**&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-1-Feign-的请求头\"><a href=\"#4-1-Feign-的请求头\" class=\"headerlink\" title=\"4.1 Feign 的请求头\"></a>4.1 Feign 的请求头</h3><p><img src=\"/posts/a219ce80/image-20230710121258644.png\" alt=\"image-20230710121258644\"></p>\n<p><img src=\"/posts/a219ce80/image-20230710121318486.png\" alt=\"image-20230710121318486\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这两段代码是用于配置和添加自定义的 Feign 拦截器。</span><br><span class=\"line\"></span><br><span class=\"line\">首先，FeignInterceptor 是一个实现了 RequestInterceptor 接口的拦截器类。在 apply 方法中，我们可以对请求进行一些自定义操作，比如添加请求头信息。通过调用 template.header(&quot;authorization&quot;,&quot;2&quot;) 方法，向请求添加了一个名为 &quot;authorization&quot; 的请求头，值为&quot;2&quot;。</span><br><span class=\"line\"></span><br><span class=\"line\">接下来，FeignConfig 是一个配置类，用于配置 Feign 客户端的一些参数和属性。通过使用 @EnableFeignClients 注解指定了 Feign 客户端的基础包路径，告诉 Spring Boot 在哪些包下寻找 Feign 客户端接口进行代理。</span><br><span class=\"line\"></span><br><span class=\"line\">在 FeignConfig 中，通过使用 @Bean 注解来声明一个名为 feignInterceptor 的 Bean ，该 Bean 是 FeignInterceptor 类型的实例。这样，SpringBoot 会自动将该拦截器添加到 Feign 的拦截器链中，使其生效。</span><br><span class=\"line\"></span><br><span class=\"line\">通过这样的配置和自定义拦截器，我们可以在Feign客户端发送请求前进行一些预处理操作，比如添加认证信息、日志记录等。</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"5-用户服务\"><a href=\"#5-用户服务\" class=\"headerlink\" title=\"5.用户服务\"></a>5.用户服务</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">略~~~</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"6-订单服务\"><a href=\"#6-订单服务\" class=\"headerlink\" title=\"6.订单服务\"></a>6.订单服务</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建订单业务比较复杂，流程如下：</span><br><span class=\"line\"></span><br><span class=\"line\">- 1）根据雪花算法生成订单 id</span><br><span class=\"line\">\t因为导入了 MP 所以有</span><br><span class=\"line\">\t    @TableId(type = IdType.ASSIGN_ID)</span><br><span class=\"line\">\t或者网上搜一个雪花算法的工具类掉方法</span><br><span class=\"line\">\t</span><br><span class=\"line\">- 2）商品微服务提供 FeignClient ，实现根据 id 查询商品的接口</span><br><span class=\"line\">\t将 ItemService 中的根据 id 获取对象的接口暴露给 Feign 通过(1.1 Feign 的远程调用实现)</span><br><span class=\"line\">\t</span><br><span class=\"line\">- 3）根据 itemId 查询商品信息</span><br><span class=\"line\">\t// 1.根据 id 查询出商品信息</span><br><span class=\"line\">    Item item = itemFeignClient.selectById(params.getItemId());</span><br><span class=\"line\">    </span><br><span class=\"line\">- 4）基于商品价格、购买数量计算商品总价：totalFee</span><br><span class=\"line\"></span><br><span class=\"line\">- 5）封装 Order 对象，初识 status 为未支付</span><br><span class=\"line\">\tOrder.setXxx();</span><br><span class=\"line\">\t</span><br><span class=\"line\">- 6）将 Order 写入数据库 tb_order 表中</span><br><span class=\"line\">\tsave(order);</span><br><span class=\"line\">\t</span><br><span class=\"line\">- 7）将商品信息、orderId 信息封装为 OrderDetail 对象，写入 tb_order_detail 表</span><br><span class=\"line\">\torderDetail.setXxx();</span><br><span class=\"line\">\tsave(orderDetail);</span><br><span class=\"line\">\t</span><br><span class=\"line\">- 8）将 user-service 的根据id查询地址接口封装为 FeignClient</span><br><span class=\"line\">\t通过(1.1 Feign 的远程调用实现)</span><br><span class=\"line\">\t</span><br><span class=\"line\">- 9）根据 addressId 查询 user-service 服务，获取地址信息</span><br><span class=\"line\">\t同上……</span><br><span class=\"line\">- 10）将地址封装为 OrderLogistics 对象，写入 tb_order_logistics 表</span><br><span class=\"line\">\t同上……</span><br><span class=\"line\">- 11）在 item-service 提供减库存接口，并编写 FeignClient</span><br><span class=\"line\">\t同上……</span><br><span class=\"line\">- 12）调用 item-service 的减库存接口</span><br><span class=\"line\">\t同上……</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-1-清理超时未支付订单\"><a href=\"#6-1-清理超时未支付订单\" class=\"headerlink\" title=\"6.1 清理超时未支付订单\"></a>6.1 清理超时未支付订单</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>原计划用延迟队列，但是突发奇想，想看看 SpringTask 可不可以实现，以下是对 SpringTask 的尝试</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span>创建 SpringTask 的模块</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span>引入 SpringTask 的起步依赖</span><br><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">&lt;/dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4.</span>启动类上添加<span class=\"meta\">@EnableScheduling</span></span><br><span class=\"line\"><span class=\"meta\">@EnableScheduling</span>：启动定时任务，放在启动类的上面</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@EnableScheduling</span></span><br><span class=\"line\"><span class=\"meta\">@EnableFeignClients(clients = &#123;OrderFeignClient.class&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TaskSpringBootApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(TaskSpringBootApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5.</span>编写业务代码(欠缺考虑增加库存数量)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyScheduledTask</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> OrderFeignClient orderFeignClient;</span><br><span class=\"line\">    <span class=\"comment\">// 优化性能 用计数器来 控制</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> counter = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Scheduled(fixedRate = 10000)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">task</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (counter &lt; <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">            counter++;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Order&gt; orderList = orderFeignClient.getOrderList();</span><br><span class=\"line\">        Date currentTime = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Order order : orderList) &#123;</span><br><span class=\"line\">            Date createTime = order.getCreateTime();</span><br><span class=\"line\">            Calendar calendar = Calendar.getInstance();</span><br><span class=\"line\">            calendar.setTime(createTime);</span><br><span class=\"line\">            calendar.add(Calendar.MINUTE, <span class=\"number\">30</span>);</span><br><span class=\"line\">            Date targetTime = calendar.getTime();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> isPast30Minutes = currentTime.after(targetTime);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isPast30Minutes) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 执行支付状态更改逻辑</span></span><br><span class=\"line\">                orderFeignClient.updateOrder(order.getId());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        counter = <span class=\"number\">0</span>; <span class=\"comment\">// 重置计数器</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-贴心小贴士\"><a href=\"#7-贴心小贴士\" class=\"headerlink\" title=\"7.贴心小贴士\"></a>7.贴心小贴士</h2><p>这是一个链接 [点进来有惊喜](<a href=\"https://chat-shared2.zhile.io/shared.html?v=2\">Shared Chat (zhile.io)</a> “ChatGPT”)</p>\n","categories":[],"tags":[]}