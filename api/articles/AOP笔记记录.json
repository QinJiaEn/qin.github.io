{"title":"AOP笔记","slug":"AOP笔记记录","date":"2023-05-24T10:02:34.000Z","updated":"2023-05-24T12:07:15.045Z","comments":true,"path":"api/articles/AOP笔记记录.json","excerpt":null,"covers":null,"content":"<h1 id=\"事务管理-amp-AOP笔记\"><a href=\"#事务管理-amp-AOP笔记\" class=\"headerlink\" title=\"事务管理&amp;AOP笔记\"></a>事务管理&amp;AOP笔记</h1><h2 id=\"Spring事务管理（-Transactional）\"><a href=\"#Spring事务管理（-Transactional）\" class=\"headerlink\" title=\"Spring事务管理（@Transactional）\"></a>Spring事务管理（@Transactional）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注解：</span><br><span class=\"line\">\t@Transactional</span><br><span class=\"line\">位置：</span><br><span class=\"line\">\t业务(Service)层的方法上、类上、接口上</span><br><span class=\"line\">作用：</span><br><span class=\"line\">\t将当前方法交给Spring进行事务管理、方法执行前、开启事务;</span><br><span class=\"line\">\t成功执行完毕，提交事务：</span><br><span class=\"line\">\t出现异常，回滚事务；</span><br><span class=\"line\">\t</span><br><span class=\"line\">开启Spring事务管理日志：</span><br><span class=\"line\">logging:</span><br><span class=\"line\">  level:</span><br><span class=\"line\">    org.springframework.jdbc.support.JdbcTransactionManager: debug</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"事务属性-回滚（rollbackFor）\"><a href=\"#事务属性-回滚（rollbackFor）\" class=\"headerlink\" title=\"事务属性-回滚（rollbackFor）\"></a>事务属性-回滚（rollbackFor）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">默认情况下：</span><br><span class=\"line\">\t只有出现RuntimeException才回滚异常</span><br><span class=\"line\">\t</span><br><span class=\"line\">\trollbackFor属性用于控制出现何种异常类型，回滚事务</span><br><span class=\"line\">\t</span><br><span class=\"line\">@Transactional(rollbackFor = Exception.class)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"事务属性-传播（propagation）\"><a href=\"#事务属性-传播（propagation）\" class=\"headerlink\" title=\"事务属性-传播（propagation）\"></a>事务属性-传播（propagation）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">事务传播行为：</span><br><span class=\"line\">\t值的是当一个事务方法被另一个事务方法调用时，这个事务方法应该如何进行事务控制</span><br><span class=\"line\">\t\t加入：</span><br><span class=\"line\">\t\t\t@Transactional(propagation = Propagation.REQUIRED)  默认值需要事务，有则加入，无则创建新事务</span><br><span class=\"line\">\t\t新建：</span><br><span class=\"line\">\t\t\t@Transactional(propagation = Propagation.REQUIRES_NEW)  需要新事务，不管有没有，总是创建新事物</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h2><h3 id=\"AOP概述\"><a href=\"#AOP概述\" class=\"headerlink\" title=\"AOP概述\"></a>AOP概述</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AOP：</span><br><span class=\"line\">\tAspect Oriented Progaramming(面向切面编程)  ，就是面向特定方法进行编程</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AOP快速入门\"><a href=\"#AOP快速入门\" class=\"headerlink\" title=\"AOP快速入门\"></a>AOP快速入门</h3><h4 id=\"1-在pom-xml中导入依赖\"><a href=\"#1-在pom-xml中导入依赖\" class=\"headerlink\" title=\"1.在pom.xml中导入依赖\"></a>1.在pom.xml中导入依赖</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-aop<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-编写AOP程序：针对于特定方法根据业务需要进行编程\"><a href=\"#2-编写AOP程序：针对于特定方法根据业务需要进行编程\" class=\"headerlink\" title=\"2.编写AOP程序：针对于特定方法根据业务需要进行编程\"></a>2.编写AOP程序：针对于特定方法根据业务需要进行编程</h4><h3 id=\"AOP使用场景及优势\"><a href=\"#AOP使用场景及优势\" class=\"headerlink\" title=\"AOP使用场景及优势\"></a>AOP使用场景及优势</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">场景：</span><br><span class=\"line\">\t记录操作日志</span><br><span class=\"line\">\t权限控制</span><br><span class=\"line\">\t事务管理</span><br><span class=\"line\"></span><br><span class=\"line\">优势：</span><br><span class=\"line\">\t代码无侵入</span><br><span class=\"line\">\t减少重复代码</span><br><span class=\"line\">\t提高开发效率</span><br><span class=\"line\">\t维护方便</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AOP核心概念！！！\"><a href=\"#AOP核心概念！！！\" class=\"headerlink\" title=\"AOP核心概念！！！\"></a>AOP核心概念！！！</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">连接点：</span><br><span class=\"line\">\tJoinPoint，可以被AOP控制的方法</span><br><span class=\"line\">通知：</span><br><span class=\"line\">\tAdvice，指哪些重复的逻辑，也就是共性的功能</span><br><span class=\"line\">切入点：</span><br><span class=\"line\">\tPointCut，匹配连接点的条件，通知仅会在切入点方法执行时被应用</span><br><span class=\"line\">切面：</span><br><span class=\"line\">\tAspect，通知+切入点（描述通知与切入点的对应关系）</span><br><span class=\"line\">目标对象：</span><br><span class=\"line\">\tTarget，通知所应用的对象</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通知类型\"><a href=\"#通知类型\" class=\"headerlink\" title=\"通知类型\"></a>通知类型</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Around:</span><br><span class=\"line\">\t环绕通知，此注解标注的通知方法在目标方法前，后都被执行（方法的前后）</span><br><span class=\"line\">\t</span><br><span class=\"line\">@Around的注意事项：</span><br><span class=\"line\">\t@Around环绕通知需要自己调用ProceedingJoinPoint.proceed()来让原始方法执行，其他通知不需要考虑目标方法执行</span><br><span class=\"line\">\t@Around环绕通知方法的返回值，必须指定为object，来接受原始方法的返回值</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">@Before(前置通知)</span><br><span class=\"line\">@After(后置通知)</span><br><span class=\"line\">@Around(环绕通知！！！重点)</span><br><span class=\"line\">@AfterReturning(返回后通知，了解)</span><br><span class=\"line\">@AfterThrowing(异常后通知，了解)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"切入点表达式\"><a href=\"#切入点表达式\" class=\"headerlink\" title=\"切入点表达式\"></a>切入点表达式</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">切入点表达式：</span><br><span class=\"line\">\t描述切入点方法的一种表达式</span><br><span class=\"line\">作用：</span><br><span class=\"line\">\t主要用来决定项目中的那些方法需要加入通知</span><br><span class=\"line\">常见形式：</span><br><span class=\"line\">\texecution(...):根据方法的签名来匹配</span><br><span class=\"line\">\t@annotation(...):根据注解匹配</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"PointCut\"><a href=\"#PointCut\" class=\"headerlink\" title=\"@PointCut\"></a>@PointCut</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">该注解的作用是将公共的切点表达式抽取出来，需要用到时引用该切点表达式即可</span><br><span class=\"line\"><span class=\"meta\">@PointCut(&quot;execution(* com.itheima.service.impl.Xxximpl.*(..))&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pt</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Around(&quot;pt()&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">recordTime</span><span class=\"params\">(ProceedingJoinPoint joinPoint)</span> <span class=\"keyword\">throws</span> Throwable</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","more":"<h1 id=\"事务管理-amp-AOP笔记\"><a href=\"#事务管理-amp-AOP笔记\" class=\"headerlink\" title=\"事务管理&amp;AOP笔记\"></a>事务管理&amp;AOP笔记</h1><h2 id=\"Spring事务管理（-Transactional）\"><a href=\"#Spring事务管理（-Transactional）\" class=\"headerlink\" title=\"Spring事务管理（@Transactional）\"></a>Spring事务管理（@Transactional）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注解：</span><br><span class=\"line\">\t@Transactional</span><br><span class=\"line\">位置：</span><br><span class=\"line\">\t业务(Service)层的方法上、类上、接口上</span><br><span class=\"line\">作用：</span><br><span class=\"line\">\t将当前方法交给Spring进行事务管理、方法执行前、开启事务;</span><br><span class=\"line\">\t成功执行完毕，提交事务：</span><br><span class=\"line\">\t出现异常，回滚事务；</span><br><span class=\"line\">\t</span><br><span class=\"line\">开启Spring事务管理日志：</span><br><span class=\"line\">logging:</span><br><span class=\"line\">  level:</span><br><span class=\"line\">    org.springframework.jdbc.support.JdbcTransactionManager: debug</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"事务属性-回滚（rollbackFor）\"><a href=\"#事务属性-回滚（rollbackFor）\" class=\"headerlink\" title=\"事务属性-回滚（rollbackFor）\"></a>事务属性-回滚（rollbackFor）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">默认情况下：</span><br><span class=\"line\">\t只有出现RuntimeException才回滚异常</span><br><span class=\"line\">\t</span><br><span class=\"line\">\trollbackFor属性用于控制出现何种异常类型，回滚事务</span><br><span class=\"line\">\t</span><br><span class=\"line\">@Transactional(rollbackFor = Exception.class)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"事务属性-传播（propagation）\"><a href=\"#事务属性-传播（propagation）\" class=\"headerlink\" title=\"事务属性-传播（propagation）\"></a>事务属性-传播（propagation）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">事务传播行为：</span><br><span class=\"line\">\t值的是当一个事务方法被另一个事务方法调用时，这个事务方法应该如何进行事务控制</span><br><span class=\"line\">\t\t加入：</span><br><span class=\"line\">\t\t\t@Transactional(propagation = Propagation.REQUIRED)  默认值需要事务，有则加入，无则创建新事务</span><br><span class=\"line\">\t\t新建：</span><br><span class=\"line\">\t\t\t@Transactional(propagation = Propagation.REQUIRES_NEW)  需要新事务，不管有没有，总是创建新事物</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h2><h3 id=\"AOP概述\"><a href=\"#AOP概述\" class=\"headerlink\" title=\"AOP概述\"></a>AOP概述</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AOP：</span><br><span class=\"line\">\tAspect Oriented Progaramming(面向切面编程)  ，就是面向特定方法进行编程</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AOP快速入门\"><a href=\"#AOP快速入门\" class=\"headerlink\" title=\"AOP快速入门\"></a>AOP快速入门</h3><h4 id=\"1-在pom-xml中导入依赖\"><a href=\"#1-在pom-xml中导入依赖\" class=\"headerlink\" title=\"1.在pom.xml中导入依赖\"></a>1.在pom.xml中导入依赖</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-aop<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-编写AOP程序：针对于特定方法根据业务需要进行编程\"><a href=\"#2-编写AOP程序：针对于特定方法根据业务需要进行编程\" class=\"headerlink\" title=\"2.编写AOP程序：针对于特定方法根据业务需要进行编程\"></a>2.编写AOP程序：针对于特定方法根据业务需要进行编程</h4><h3 id=\"AOP使用场景及优势\"><a href=\"#AOP使用场景及优势\" class=\"headerlink\" title=\"AOP使用场景及优势\"></a>AOP使用场景及优势</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">场景：</span><br><span class=\"line\">\t记录操作日志</span><br><span class=\"line\">\t权限控制</span><br><span class=\"line\">\t事务管理</span><br><span class=\"line\"></span><br><span class=\"line\">优势：</span><br><span class=\"line\">\t代码无侵入</span><br><span class=\"line\">\t减少重复代码</span><br><span class=\"line\">\t提高开发效率</span><br><span class=\"line\">\t维护方便</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AOP核心概念！！！\"><a href=\"#AOP核心概念！！！\" class=\"headerlink\" title=\"AOP核心概念！！！\"></a>AOP核心概念！！！</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">连接点：</span><br><span class=\"line\">\tJoinPoint，可以被AOP控制的方法</span><br><span class=\"line\">通知：</span><br><span class=\"line\">\tAdvice，指哪些重复的逻辑，也就是共性的功能</span><br><span class=\"line\">切入点：</span><br><span class=\"line\">\tPointCut，匹配连接点的条件，通知仅会在切入点方法执行时被应用</span><br><span class=\"line\">切面：</span><br><span class=\"line\">\tAspect，通知+切入点（描述通知与切入点的对应关系）</span><br><span class=\"line\">目标对象：</span><br><span class=\"line\">\tTarget，通知所应用的对象</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通知类型\"><a href=\"#通知类型\" class=\"headerlink\" title=\"通知类型\"></a>通知类型</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Around:</span><br><span class=\"line\">\t环绕通知，此注解标注的通知方法在目标方法前，后都被执行（方法的前后）</span><br><span class=\"line\">\t</span><br><span class=\"line\">@Around的注意事项：</span><br><span class=\"line\">\t@Around环绕通知需要自己调用ProceedingJoinPoint.proceed()来让原始方法执行，其他通知不需要考虑目标方法执行</span><br><span class=\"line\">\t@Around环绕通知方法的返回值，必须指定为object，来接受原始方法的返回值</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">@Before(前置通知)</span><br><span class=\"line\">@After(后置通知)</span><br><span class=\"line\">@Around(环绕通知！！！重点)</span><br><span class=\"line\">@AfterReturning(返回后通知，了解)</span><br><span class=\"line\">@AfterThrowing(异常后通知，了解)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"切入点表达式\"><a href=\"#切入点表达式\" class=\"headerlink\" title=\"切入点表达式\"></a>切入点表达式</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">切入点表达式：</span><br><span class=\"line\">\t描述切入点方法的一种表达式</span><br><span class=\"line\">作用：</span><br><span class=\"line\">\t主要用来决定项目中的那些方法需要加入通知</span><br><span class=\"line\">常见形式：</span><br><span class=\"line\">\texecution(...):根据方法的签名来匹配</span><br><span class=\"line\">\t@annotation(...):根据注解匹配</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"PointCut\"><a href=\"#PointCut\" class=\"headerlink\" title=\"@PointCut\"></a>@PointCut</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">该注解的作用是将公共的切点表达式抽取出来，需要用到时引用该切点表达式即可</span><br><span class=\"line\"><span class=\"meta\">@PointCut(&quot;execution(* com.itheima.service.impl.Xxximpl.*(..))&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pt</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Around(&quot;pt()&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">recordTime</span><span class=\"params\">(ProceedingJoinPoint joinPoint)</span> <span class=\"keyword\">throws</span> Throwable</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":[],"tags":[{"name":"记录、笔记","path":"api/tags/记录、笔记.json"}]}